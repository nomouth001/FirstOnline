2025-07-12 15:47:03,651 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:47:03,651 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:47:03,651 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MO
2025-07-12 15:47:03,651 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:47:03,652 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:47:03,652 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:47:03,652 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:47:03,760 DEBUG [data.py:179] reusing crumb
2025-07-12 15:47:03,760 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:47:03,761 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:47:03,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:03,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:01:57', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:03,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:04,001 DEBUG [data.py:367] response code=200
2025-07-12 15:47:04,001 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:47:04,002 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:47:04,007 DEBUG [history.py:281] MO: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:47:04,008 DEBUG [history.py:318] MO: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:47:04,017 DEBUG [history.py:388] MO: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:04,020 DEBUG [history.py:467] MO: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:04,021 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:47:04,021 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:47:04,021 INFO [market_data_service.py:337] [MO] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:47:04,021 INFO [market_data_service.py:417] [MO] Yahoo Finance successful
2025-07-12 15:47:04,022 INFO [analysis_service.py:178] [MO] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:47:04,022 INFO [analysis_service.py:181] [MO] Calculating and saving new indicators...
2025-07-12 15:47:04,022 INFO [indicator_service.py:483] [MO] Starting comprehensive indicator calculation and storage...
2025-07-12 15:47:04,033 INFO [indicator_service.py:54] [MO] Daily OHLCV data saved: MO_ohlcv_d_20250712_154704.csv
2025-07-12 15:47:04,074 INFO [indicator_service.py:68] [MO] Weekly OHLCV data saved: MO_ohlcv_w_20250712_154704.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:04,081 INFO [indicator_service.py:82] [MO] Monthly OHLCV data saved: MO_ohlcv_m_20250712_154704.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:04,101 INFO [indicator_service.py:116] [MO] EMA5 d data saved: MO_ema5_d_20250712_154704.csv
2025-07-12 15:47:04,108 INFO [indicator_service.py:116] [MO] EMA20 d data saved: MO_ema20_d_20250712_154704.csv
2025-07-12 15:47:04,118 INFO [indicator_service.py:116] [MO] EMA40 d data saved: MO_ema40_d_20250712_154704.csv
2025-07-12 15:47:04,133 INFO [indicator_service.py:139] [MO] MACD d data saved: MO_macd_d_20250712_154704.csv
2025-07-12 15:47:04,144 INFO [indicator_service.py:162] [MO] Bollinger Bands d data saved: MO_bollinger_d_20250712_154704.csv
2025-07-12 15:47:04,163 INFO [indicator_service.py:186] [MO] Ichimoku d data saved: MO_ichimoku_d_20250712_154704.csv
2025-07-12 15:47:04,172 INFO [indicator_service.py:207] [MO] RSI d data saved: MO_rsi_d_20250712_154704.csv
2025-07-12 15:47:04,182 INFO [indicator_service.py:229] [MO] Stochastic d data saved: MO_stochastic_d_20250712_154704.csv
2025-07-12 15:47:04,190 INFO [indicator_service.py:267] [MO] Volume Ratio 5d d data saved: MO_volume_ratio_5d_d_20250712_154704.csv
2025-07-12 15:47:04,197 INFO [indicator_service.py:267] [MO] Volume Ratio 20d d data saved: MO_volume_ratio_20d_d_20250712_154704.csv
2025-07-12 15:47:04,203 INFO [indicator_service.py:267] [MO] Volume Ratio 40d d data saved: MO_volume_ratio_40d_d_20250712_154704.csv
2025-07-12 15:47:04,207 INFO [indicator_service.py:116] [MO] EMA5 w data saved: MO_ema5_w_20250712_154704.csv
2025-07-12 15:47:04,210 INFO [indicator_service.py:116] [MO] EMA20 w data saved: MO_ema20_w_20250712_154704.csv
2025-07-12 15:47:04,236 INFO [indicator_service.py:116] [MO] EMA40 w data saved: MO_ema40_w_20250712_154704.csv
2025-07-12 15:47:04,272 INFO [indicator_service.py:139] [MO] MACD w data saved: MO_macd_w_20250712_154704.csv
2025-07-12 15:47:04,295 INFO [indicator_service.py:162] [MO] Bollinger Bands w data saved: MO_bollinger_w_20250712_154704.csv
2025-07-12 15:47:04,312 INFO [indicator_service.py:186] [MO] Ichimoku w data saved: MO_ichimoku_w_20250712_154704.csv
2025-07-12 15:47:04,329 INFO [indicator_service.py:207] [MO] RSI w data saved: MO_rsi_w_20250712_154704.csv
2025-07-12 15:47:04,348 INFO [indicator_service.py:229] [MO] Stochastic w data saved: MO_stochastic_w_20250712_154704.csv
2025-07-12 15:47:04,355 INFO [indicator_service.py:267] [MO] Volume Ratio 5d w data saved: MO_volume_ratio_5d_w_20250712_154704.csv
2025-07-12 15:47:04,359 INFO [indicator_service.py:267] [MO] Volume Ratio 20d w data saved: MO_volume_ratio_20d_w_20250712_154704.csv
2025-07-12 15:47:04,362 INFO [indicator_service.py:267] [MO] Volume Ratio 40d w data saved: MO_volume_ratio_40d_w_20250712_154704.csv
2025-07-12 15:47:04,368 INFO [indicator_service.py:116] [MO] EMA5 m data saved: MO_ema5_m_20250712_154704.csv
2025-07-12 15:47:04,371 INFO [indicator_service.py:116] [MO] EMA20 m data saved: MO_ema20_m_20250712_154704.csv
2025-07-12 15:47:04,373 INFO [indicator_service.py:116] [MO] EMA40 m data saved: MO_ema40_m_20250712_154704.csv
2025-07-12 15:47:04,377 INFO [indicator_service.py:139] [MO] MACD m data saved: MO_macd_m_20250712_154704.csv
2025-07-12 15:47:04,384 INFO [indicator_service.py:162] [MO] Bollinger Bands m data saved: MO_bollinger_m_20250712_154704.csv
2025-07-12 15:47:04,392 INFO [indicator_service.py:186] [MO] Ichimoku m data saved: MO_ichimoku_m_20250712_154704.csv
2025-07-12 15:47:04,396 INFO [indicator_service.py:207] [MO] RSI m data saved: MO_rsi_m_20250712_154704.csv
2025-07-12 15:47:04,401 INFO [indicator_service.py:229] [MO] Stochastic m data saved: MO_stochastic_m_20250712_154704.csv
2025-07-12 15:47:04,405 INFO [indicator_service.py:267] [MO] Volume Ratio 5d m data saved: MO_volume_ratio_5d_m_20250712_154704.csv
2025-07-12 15:47:04,407 INFO [indicator_service.py:267] [MO] Volume Ratio 20d m data saved: MO_volume_ratio_20d_m_20250712_154704.csv
2025-07-12 15:47:04,409 INFO [indicator_service.py:267] [MO] Volume Ratio 40d m data saved: MO_volume_ratio_40d_m_20250712_154704.csv
2025-07-12 15:47:04,409 INFO [indicator_service.py:539] [MO] All indicators calculated and saved successfully
2025-07-12 15:47:04,487 INFO [analysis_service.py:209] [MO] Fresh indicators calculated successfully
2025-07-12 15:47:04,487 INFO [analysis_service.py:210] [MO] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:47:05,134 INFO [analysis_service.py:790] [MO] Starting Gemini AI analysis...
2025-07-12 15:47:05,134 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 MO 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배열...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:47:06,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:06,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:00', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:06,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:09,904 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:09,905 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:03', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:09,906 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:12,887 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:12,888 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:06', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:12,888 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:15,906 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:15,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:09', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:15,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:18,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:18,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:12', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:18,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:21,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:21,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:15', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:21,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:24,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:24,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:18', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:24,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:27,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:27,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:21', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:27,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:30,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:30,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:24', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:30,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:33,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:33,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:27', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:33,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:36,895 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:36,895 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:30', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:36,897 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:39,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:39,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:33', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:39,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:42,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:42,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'progress_percentage': 14.3, 'elapsed_time': '0:02:36', 'estimated_completion': '15:58:32', 'stop_requested': False}
2025-07-12 15:47:42,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:45,090 INFO [analysis_service.py:928] [MO] Gemini API call completed in 39.96 seconds
2025-07-12 15:47:45,091 INFO [analysis_service.py:931] Gemini raw response text length: 6376
2025-07-12 15:47:45,092 DEBUG [analysis_service.py:932] Gemini analysis raw response: MO 종목은 장기적으로 강력한 상승 추세에 있으나, 최근 단기적으로는 가격 조정과 하락 모멘텀이 포착되고 있습니다. 스윙 트레이더는 현재의 단기 하락 추세가 과매도 구간에 진입했으므로, 일봉상 명확한 반전 신호와 지지선 형성을 확인한 후 57달러 초반대에서 매수를 고려해볼 수 있습니다. 그러나 주봉 및 월봉 추세가 훼손되지 않는 선에서 반등 시 목표가를 설정하고, 최근 저점 이탈 시 손절매하는 보수적인 접근이 필요합니다.

---

### **핵심 요약**
1.  MO 주식은 월봉 차트에서 강한 상승 추세를 유지하고 있으나, 일봉 및 주봉 차트에서는 최근 단기적인 하락 조정과 모멘텀 약화가 뚜렷합니다.
2.  일봉상 주가는 볼린저밴드 하단에 근접하고 MACD가 깊은 음의 영역에 있어 단기적인 과매도 상태에 진입했음을 시사하며, 이는 기술적 반등 가능성을 열어둡니다.
3.  스윙 투자자는 57달러 초반의 지지선 근처에서 매수 기회를 탐색하되, 일봉 MACD의 상승 전환, 주요 이동평균...
2025-07-12 15:47:45,093 INFO [analysis_service.py:792] [MO] Gemini AI analysis completed. Success: True
2025-07-12 15:47:45,093 INFO [analysis_service.py:797] [MO] Extracting summary from Gemini analysis...
2025-07-12 15:47:45,094 INFO [analysis_service.py:799] [MO] Summary extracted successfully
2025-07-12 15:47:45,095 INFO [analysis_service.py:802] [MO] Getting indicator data for analysis...
2025-07-12 15:47:45,305 INFO [analysis_service.py:806] [MO] Saving HTML analysis file...
2025-07-12 15:47:45,307 INFO [analysis_service.py:834] [MO] HTML analysis file saved successfully with app_context
2025-07-12 15:47:45,307 INFO [analysis_service.py:840] [MO] AI analysis process completed successfully
2025-07-12 15:47:45,340 INFO [batch_analysis_service.py:435] [MO] New analysis completed successfully
2025-07-12 15:47:45,340 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:47:45,341 INFO [progress_service.py:24] Input params: ticker=NFLX, processed=6, total=35, list_name=03 Watch (6/21)
2025-07-12 15:47:45,341 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MO', 'current_list': '03 Watch (5/21)', 'total_tickers': 35, 'processed_tickers': 5, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 32, 878365), 'stop_requested': False}
2025-07-12 15:47:45,341 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:45,342 INFO [chart_service.py:116] [NFLX] Starting chart generation process...
2025-07-12 15:47:45,343 INFO [chart_service.py:123] [NFLX] Downloading data from yfinance...
2025-07-12 15:47:45,343 INFO [market_data_service.py:373] [NFLX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:47:45,344 INFO [market_data_service.py:413] [NFLX] Trying Yahoo Finance first...
2025-07-12 15:47:45,344 INFO [market_data_service.py:324] [NFLX] Downloading chart data (attempt 1/2)...
2025-07-12 15:47:45,344 DEBUG [utils.py:96] Entering history()
2025-07-12 15:47:45,345 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NFLX', 1, 0])
2025-07-12 15:47:45,345 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:47:45,346 DEBUG [history.py:165] NFLX: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:47:45,346 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:47:45,347 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:47:45,347 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NFLX
2025-07-12 15:47:45,347 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:47:45,348 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:47:45,348 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:47:45,348 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:47:45,491 DEBUG [data.py:179] reusing crumb
2025-07-12 15:47:45,492 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:47:45,492 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:47:45,673 DEBUG [data.py:367] response code=200
2025-07-12 15:47:45,674 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:47:45,674 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:47:45,689 DEBUG [history.py:281] NFLX: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:47:45,692 DEBUG [history.py:318] NFLX: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:47:45,699 DEBUG [history.py:388] NFLX: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:45,702 DEBUG [history.py:467] NFLX: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:45,702 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:47:45,702 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:47:45,703 INFO [market_data_service.py:337] [NFLX] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:47:45,703 INFO [market_data_service.py:417] [NFLX] Yahoo Finance successful
2025-07-12 15:47:45,703 INFO [chart_service.py:125] [NFLX] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:47:45,704 INFO [chart_service.py:142] [NFLX] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:47:45,745 WARNING [chart_service.py:217] [NFLX] No saved MACD data found for d, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:47:46,026 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:46,027 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:39', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:47:46,028 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:46] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:46,375 WARNING [chart_service.py:217] [NFLX] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:47:46,822 WARNING [chart_service.py:217] [NFLX] No saved MACD data found for m, calculating directly
2025-07-12 15:47:47,150 INFO [chart_service.py:154] [NFLX] Starting integrated indicator calculation and storage...
2025-07-12 15:47:47,151 INFO [indicator_service.py:483] [NFLX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:47:47,175 INFO [indicator_service.py:54] [NFLX] Daily OHLCV data saved: NFLX_ohlcv_d_20250712_154747.csv
2025-07-12 15:47:47,202 INFO [indicator_service.py:68] [NFLX] Weekly OHLCV data saved: NFLX_ohlcv_w_20250712_154747.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:47,209 INFO [indicator_service.py:82] [NFLX] Monthly OHLCV data saved: NFLX_ohlcv_m_20250712_154747.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:47,228 INFO [indicator_service.py:116] [NFLX] EMA5 d data saved: NFLX_ema5_d_20250712_154747.csv
2025-07-12 15:47:47,235 INFO [indicator_service.py:116] [NFLX] EMA20 d data saved: NFLX_ema20_d_20250712_154747.csv
2025-07-12 15:47:47,241 INFO [indicator_service.py:116] [NFLX] EMA40 d data saved: NFLX_ema40_d_20250712_154747.csv
2025-07-12 15:47:47,254 INFO [indicator_service.py:139] [NFLX] MACD d data saved: NFLX_macd_d_20250712_154747.csv
2025-07-12 15:47:47,266 INFO [indicator_service.py:162] [NFLX] Bollinger Bands d data saved: NFLX_bollinger_d_20250712_154747.csv
2025-07-12 15:47:47,285 INFO [indicator_service.py:186] [NFLX] Ichimoku d data saved: NFLX_ichimoku_d_20250712_154747.csv
2025-07-12 15:47:47,293 INFO [indicator_service.py:207] [NFLX] RSI d data saved: NFLX_rsi_d_20250712_154747.csv
2025-07-12 15:47:47,304 INFO [indicator_service.py:229] [NFLX] Stochastic d data saved: NFLX_stochastic_d_20250712_154747.csv
2025-07-12 15:47:47,312 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d d data saved: NFLX_volume_ratio_5d_d_20250712_154747.csv
2025-07-12 15:47:47,319 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d d data saved: NFLX_volume_ratio_20d_d_20250712_154747.csv
2025-07-12 15:47:47,324 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d d data saved: NFLX_volume_ratio_40d_d_20250712_154747.csv
2025-07-12 15:47:47,328 INFO [indicator_service.py:116] [NFLX] EMA5 w data saved: NFLX_ema5_w_20250712_154747.csv
2025-07-12 15:47:47,331 INFO [indicator_service.py:116] [NFLX] EMA20 w data saved: NFLX_ema20_w_20250712_154747.csv
2025-07-12 15:47:47,335 INFO [indicator_service.py:116] [NFLX] EMA40 w data saved: NFLX_ema40_w_20250712_154747.csv
2025-07-12 15:47:47,340 INFO [indicator_service.py:139] [NFLX] MACD w data saved: NFLX_macd_w_20250712_154747.csv
2025-07-12 15:47:47,347 INFO [indicator_service.py:162] [NFLX] Bollinger Bands w data saved: NFLX_bollinger_w_20250712_154747.csv
2025-07-12 15:47:47,354 INFO [indicator_service.py:186] [NFLX] Ichimoku w data saved: NFLX_ichimoku_w_20250712_154747.csv
2025-07-12 15:47:47,361 INFO [indicator_service.py:207] [NFLX] RSI w data saved: NFLX_rsi_w_20250712_154747.csv
2025-07-12 15:47:47,367 INFO [indicator_service.py:229] [NFLX] Stochastic w data saved: NFLX_stochastic_w_20250712_154747.csv
2025-07-12 15:47:47,372 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d w data saved: NFLX_volume_ratio_5d_w_20250712_154747.csv
2025-07-12 15:47:47,375 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d w data saved: NFLX_volume_ratio_20d_w_20250712_154747.csv
2025-07-12 15:47:47,378 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d w data saved: NFLX_volume_ratio_40d_w_20250712_154747.csv
2025-07-12 15:47:47,383 INFO [indicator_service.py:116] [NFLX] EMA5 m data saved: NFLX_ema5_m_20250712_154747.csv
2025-07-12 15:47:47,385 INFO [indicator_service.py:116] [NFLX] EMA20 m data saved: NFLX_ema20_m_20250712_154747.csv
2025-07-12 15:47:47,387 INFO [indicator_service.py:116] [NFLX] EMA40 m data saved: NFLX_ema40_m_20250712_154747.csv
2025-07-12 15:47:47,392 INFO [indicator_service.py:139] [NFLX] MACD m data saved: NFLX_macd_m_20250712_154747.csv
2025-07-12 15:47:47,400 INFO [indicator_service.py:162] [NFLX] Bollinger Bands m data saved: NFLX_bollinger_m_20250712_154747.csv
2025-07-12 15:47:47,409 INFO [indicator_service.py:186] [NFLX] Ichimoku m data saved: NFLX_ichimoku_m_20250712_154747.csv
2025-07-12 15:47:47,412 INFO [indicator_service.py:207] [NFLX] RSI m data saved: NFLX_rsi_m_20250712_154747.csv
2025-07-12 15:47:47,417 INFO [indicator_service.py:229] [NFLX] Stochastic m data saved: NFLX_stochastic_m_20250712_154747.csv
2025-07-12 15:47:47,421 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d m data saved: NFLX_volume_ratio_5d_m_20250712_154747.csv
2025-07-12 15:47:47,423 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d m data saved: NFLX_volume_ratio_20d_m_20250712_154747.csv
2025-07-12 15:47:47,425 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d m data saved: NFLX_volume_ratio_40d_m_20250712_154747.csv
2025-07-12 15:47:47,425 INFO [indicator_service.py:539] [NFLX] All indicators calculated and saved successfully
2025-07-12 15:47:47,425 INFO [chart_service.py:158] [NFLX] Indicator calculation and storage completed successfully
2025-07-12 15:47:47,425 INFO [chart_service.py:165] [NFLX] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:47:47,427 INFO [analysis_service.py:348] [NFLX] Starting AI analysis process...
2025-07-12 15:47:47,427 INFO [analysis_service.py:356] [NFLX] Looking for chart files...
2025-07-12 15:47:47,431 INFO [analysis_service.py:413] [NFLX] Found Daily chart: NFLX_daily_20250712.png
2025-07-12 15:47:47,432 INFO [analysis_service.py:413] [NFLX] Found Weekly chart: NFLX_weekly_20250712.png
2025-07-12 15:47:47,432 INFO [analysis_service.py:413] [NFLX] Found Monthly chart: NFLX_monthly_20250712.png
2025-07-12 15:47:47,432 INFO [analysis_service.py:415] [NFLX] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:47:47,432 INFO [analysis_service.py:432] [NFLX] Chart image transmission disabled - using text-only analysis
2025-07-12 15:47:47,432 INFO [analysis_service.py:439] [NFLX] Determining data processing strategy based on market hours...
2025-07-12 15:47:47,432 INFO [analysis_service.py:463] [NFLX] US stock - Current EST: 15:47:47, Market hours: True
2025-07-12 15:47:47,432 INFO [analysis_service.py:470] [NFLX] Market hours detected - will download fresh data
2025-07-12 15:47:47,433 INFO [analysis_service.py:479] [NFLX] Downloading fresh data and calculating new indicators...
2025-07-12 15:47:47,433 INFO [analysis_service.py:155] [NFLX] Starting fresh data download and analysis...
2025-07-12 15:47:47,433 INFO [analysis_service.py:163] [NFLX] Downloading fresh stock data...
2025-07-12 15:47:47,433 INFO [market_data_service.py:373] [NFLX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:47:47,433 INFO [market_data_service.py:413] [NFLX] Trying Yahoo Finance first...
2025-07-12 15:47:47,433 INFO [market_data_service.py:324] [NFLX] Downloading chart data (attempt 1/2)...
2025-07-12 15:47:47,433 DEBUG [utils.py:96] Entering history()
2025-07-12 15:47:47,434 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NFLX', 1, 0])
2025-07-12 15:47:47,435 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:47:47,435 DEBUG [history.py:165] NFLX: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:47:47,435 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:47:47,435 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:47:47,436 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NFLX
2025-07-12 15:47:47,436 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:47:47,436 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:47:47,436 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:47:47,436 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:47:47,542 DEBUG [data.py:179] reusing crumb
2025-07-12 15:47:47,543 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:47:47,544 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:47:47,723 DEBUG [data.py:367] response code=200
2025-07-12 15:47:47,723 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:47:47,723 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:47:47,729 DEBUG [history.py:281] NFLX: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:47:47,731 DEBUG [history.py:318] NFLX: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:47:47,734 DEBUG [history.py:388] NFLX: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:47,736 DEBUG [history.py:467] NFLX: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:47:47,737 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:47:47,737 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:47:47,737 INFO [market_data_service.py:337] [NFLX] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:47:47,738 INFO [market_data_service.py:417] [NFLX] Yahoo Finance successful
2025-07-12 15:47:47,738 INFO [analysis_service.py:178] [NFLX] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:47:47,738 INFO [analysis_service.py:181] [NFLX] Calculating and saving new indicators...
2025-07-12 15:47:47,738 INFO [indicator_service.py:483] [NFLX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:47:47,748 INFO [indicator_service.py:54] [NFLX] Daily OHLCV data saved: NFLX_ohlcv_d_20250712_154747.csv
2025-07-12 15:47:47,763 INFO [indicator_service.py:68] [NFLX] Weekly OHLCV data saved: NFLX_ohlcv_w_20250712_154747.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:47,770 INFO [indicator_service.py:82] [NFLX] Monthly OHLCV data saved: NFLX_ohlcv_m_20250712_154747.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:47:47,793 INFO [indicator_service.py:116] [NFLX] EMA5 d data saved: NFLX_ema5_d_20250712_154747.csv
2025-07-12 15:47:47,808 INFO [indicator_service.py:116] [NFLX] EMA20 d data saved: NFLX_ema20_d_20250712_154747.csv
2025-07-12 15:47:47,818 INFO [indicator_service.py:116] [NFLX] EMA40 d data saved: NFLX_ema40_d_20250712_154747.csv
2025-07-12 15:47:47,832 INFO [indicator_service.py:139] [NFLX] MACD d data saved: NFLX_macd_d_20250712_154747.csv
2025-07-12 15:47:47,843 INFO [indicator_service.py:162] [NFLX] Bollinger Bands d data saved: NFLX_bollinger_d_20250712_154747.csv
2025-07-12 15:47:47,866 INFO [indicator_service.py:186] [NFLX] Ichimoku d data saved: NFLX_ichimoku_d_20250712_154747.csv
2025-07-12 15:47:47,878 INFO [indicator_service.py:207] [NFLX] RSI d data saved: NFLX_rsi_d_20250712_154747.csv
2025-07-12 15:47:47,890 INFO [indicator_service.py:229] [NFLX] Stochastic d data saved: NFLX_stochastic_d_20250712_154747.csv
2025-07-12 15:47:47,902 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d d data saved: NFLX_volume_ratio_5d_d_20250712_154747.csv
2025-07-12 15:47:47,907 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d d data saved: NFLX_volume_ratio_20d_d_20250712_154747.csv
2025-07-12 15:47:47,912 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d d data saved: NFLX_volume_ratio_40d_d_20250712_154747.csv
2025-07-12 15:47:47,917 INFO [indicator_service.py:116] [NFLX] EMA5 w data saved: NFLX_ema5_w_20250712_154747.csv
2025-07-12 15:47:47,920 INFO [indicator_service.py:116] [NFLX] EMA20 w data saved: NFLX_ema20_w_20250712_154747.csv
2025-07-12 15:47:47,922 INFO [indicator_service.py:116] [NFLX] EMA40 w data saved: NFLX_ema40_w_20250712_154747.csv
2025-07-12 15:47:47,927 INFO [indicator_service.py:139] [NFLX] MACD w data saved: NFLX_macd_w_20250712_154747.csv
2025-07-12 15:47:47,933 INFO [indicator_service.py:162] [NFLX] Bollinger Bands w data saved: NFLX_bollinger_w_20250712_154747.csv
2025-07-12 15:47:47,940 INFO [indicator_service.py:186] [NFLX] Ichimoku w data saved: NFLX_ichimoku_w_20250712_154747.csv
2025-07-12 15:47:47,944 INFO [indicator_service.py:207] [NFLX] RSI w data saved: NFLX_rsi_w_20250712_154747.csv
2025-07-12 15:47:47,949 INFO [indicator_service.py:229] [NFLX] Stochastic w data saved: NFLX_stochastic_w_20250712_154747.csv
2025-07-12 15:47:47,955 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d w data saved: NFLX_volume_ratio_5d_w_20250712_154747.csv
2025-07-12 15:47:47,958 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d w data saved: NFLX_volume_ratio_20d_w_20250712_154747.csv
2025-07-12 15:47:47,960 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d w data saved: NFLX_volume_ratio_40d_w_20250712_154747.csv
2025-07-12 15:47:47,984 INFO [indicator_service.py:116] [NFLX] EMA5 m data saved: NFLX_ema5_m_20250712_154747.csv
2025-07-12 15:47:47,987 INFO [indicator_service.py:116] [NFLX] EMA20 m data saved: NFLX_ema20_m_20250712_154747.csv
2025-07-12 15:47:47,990 INFO [indicator_service.py:116] [NFLX] EMA40 m data saved: NFLX_ema40_m_20250712_154747.csv
2025-07-12 15:47:47,997 INFO [indicator_service.py:139] [NFLX] MACD m data saved: NFLX_macd_m_20250712_154747.csv
2025-07-12 15:47:48,002 INFO [indicator_service.py:162] [NFLX] Bollinger Bands m data saved: NFLX_bollinger_m_20250712_154747.csv
2025-07-12 15:47:48,007 INFO [indicator_service.py:186] [NFLX] Ichimoku m data saved: NFLX_ichimoku_m_20250712_154747.csv
2025-07-12 15:47:48,010 INFO [indicator_service.py:207] [NFLX] RSI m data saved: NFLX_rsi_m_20250712_154747.csv
2025-07-12 15:47:48,014 INFO [indicator_service.py:229] [NFLX] Stochastic m data saved: NFLX_stochastic_m_20250712_154747.csv
2025-07-12 15:47:48,018 INFO [indicator_service.py:267] [NFLX] Volume Ratio 5d m data saved: NFLX_volume_ratio_5d_m_20250712_154747.csv
2025-07-12 15:47:48,020 INFO [indicator_service.py:267] [NFLX] Volume Ratio 20d m data saved: NFLX_volume_ratio_20d_m_20250712_154747.csv
2025-07-12 15:47:48,022 INFO [indicator_service.py:267] [NFLX] Volume Ratio 40d m data saved: NFLX_volume_ratio_40d_m_20250712_154747.csv
2025-07-12 15:47:48,022 INFO [indicator_service.py:539] [NFLX] All indicators calculated and saved successfully
2025-07-12 15:47:48,101 INFO [analysis_service.py:209] [NFLX] Fresh indicators calculated successfully
2025-07-12 15:47:48,101 INFO [analysis_service.py:210] [NFLX] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:47:48,818 INFO [analysis_service.py:790] [NFLX] Starting Gemini AI analysis...
2025-07-12 15:47:48,819 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 NFLX 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:47:48,906 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:48,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:42', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:47:48,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:51,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:51,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:45', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:47:51,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:54,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:54,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:48', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:47:54,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:47:57,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:47:57,905 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:51', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:47:57,906 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:47:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:00,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:00,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:54', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:00,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:03,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:03,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:02:57', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:03,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:06,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:06,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:03:00', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:06,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:09,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:09,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:03:03', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:09,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:12,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:12,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:03:06', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:12,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:15,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:15,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:03:09', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:15,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:18,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:18,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'progress_percentage': 17.1, 'elapsed_time': '0:03:12', 'estimated_completion': '16:00:32', 'stop_requested': False}
2025-07-12 15:48:18,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:21,375 INFO [analysis_service.py:928] [NFLX] Gemini API call completed in 32.56 seconds
2025-07-12 15:48:21,375 INFO [analysis_service.py:931] Gemini raw response text length: 6217
2025-07-12 15:48:21,376 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  NFLX는 월봉 및 주봉상 강력한 상승 추세에 있으며, 최근 일봉상 하락은 이 장기 추세 내에서의 단기적인 조정으로 판단됩니다.
2.  스윙 투자자는 현재의 단기 조정을 매수 기회로 활용하되, 일봉상 하락세가 진정되고 상승 반전 신호(EMA 상향 돌파, MACD 골든크로스, 볼린저밴드 하단 지지)가 나타날 때 분할 매수를 고려해야 합니다.
3.  매수 이후에는 직전 고점 돌파 여부와 상단 저항선, MACD 데드크로스, 볼린저밴드 상단 이탈 등을 주시하며 목표 수익 달성 시 이익을 실현하고, 매수 진입 지점 이하의 주요 지지선 붕괴 시 손절매를 통한 리스크 관리가 필수적입니다.

---

**NFLX 차트 기술적 분석 및 스윙 투자 전략**

제공된 OHLCV 데이터를 기반으로 NFLX 종목의 기술적 지표들을 계산하고 분석한 후, 스윙 투자 관점에서의 매수 및 매도 타이밍을 제시합니다.

**기술적 지표 계산 (주요 지표만 언급하며 상세 값은 생략):**

*...
2025-07-12 15:48:21,376 INFO [analysis_service.py:792] [NFLX] Gemini AI analysis completed. Success: True
2025-07-12 15:48:21,376 INFO [analysis_service.py:797] [NFLX] Extracting summary from Gemini analysis...
2025-07-12 15:48:21,377 INFO [analysis_service.py:799] [NFLX] Summary extracted successfully
2025-07-12 15:48:21,377 INFO [analysis_service.py:802] [NFLX] Getting indicator data for analysis...
2025-07-12 15:48:21,581 INFO [analysis_service.py:806] [NFLX] Saving HTML analysis file...
2025-07-12 15:48:21,583 INFO [analysis_service.py:834] [NFLX] HTML analysis file saved successfully with app_context
2025-07-12 15:48:21,583 INFO [analysis_service.py:840] [NFLX] AI analysis process completed successfully
2025-07-12 15:48:21,618 INFO [batch_analysis_service.py:435] [NFLX] New analysis completed successfully
2025-07-12 15:48:21,618 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:48:21,619 INFO [progress_service.py:24] Input params: ticker=TSLA, processed=7, total=35, list_name=03 Watch (7/21)
2025-07-12 15:48:21,619 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NFLX', 'current_list': '03 Watch (6/21)', 'total_tickers': 35, 'processed_tickers': 6, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 32, 655821), 'stop_requested': False}
2025-07-12 15:48:21,619 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:21,620 INFO [chart_service.py:116] [TSLA] Starting chart generation process...
2025-07-12 15:48:21,621 INFO [chart_service.py:123] [TSLA] Downloading data from yfinance...
2025-07-12 15:48:21,621 INFO [market_data_service.py:373] [TSLA] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:48:21,621 INFO [market_data_service.py:413] [TSLA] Trying Yahoo Finance first...
2025-07-12 15:48:21,622 INFO [market_data_service.py:324] [TSLA] Downloading chart data (attempt 1/2)...
2025-07-12 15:48:21,622 DEBUG [utils.py:96] Entering history()
2025-07-12 15:48:21,622 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TSLA', 1, 0])
2025-07-12 15:48:21,623 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:48:21,624 DEBUG [history.py:165] TSLA: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:48:21,624 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:48:21,624 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:48:21,624 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TSLA
2025-07-12 15:48:21,625 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:48:21,625 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:48:21,625 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:48:21,625 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:48:21,740 DEBUG [data.py:179] reusing crumb
2025-07-12 15:48:21,741 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:48:21,741 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:48:21,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:21,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:15', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:21,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:21,955 DEBUG [data.py:367] response code=200
2025-07-12 15:48:21,956 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:48:21,956 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:48:21,969 DEBUG [history.py:281] TSLA: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:48:21,972 DEBUG [history.py:318] TSLA: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:48:21,979 DEBUG [history.py:388] TSLA: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:48:21,981 DEBUG [history.py:467] TSLA: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:48:21,982 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:48:21,982 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:48:21,982 INFO [market_data_service.py:337] [TSLA] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:48:21,983 INFO [market_data_service.py:417] [TSLA] Yahoo Finance successful
2025-07-12 15:48:21,983 INFO [chart_service.py:125] [TSLA] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:48:21,985 INFO [chart_service.py:142] [TSLA] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:48:22,027 WARNING [chart_service.py:217] [TSLA] No saved MACD data found for d, calculating directly
2025-07-12 15:48:22,433 WARNING [chart_service.py:217] [TSLA] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:48:22,819 WARNING [chart_service.py:217] [TSLA] No saved MACD data found for m, calculating directly
2025-07-12 15:48:23,133 INFO [chart_service.py:154] [TSLA] Starting integrated indicator calculation and storage...
2025-07-12 15:48:23,134 INFO [indicator_service.py:483] [TSLA] Starting comprehensive indicator calculation and storage...
2025-07-12 15:48:23,143 INFO [indicator_service.py:54] [TSLA] Daily OHLCV data saved: TSLA_ohlcv_d_20250712_154823.csv
2025-07-12 15:48:23,164 INFO [indicator_service.py:68] [TSLA] Weekly OHLCV data saved: TSLA_ohlcv_w_20250712_154823.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:48:23,177 INFO [indicator_service.py:82] [TSLA] Monthly OHLCV data saved: TSLA_ohlcv_m_20250712_154823.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:48:23,194 INFO [indicator_service.py:116] [TSLA] EMA5 d data saved: TSLA_ema5_d_20250712_154823.csv
2025-07-12 15:48:23,201 INFO [indicator_service.py:116] [TSLA] EMA20 d data saved: TSLA_ema20_d_20250712_154823.csv
2025-07-12 15:48:23,207 INFO [indicator_service.py:116] [TSLA] EMA40 d data saved: TSLA_ema40_d_20250712_154823.csv
2025-07-12 15:48:23,219 INFO [indicator_service.py:139] [TSLA] MACD d data saved: TSLA_macd_d_20250712_154823.csv
2025-07-12 15:48:23,230 INFO [indicator_service.py:162] [TSLA] Bollinger Bands d data saved: TSLA_bollinger_d_20250712_154823.csv
2025-07-12 15:48:23,246 INFO [indicator_service.py:186] [TSLA] Ichimoku d data saved: TSLA_ichimoku_d_20250712_154823.csv
2025-07-12 15:48:23,255 INFO [indicator_service.py:207] [TSLA] RSI d data saved: TSLA_rsi_d_20250712_154823.csv
2025-07-12 15:48:23,265 INFO [indicator_service.py:229] [TSLA] Stochastic d data saved: TSLA_stochastic_d_20250712_154823.csv
2025-07-12 15:48:23,273 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d d data saved: TSLA_volume_ratio_5d_d_20250712_154823.csv
2025-07-12 15:48:23,279 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d d data saved: TSLA_volume_ratio_20d_d_20250712_154823.csv
2025-07-12 15:48:23,286 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d d data saved: TSLA_volume_ratio_40d_d_20250712_154823.csv
2025-07-12 15:48:23,290 INFO [indicator_service.py:116] [TSLA] EMA5 w data saved: TSLA_ema5_w_20250712_154823.csv
2025-07-12 15:48:23,293 INFO [indicator_service.py:116] [TSLA] EMA20 w data saved: TSLA_ema20_w_20250712_154823.csv
2025-07-12 15:48:23,296 INFO [indicator_service.py:116] [TSLA] EMA40 w data saved: TSLA_ema40_w_20250712_154823.csv
2025-07-12 15:48:23,302 INFO [indicator_service.py:139] [TSLA] MACD w data saved: TSLA_macd_w_20250712_154823.csv
2025-07-12 15:48:23,308 INFO [indicator_service.py:162] [TSLA] Bollinger Bands w data saved: TSLA_bollinger_w_20250712_154823.csv
2025-07-12 15:48:23,317 INFO [indicator_service.py:186] [TSLA] Ichimoku w data saved: TSLA_ichimoku_w_20250712_154823.csv
2025-07-12 15:48:23,325 INFO [indicator_service.py:207] [TSLA] RSI w data saved: TSLA_rsi_w_20250712_154823.csv
2025-07-12 15:48:23,332 INFO [indicator_service.py:229] [TSLA] Stochastic w data saved: TSLA_stochastic_w_20250712_154823.csv
2025-07-12 15:48:23,339 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d w data saved: TSLA_volume_ratio_5d_w_20250712_154823.csv
2025-07-12 15:48:23,343 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d w data saved: TSLA_volume_ratio_20d_w_20250712_154823.csv
2025-07-12 15:48:23,347 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d w data saved: TSLA_volume_ratio_40d_w_20250712_154823.csv
2025-07-12 15:48:23,353 INFO [indicator_service.py:116] [TSLA] EMA5 m data saved: TSLA_ema5_m_20250712_154823.csv
2025-07-12 15:48:23,356 INFO [indicator_service.py:116] [TSLA] EMA20 m data saved: TSLA_ema20_m_20250712_154823.csv
2025-07-12 15:48:23,359 INFO [indicator_service.py:116] [TSLA] EMA40 m data saved: TSLA_ema40_m_20250712_154823.csv
2025-07-12 15:48:23,364 INFO [indicator_service.py:139] [TSLA] MACD m data saved: TSLA_macd_m_20250712_154823.csv
2025-07-12 15:48:23,371 INFO [indicator_service.py:162] [TSLA] Bollinger Bands m data saved: TSLA_bollinger_m_20250712_154823.csv
2025-07-12 15:48:23,377 INFO [indicator_service.py:186] [TSLA] Ichimoku m data saved: TSLA_ichimoku_m_20250712_154823.csv
2025-07-12 15:48:23,381 INFO [indicator_service.py:207] [TSLA] RSI m data saved: TSLA_rsi_m_20250712_154823.csv
2025-07-12 15:48:23,386 INFO [indicator_service.py:229] [TSLA] Stochastic m data saved: TSLA_stochastic_m_20250712_154823.csv
2025-07-12 15:48:23,391 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d m data saved: TSLA_volume_ratio_5d_m_20250712_154823.csv
2025-07-12 15:48:23,394 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d m data saved: TSLA_volume_ratio_20d_m_20250712_154823.csv
2025-07-12 15:48:23,396 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d m data saved: TSLA_volume_ratio_40d_m_20250712_154823.csv
2025-07-12 15:48:23,397 INFO [indicator_service.py:539] [TSLA] All indicators calculated and saved successfully
2025-07-12 15:48:23,397 INFO [chart_service.py:158] [TSLA] Indicator calculation and storage completed successfully
2025-07-12 15:48:23,397 INFO [chart_service.py:165] [TSLA] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:48:23,400 INFO [analysis_service.py:348] [TSLA] Starting AI analysis process...
2025-07-12 15:48:23,401 INFO [analysis_service.py:356] [TSLA] Looking for chart files...
2025-07-12 15:48:23,406 INFO [analysis_service.py:413] [TSLA] Found Daily chart: TSLA_daily_20250712.png
2025-07-12 15:48:23,406 INFO [analysis_service.py:413] [TSLA] Found Weekly chart: TSLA_weekly_20250712.png
2025-07-12 15:48:23,406 INFO [analysis_service.py:413] [TSLA] Found Monthly chart: TSLA_monthly_20250712.png
2025-07-12 15:48:23,406 INFO [analysis_service.py:415] [TSLA] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:48:23,406 INFO [analysis_service.py:432] [TSLA] Chart image transmission disabled - using text-only analysis
2025-07-12 15:48:23,407 INFO [analysis_service.py:439] [TSLA] Determining data processing strategy based on market hours...
2025-07-12 15:48:23,407 INFO [analysis_service.py:463] [TSLA] US stock - Current EST: 15:48:23, Market hours: True
2025-07-12 15:48:23,407 INFO [analysis_service.py:470] [TSLA] Market hours detected - will download fresh data
2025-07-12 15:48:23,407 INFO [analysis_service.py:479] [TSLA] Downloading fresh data and calculating new indicators...
2025-07-12 15:48:23,407 INFO [analysis_service.py:155] [TSLA] Starting fresh data download and analysis...
2025-07-12 15:48:23,407 INFO [analysis_service.py:163] [TSLA] Downloading fresh stock data...
2025-07-12 15:48:23,407 INFO [market_data_service.py:373] [TSLA] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:48:23,408 INFO [market_data_service.py:413] [TSLA] Trying Yahoo Finance first...
2025-07-12 15:48:23,408 INFO [market_data_service.py:324] [TSLA] Downloading chart data (attempt 1/2)...
2025-07-12 15:48:23,408 DEBUG [utils.py:96] Entering history()
2025-07-12 15:48:23,408 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TSLA', 1, 0])
2025-07-12 15:48:23,409 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:48:23,410 DEBUG [history.py:165] TSLA: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:48:23,410 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:48:23,410 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:48:23,410 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TSLA
2025-07-12 15:48:23,410 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:48:23,410 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:48:23,410 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:48:23,411 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:48:23,503 DEBUG [data.py:179] reusing crumb
2025-07-12 15:48:23,504 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:48:23,504 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:48:23,694 DEBUG [data.py:367] response code=200
2025-07-12 15:48:23,694 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:48:23,695 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:48:23,700 DEBUG [history.py:281] TSLA: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:48:23,702 DEBUG [history.py:318] TSLA: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:48:23,710 DEBUG [history.py:388] TSLA: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:48:23,712 DEBUG [history.py:467] TSLA: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:48:23,712 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:48:23,713 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:48:23,713 INFO [market_data_service.py:337] [TSLA] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:48:23,713 INFO [market_data_service.py:417] [TSLA] Yahoo Finance successful
2025-07-12 15:48:23,713 INFO [analysis_service.py:178] [TSLA] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:48:23,713 INFO [analysis_service.py:181] [TSLA] Calculating and saving new indicators...
2025-07-12 15:48:23,714 INFO [indicator_service.py:483] [TSLA] Starting comprehensive indicator calculation and storage...
2025-07-12 15:48:23,724 INFO [indicator_service.py:54] [TSLA] Daily OHLCV data saved: TSLA_ohlcv_d_20250712_154823.csv
2025-07-12 15:48:23,732 INFO [indicator_service.py:68] [TSLA] Weekly OHLCV data saved: TSLA_ohlcv_w_20250712_154823.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:48:23,737 INFO [indicator_service.py:82] [TSLA] Monthly OHLCV data saved: TSLA_ohlcv_m_20250712_154823.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:48:23,752 INFO [indicator_service.py:116] [TSLA] EMA5 d data saved: TSLA_ema5_d_20250712_154823.csv
2025-07-12 15:48:23,758 INFO [indicator_service.py:116] [TSLA] EMA20 d data saved: TSLA_ema20_d_20250712_154823.csv
2025-07-12 15:48:23,763 INFO [indicator_service.py:116] [TSLA] EMA40 d data saved: TSLA_ema40_d_20250712_154823.csv
2025-07-12 15:48:23,774 INFO [indicator_service.py:139] [TSLA] MACD d data saved: TSLA_macd_d_20250712_154823.csv
2025-07-12 15:48:23,787 INFO [indicator_service.py:162] [TSLA] Bollinger Bands d data saved: TSLA_bollinger_d_20250712_154823.csv
2025-07-12 15:48:23,810 INFO [indicator_service.py:186] [TSLA] Ichimoku d data saved: TSLA_ichimoku_d_20250712_154823.csv
2025-07-12 15:48:23,822 INFO [indicator_service.py:207] [TSLA] RSI d data saved: TSLA_rsi_d_20250712_154823.csv
2025-07-12 15:48:23,835 INFO [indicator_service.py:229] [TSLA] Stochastic d data saved: TSLA_stochastic_d_20250712_154823.csv
2025-07-12 15:48:23,846 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d d data saved: TSLA_volume_ratio_5d_d_20250712_154823.csv
2025-07-12 15:48:23,854 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d d data saved: TSLA_volume_ratio_20d_d_20250712_154823.csv
2025-07-12 15:48:23,860 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d d data saved: TSLA_volume_ratio_40d_d_20250712_154823.csv
2025-07-12 15:48:23,865 INFO [indicator_service.py:116] [TSLA] EMA5 w data saved: TSLA_ema5_w_20250712_154823.csv
2025-07-12 15:48:23,868 INFO [indicator_service.py:116] [TSLA] EMA20 w data saved: TSLA_ema20_w_20250712_154823.csv
2025-07-12 15:48:23,870 INFO [indicator_service.py:116] [TSLA] EMA40 w data saved: TSLA_ema40_w_20250712_154823.csv
2025-07-12 15:48:23,875 INFO [indicator_service.py:139] [TSLA] MACD w data saved: TSLA_macd_w_20250712_154823.csv
2025-07-12 15:48:23,881 INFO [indicator_service.py:162] [TSLA] Bollinger Bands w data saved: TSLA_bollinger_w_20250712_154823.csv
2025-07-12 15:48:23,888 INFO [indicator_service.py:186] [TSLA] Ichimoku w data saved: TSLA_ichimoku_w_20250712_154823.csv
2025-07-12 15:48:23,892 INFO [indicator_service.py:207] [TSLA] RSI w data saved: TSLA_rsi_w_20250712_154823.csv
2025-07-12 15:48:23,897 INFO [indicator_service.py:229] [TSLA] Stochastic w data saved: TSLA_stochastic_w_20250712_154823.csv
2025-07-12 15:48:23,901 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d w data saved: TSLA_volume_ratio_5d_w_20250712_154823.csv
2025-07-12 15:48:23,904 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d w data saved: TSLA_volume_ratio_20d_w_20250712_154823.csv
2025-07-12 15:48:23,906 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d w data saved: TSLA_volume_ratio_40d_w_20250712_154823.csv
2025-07-12 15:48:23,908 INFO [indicator_service.py:116] [TSLA] EMA5 m data saved: TSLA_ema5_m_20250712_154823.csv
2025-07-12 15:48:23,910 INFO [indicator_service.py:116] [TSLA] EMA20 m data saved: TSLA_ema20_m_20250712_154823.csv
2025-07-12 15:48:23,911 INFO [indicator_service.py:116] [TSLA] EMA40 m data saved: TSLA_ema40_m_20250712_154823.csv
2025-07-12 15:48:23,915 INFO [indicator_service.py:139] [TSLA] MACD m data saved: TSLA_macd_m_20250712_154823.csv
2025-07-12 15:48:23,919 INFO [indicator_service.py:162] [TSLA] Bollinger Bands m data saved: TSLA_bollinger_m_20250712_154823.csv
2025-07-12 15:48:23,924 INFO [indicator_service.py:186] [TSLA] Ichimoku m data saved: TSLA_ichimoku_m_20250712_154823.csv
2025-07-12 15:48:23,927 INFO [indicator_service.py:207] [TSLA] RSI m data saved: TSLA_rsi_m_20250712_154823.csv
2025-07-12 15:48:23,931 INFO [indicator_service.py:229] [TSLA] Stochastic m data saved: TSLA_stochastic_m_20250712_154823.csv
2025-07-12 15:48:23,935 INFO [indicator_service.py:267] [TSLA] Volume Ratio 5d m data saved: TSLA_volume_ratio_5d_m_20250712_154823.csv
2025-07-12 15:48:23,936 INFO [indicator_service.py:267] [TSLA] Volume Ratio 20d m data saved: TSLA_volume_ratio_20d_m_20250712_154823.csv
2025-07-12 15:48:23,938 INFO [indicator_service.py:267] [TSLA] Volume Ratio 40d m data saved: TSLA_volume_ratio_40d_m_20250712_154823.csv
2025-07-12 15:48:23,938 INFO [indicator_service.py:539] [TSLA] All indicators calculated and saved successfully
2025-07-12 15:48:24,001 INFO [analysis_service.py:209] [TSLA] Fresh indicators calculated successfully
2025-07-12 15:48:24,001 INFO [analysis_service.py:210] [TSLA] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:48:24,655 INFO [analysis_service.py:790] [TSLA] Starting Gemini AI analysis...
2025-07-12 15:48:24,655 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 TSLA 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:48:24,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:24,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:18', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:24,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:27,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:27,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:21', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:27,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:30,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:30,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:24', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:30,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:33,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:33,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:27', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:33,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:36,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:36,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:30', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:36,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:39,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:39,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:33', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:39,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:42,886 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:42,887 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:36', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:42,888 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:45,904 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:45,905 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:39', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:45,906 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:48,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:48,889 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:42', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:48,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:51,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:51,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:45', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:51,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:54,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:54,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:48', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:54,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:48:57,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:48:57,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:51', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:48:57,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:48:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:00,887 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:49:00,888 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'progress_percentage': 20.0, 'elapsed_time': '0:03:54', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:00,889 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:02,414 INFO [analysis_service.py:928] [TSLA] Gemini API call completed in 37.76 seconds
2025-07-12 15:49:02,415 INFO [analysis_service.py:931] Gemini raw response text length: 6269
2025-07-12 15:49:02,416 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  테슬라(TSLA)는 월봉 및 주봉 차트에서 뚜렷한 장기 및 중기 하락 추세를 보이고 있으며, 주요 저항선 아래에 위치해 있어 매도 압력이 강합니다.
2.  일봉 차트에서는 최근 $288~$293 부근에서 단기적인 반등 시그널(EMA 골든 크로스, MACD 상승 전환)이 나타나 스윙 트레이더에게 매수 기회를 제공할 수 있습니다.
3.  다만, 전반적인 하락 추세 속에서의 반등이므로, $320~$330 및 $340~$350 구간을 목표로 짧게 접근하고, 손절매 기준을 명확히 설정하는 보수적인 스윙 전략이 권장됩니다.

---

### **TSLA 주가 기술적 분석 및 스윙 투자 타이밍 제안**

제공된 TSLA의 일봉, 주봉, 월봉 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 기술적 지표들을 계산하고 분석하여 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 제시합니다.

---

### **상세 분석**

#### **1. 일봉 차트 분석 ...
2025-07-12 15:49:02,416 INFO [analysis_service.py:792] [TSLA] Gemini AI analysis completed. Success: True
2025-07-12 15:49:02,417 INFO [analysis_service.py:797] [TSLA] Extracting summary from Gemini analysis...
2025-07-12 15:49:02,418 INFO [analysis_service.py:799] [TSLA] Summary extracted successfully
2025-07-12 15:49:02,418 INFO [analysis_service.py:802] [TSLA] Getting indicator data for analysis...
2025-07-12 15:49:02,644 INFO [analysis_service.py:806] [TSLA] Saving HTML analysis file...
2025-07-12 15:49:02,646 INFO [analysis_service.py:834] [TSLA] HTML analysis file saved successfully with app_context
2025-07-12 15:49:02,646 INFO [analysis_service.py:840] [TSLA] AI analysis process completed successfully
2025-07-12 15:49:02,690 INFO [batch_analysis_service.py:435] [TSLA] New analysis completed successfully
2025-07-12 15:49:02,691 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:49:02,691 INFO [progress_service.py:24] Input params: ticker=LLY, processed=8, total=35, list_name=03 Watch (8/21)
2025-07-12 15:49:02,691 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'TSLA', 'current_list': '03 Watch (7/21)', 'total_tickers': 35, 'processed_tickers': 7, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 749324), 'stop_requested': False}
2025-07-12 15:49:02,691 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'LLY', 'current_list': '03 Watch (8/21)', 'total_tickers': 35, 'processed_tickers': 8, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 19, 544892), 'stop_requested': False}
2025-07-12 15:49:02,692 INFO [batch_analysis_service.py:378] [LLY] Reusing existing files (within 1 hour)
2025-07-12 15:49:02,694 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:49:02,695 INFO [progress_service.py:24] Input params: ticker=JNJ, processed=9, total=35, list_name=03 Watch (9/21)
2025-07-12 15:49:02,695 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'LLY', 'current_list': '03 Watch (8/21)', 'total_tickers': 35, 'processed_tickers': 8, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 19, 544892), 'stop_requested': False}
2025-07-12 15:49:02,695 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:02,696 INFO [chart_service.py:116] [JNJ] Starting chart generation process...
2025-07-12 15:49:02,697 INFO [chart_service.py:123] [JNJ] Downloading data from yfinance...
2025-07-12 15:49:02,697 INFO [market_data_service.py:373] [JNJ] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:49:02,697 INFO [market_data_service.py:413] [JNJ] Trying Yahoo Finance first...
2025-07-12 15:49:02,698 INFO [market_data_service.py:324] [JNJ] Downloading chart data (attempt 1/2)...
2025-07-12 15:49:02,698 DEBUG [utils.py:96] Entering history()
2025-07-12 15:49:02,698 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['JNJ', 1, 0])
2025-07-12 15:49:02,700 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:49:02,701 DEBUG [history.py:165] JNJ: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:02,701 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:49:02,701 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:49:02,702 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/JNJ
2025-07-12 15:49:02,702 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:02,702 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:49:02,702 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:49:02,702 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:49:02,815 DEBUG [data.py:179] reusing crumb
2025-07-12 15:49:02,816 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:49:02,816 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:49:03,121 DEBUG [data.py:367] response code=200
2025-07-12 15:49:03,121 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:49:03,122 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:49:03,134 DEBUG [history.py:281] JNJ: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:49:03,138 DEBUG [history.py:318] JNJ: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:49:03,157 DEBUG [history.py:388] JNJ: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:03,162 DEBUG [history.py:467] JNJ: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:03,163 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:49:03,164 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:49:03,164 INFO [market_data_service.py:337] [JNJ] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:49:03,165 INFO [market_data_service.py:417] [JNJ] Yahoo Finance successful
2025-07-12 15:49:03,165 INFO [chart_service.py:125] [JNJ] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:49:03,167 INFO [chart_service.py:142] [JNJ] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:49:03,209 WARNING [chart_service.py:217] [JNJ] No saved MACD data found for d, calculating directly
2025-07-12 15:49:03,625 WARNING [chart_service.py:217] [JNJ] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:49:03,883 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:03,884 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:03:57', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:03,885 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:03] "GET /get_current_progress HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:49:04,020 WARNING [chart_service.py:217] [JNJ] No saved MACD data found for m, calculating directly
2025-07-12 15:49:04,344 INFO [chart_service.py:154] [JNJ] Starting integrated indicator calculation and storage...
2025-07-12 15:49:04,344 INFO [indicator_service.py:483] [JNJ] Starting comprehensive indicator calculation and storage...
2025-07-12 15:49:04,354 INFO [indicator_service.py:54] [JNJ] Daily OHLCV data saved: JNJ_ohlcv_d_20250712_154904.csv
2025-07-12 15:49:04,363 INFO [indicator_service.py:68] [JNJ] Weekly OHLCV data saved: JNJ_ohlcv_w_20250712_154904.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:04,369 INFO [indicator_service.py:82] [JNJ] Monthly OHLCV data saved: JNJ_ohlcv_m_20250712_154904.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:04,385 INFO [indicator_service.py:116] [JNJ] EMA5 d data saved: JNJ_ema5_d_20250712_154904.csv
2025-07-12 15:49:04,391 INFO [indicator_service.py:116] [JNJ] EMA20 d data saved: JNJ_ema20_d_20250712_154904.csv
2025-07-12 15:49:04,397 INFO [indicator_service.py:116] [JNJ] EMA40 d data saved: JNJ_ema40_d_20250712_154904.csv
2025-07-12 15:49:04,412 INFO [indicator_service.py:139] [JNJ] MACD d data saved: JNJ_macd_d_20250712_154904.csv
2025-07-12 15:49:04,425 INFO [indicator_service.py:162] [JNJ] Bollinger Bands d data saved: JNJ_bollinger_d_20250712_154904.csv
2025-07-12 15:49:04,441 INFO [indicator_service.py:186] [JNJ] Ichimoku d data saved: JNJ_ichimoku_d_20250712_154904.csv
2025-07-12 15:49:04,448 INFO [indicator_service.py:207] [JNJ] RSI d data saved: JNJ_rsi_d_20250712_154904.csv
2025-07-12 15:49:04,457 INFO [indicator_service.py:229] [JNJ] Stochastic d data saved: JNJ_stochastic_d_20250712_154904.csv
2025-07-12 15:49:04,464 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d d data saved: JNJ_volume_ratio_5d_d_20250712_154904.csv
2025-07-12 15:49:04,471 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d d data saved: JNJ_volume_ratio_20d_d_20250712_154904.csv
2025-07-12 15:49:04,476 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d d data saved: JNJ_volume_ratio_40d_d_20250712_154904.csv
2025-07-12 15:49:04,480 INFO [indicator_service.py:116] [JNJ] EMA5 w data saved: JNJ_ema5_w_20250712_154904.csv
2025-07-12 15:49:04,483 INFO [indicator_service.py:116] [JNJ] EMA20 w data saved: JNJ_ema20_w_20250712_154904.csv
2025-07-12 15:49:04,486 INFO [indicator_service.py:116] [JNJ] EMA40 w data saved: JNJ_ema40_w_20250712_154904.csv
2025-07-12 15:49:04,491 INFO [indicator_service.py:139] [JNJ] MACD w data saved: JNJ_macd_w_20250712_154904.csv
2025-07-12 15:49:04,497 INFO [indicator_service.py:162] [JNJ] Bollinger Bands w data saved: JNJ_bollinger_w_20250712_154904.csv
2025-07-12 15:49:04,505 INFO [indicator_service.py:186] [JNJ] Ichimoku w data saved: JNJ_ichimoku_w_20250712_154904.csv
2025-07-12 15:49:04,510 INFO [indicator_service.py:207] [JNJ] RSI w data saved: JNJ_rsi_w_20250712_154904.csv
2025-07-12 15:49:04,515 INFO [indicator_service.py:229] [JNJ] Stochastic w data saved: JNJ_stochastic_w_20250712_154904.csv
2025-07-12 15:49:04,521 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d w data saved: JNJ_volume_ratio_5d_w_20250712_154904.csv
2025-07-12 15:49:04,523 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d w data saved: JNJ_volume_ratio_20d_w_20250712_154904.csv
2025-07-12 15:49:04,527 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d w data saved: JNJ_volume_ratio_40d_w_20250712_154904.csv
2025-07-12 15:49:04,530 INFO [indicator_service.py:116] [JNJ] EMA5 m data saved: JNJ_ema5_m_20250712_154904.csv
2025-07-12 15:49:04,533 INFO [indicator_service.py:116] [JNJ] EMA20 m data saved: JNJ_ema20_m_20250712_154904.csv
2025-07-12 15:49:04,535 INFO [indicator_service.py:116] [JNJ] EMA40 m data saved: JNJ_ema40_m_20250712_154904.csv
2025-07-12 15:49:04,539 INFO [indicator_service.py:139] [JNJ] MACD m data saved: JNJ_macd_m_20250712_154904.csv
2025-07-12 15:49:04,543 INFO [indicator_service.py:162] [JNJ] Bollinger Bands m data saved: JNJ_bollinger_m_20250712_154904.csv
2025-07-12 15:49:04,550 INFO [indicator_service.py:186] [JNJ] Ichimoku m data saved: JNJ_ichimoku_m_20250712_154904.csv
2025-07-12 15:49:04,554 INFO [indicator_service.py:207] [JNJ] RSI m data saved: JNJ_rsi_m_20250712_154904.csv
2025-07-12 15:49:04,558 INFO [indicator_service.py:229] [JNJ] Stochastic m data saved: JNJ_stochastic_m_20250712_154904.csv
2025-07-12 15:49:04,562 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d m data saved: JNJ_volume_ratio_5d_m_20250712_154904.csv
2025-07-12 15:49:04,564 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d m data saved: JNJ_volume_ratio_20d_m_20250712_154904.csv
2025-07-12 15:49:04,568 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d m data saved: JNJ_volume_ratio_40d_m_20250712_154904.csv
2025-07-12 15:49:04,568 INFO [indicator_service.py:539] [JNJ] All indicators calculated and saved successfully
2025-07-12 15:49:04,569 INFO [chart_service.py:158] [JNJ] Indicator calculation and storage completed successfully
2025-07-12 15:49:04,569 INFO [chart_service.py:165] [JNJ] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:49:04,572 INFO [analysis_service.py:348] [JNJ] Starting AI analysis process...
2025-07-12 15:49:04,572 INFO [analysis_service.py:356] [JNJ] Looking for chart files...
2025-07-12 15:49:04,577 INFO [analysis_service.py:413] [JNJ] Found Daily chart: JNJ_daily_20250712.png
2025-07-12 15:49:04,577 INFO [analysis_service.py:413] [JNJ] Found Weekly chart: JNJ_weekly_20250712.png
2025-07-12 15:49:04,577 INFO [analysis_service.py:413] [JNJ] Found Monthly chart: JNJ_monthly_20250712.png
2025-07-12 15:49:04,577 INFO [analysis_service.py:415] [JNJ] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:49:04,578 INFO [analysis_service.py:432] [JNJ] Chart image transmission disabled - using text-only analysis
2025-07-12 15:49:04,578 INFO [analysis_service.py:439] [JNJ] Determining data processing strategy based on market hours...
2025-07-12 15:49:04,578 INFO [analysis_service.py:463] [JNJ] US stock - Current EST: 15:49:04, Market hours: True
2025-07-12 15:49:04,578 INFO [analysis_service.py:470] [JNJ] Market hours detected - will download fresh data
2025-07-12 15:49:04,578 INFO [analysis_service.py:479] [JNJ] Downloading fresh data and calculating new indicators...
2025-07-12 15:49:04,578 INFO [analysis_service.py:155] [JNJ] Starting fresh data download and analysis...
2025-07-12 15:49:04,579 INFO [analysis_service.py:163] [JNJ] Downloading fresh stock data...
2025-07-12 15:49:04,579 INFO [market_data_service.py:373] [JNJ] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:49:04,579 INFO [market_data_service.py:413] [JNJ] Trying Yahoo Finance first...
2025-07-12 15:49:04,579 INFO [market_data_service.py:324] [JNJ] Downloading chart data (attempt 1/2)...
2025-07-12 15:49:04,580 DEBUG [utils.py:96] Entering history()
2025-07-12 15:49:04,580 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['JNJ', 1, 0])
2025-07-12 15:49:04,582 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:49:04,582 DEBUG [history.py:165] JNJ: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:04,582 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:49:04,583 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:49:04,583 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/JNJ
2025-07-12 15:49:04,583 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:04,584 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:49:04,584 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:49:04,584 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:49:04,664 DEBUG [data.py:179] reusing crumb
2025-07-12 15:49:04,664 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:49:04,665 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:49:04,999 DEBUG [data.py:367] response code=200
2025-07-12 15:49:05,000 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:49:05,000 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:49:05,009 DEBUG [history.py:281] JNJ: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:49:05,011 DEBUG [history.py:318] JNJ: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:49:05,023 DEBUG [history.py:388] JNJ: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:05,025 DEBUG [history.py:467] JNJ: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:05,026 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:49:05,026 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:49:05,026 INFO [market_data_service.py:337] [JNJ] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:49:05,026 INFO [market_data_service.py:417] [JNJ] Yahoo Finance successful
2025-07-12 15:49:05,028 INFO [analysis_service.py:178] [JNJ] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:49:05,028 INFO [analysis_service.py:181] [JNJ] Calculating and saving new indicators...
2025-07-12 15:49:05,028 INFO [indicator_service.py:483] [JNJ] Starting comprehensive indicator calculation and storage...
2025-07-12 15:49:05,042 INFO [indicator_service.py:54] [JNJ] Daily OHLCV data saved: JNJ_ohlcv_d_20250712_154905.csv
2025-07-12 15:49:05,053 INFO [indicator_service.py:68] [JNJ] Weekly OHLCV data saved: JNJ_ohlcv_w_20250712_154905.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:05,059 INFO [indicator_service.py:82] [JNJ] Monthly OHLCV data saved: JNJ_ohlcv_m_20250712_154905.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:05,075 INFO [indicator_service.py:116] [JNJ] EMA5 d data saved: JNJ_ema5_d_20250712_154905.csv
2025-07-12 15:49:05,082 INFO [indicator_service.py:116] [JNJ] EMA20 d data saved: JNJ_ema20_d_20250712_154905.csv
2025-07-12 15:49:05,089 INFO [indicator_service.py:116] [JNJ] EMA40 d data saved: JNJ_ema40_d_20250712_154905.csv
2025-07-12 15:49:05,099 INFO [indicator_service.py:139] [JNJ] MACD d data saved: JNJ_macd_d_20250712_154905.csv
2025-07-12 15:49:05,111 INFO [indicator_service.py:162] [JNJ] Bollinger Bands d data saved: JNJ_bollinger_d_20250712_154905.csv
2025-07-12 15:49:05,126 INFO [indicator_service.py:186] [JNJ] Ichimoku d data saved: JNJ_ichimoku_d_20250712_154905.csv
2025-07-12 15:49:05,133 INFO [indicator_service.py:207] [JNJ] RSI d data saved: JNJ_rsi_d_20250712_154905.csv
2025-07-12 15:49:05,143 INFO [indicator_service.py:229] [JNJ] Stochastic d data saved: JNJ_stochastic_d_20250712_154905.csv
2025-07-12 15:49:05,151 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d d data saved: JNJ_volume_ratio_5d_d_20250712_154905.csv
2025-07-12 15:49:05,160 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d d data saved: JNJ_volume_ratio_20d_d_20250712_154905.csv
2025-07-12 15:49:05,169 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d d data saved: JNJ_volume_ratio_40d_d_20250712_154905.csv
2025-07-12 15:49:05,173 INFO [indicator_service.py:116] [JNJ] EMA5 w data saved: JNJ_ema5_w_20250712_154905.csv
2025-07-12 15:49:05,177 INFO [indicator_service.py:116] [JNJ] EMA20 w data saved: JNJ_ema20_w_20250712_154905.csv
2025-07-12 15:49:05,180 INFO [indicator_service.py:116] [JNJ] EMA40 w data saved: JNJ_ema40_w_20250712_154905.csv
2025-07-12 15:49:05,187 INFO [indicator_service.py:139] [JNJ] MACD w data saved: JNJ_macd_w_20250712_154905.csv
2025-07-12 15:49:05,192 INFO [indicator_service.py:162] [JNJ] Bollinger Bands w data saved: JNJ_bollinger_w_20250712_154905.csv
2025-07-12 15:49:05,200 INFO [indicator_service.py:186] [JNJ] Ichimoku w data saved: JNJ_ichimoku_w_20250712_154905.csv
2025-07-12 15:49:05,206 INFO [indicator_service.py:207] [JNJ] RSI w data saved: JNJ_rsi_w_20250712_154905.csv
2025-07-12 15:49:05,210 INFO [indicator_service.py:229] [JNJ] Stochastic w data saved: JNJ_stochastic_w_20250712_154905.csv
2025-07-12 15:49:05,216 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d w data saved: JNJ_volume_ratio_5d_w_20250712_154905.csv
2025-07-12 15:49:05,220 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d w data saved: JNJ_volume_ratio_20d_w_20250712_154905.csv
2025-07-12 15:49:05,225 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d w data saved: JNJ_volume_ratio_40d_w_20250712_154905.csv
2025-07-12 15:49:05,228 INFO [indicator_service.py:116] [JNJ] EMA5 m data saved: JNJ_ema5_m_20250712_154905.csv
2025-07-12 15:49:05,230 INFO [indicator_service.py:116] [JNJ] EMA20 m data saved: JNJ_ema20_m_20250712_154905.csv
2025-07-12 15:49:05,234 INFO [indicator_service.py:116] [JNJ] EMA40 m data saved: JNJ_ema40_m_20250712_154905.csv
2025-07-12 15:49:05,239 INFO [indicator_service.py:139] [JNJ] MACD m data saved: JNJ_macd_m_20250712_154905.csv
2025-07-12 15:49:05,243 INFO [indicator_service.py:162] [JNJ] Bollinger Bands m data saved: JNJ_bollinger_m_20250712_154905.csv
2025-07-12 15:49:05,249 INFO [indicator_service.py:186] [JNJ] Ichimoku m data saved: JNJ_ichimoku_m_20250712_154905.csv
2025-07-12 15:49:05,253 INFO [indicator_service.py:207] [JNJ] RSI m data saved: JNJ_rsi_m_20250712_154905.csv
2025-07-12 15:49:05,257 INFO [indicator_service.py:229] [JNJ] Stochastic m data saved: JNJ_stochastic_m_20250712_154905.csv
2025-07-12 15:49:05,262 INFO [indicator_service.py:267] [JNJ] Volume Ratio 5d m data saved: JNJ_volume_ratio_5d_m_20250712_154905.csv
2025-07-12 15:49:05,264 INFO [indicator_service.py:267] [JNJ] Volume Ratio 20d m data saved: JNJ_volume_ratio_20d_m_20250712_154905.csv
2025-07-12 15:49:05,267 INFO [indicator_service.py:267] [JNJ] Volume Ratio 40d m data saved: JNJ_volume_ratio_40d_m_20250712_154905.csv
2025-07-12 15:49:05,267 INFO [indicator_service.py:539] [JNJ] All indicators calculated and saved successfully
2025-07-12 15:49:05,339 INFO [analysis_service.py:209] [JNJ] Fresh indicators calculated successfully
2025-07-12 15:49:05,340 INFO [analysis_service.py:210] [JNJ] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:49:05,974 INFO [analysis_service.py:790] [JNJ] Starting Gemini AI analysis...
2025-07-12 15:49:05,975 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 JNJ 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:49:06,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:06,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:00', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:06,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:09,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:09,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:03', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:09,896 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:12,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:12,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:06', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:12,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:15,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:15,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:09', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:15,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:18,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:18,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:12', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:18,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:21,914 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:21,915 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:15', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:21,916 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:24,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:24,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:18', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:24,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:27,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:27,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:21', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:27,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:30,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:30,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:24', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:30,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:33,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:33,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:27', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:33,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:36,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:36,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:30', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:36,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:39,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:39,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:33', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:39,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:42,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:42,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'progress_percentage': 25.7, 'elapsed_time': '0:04:36', 'estimated_completion': '16:00:24', 'stop_requested': False}
2025-07-12 15:49:42,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:44,932 INFO [analysis_service.py:928] [JNJ] Gemini API call completed in 38.96 seconds
2025-07-12 15:49:44,934 INFO [analysis_service.py:931] Gemini raw response text length: 6540
2025-07-12 15:49:44,934 DEBUG [analysis_service.py:932] Gemini analysis raw response: JNJ (Johnson & Johnson) 주식에 대한 OHLCV 데이터를 기반으로 기술적 지표들을 분석하고, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 제시합니다.

---

**핵심 요약**
1.  JNJ는 최근 일봉상 6월 중순 저점(149.04) 이후 강력한 반등을 보이며 단기 상승 추세에 진입했으나, 158달러 부근의 단기 저항대에서 숨 고르기를 하는 모습입니다.
2.  스윙 투자자는 현재 가격대에서 무리한 추격 매수보다는 152~154달러 범위 내의 조정 시 매수를 고려하고, MACD, EMA 등 지표의 재상승 전환 및 지지 확인 후 진입하는 것이 유리합니다.
3.  매도 타이밍은 158~162달러의 중기 저항선 도달 시 또는 MACD 과열 신호 발생 시 분할 매도를 고려하며, 149달러 아래로 이탈 시 손절매 관점을 유지해야 합니다.

---

**상세 분석**

**1. 일봉 차트 분석 (최근 30일)**

*   **가격 동향:** 2025년 5월 말 153달...
2025-07-12 15:49:44,935 INFO [analysis_service.py:792] [JNJ] Gemini AI analysis completed. Success: True
2025-07-12 15:49:44,936 INFO [analysis_service.py:797] [JNJ] Extracting summary from Gemini analysis...
2025-07-12 15:49:44,937 INFO [analysis_service.py:799] [JNJ] Summary extracted successfully
2025-07-12 15:49:44,938 INFO [analysis_service.py:802] [JNJ] Getting indicator data for analysis...
2025-07-12 15:49:45,151 INFO [analysis_service.py:806] [JNJ] Saving HTML analysis file...
2025-07-12 15:49:45,152 INFO [analysis_service.py:834] [JNJ] HTML analysis file saved successfully with app_context
2025-07-12 15:49:45,153 INFO [analysis_service.py:840] [JNJ] AI analysis process completed successfully
2025-07-12 15:49:45,186 INFO [batch_analysis_service.py:435] [JNJ] New analysis completed successfully
2025-07-12 15:49:45,186 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:49:45,187 INFO [progress_service.py:24] Input params: ticker=PFE, processed=10, total=35, list_name=03 Watch (10/21)
2025-07-12 15:49:45,187 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'JNJ', 'current_list': '03 Watch (9/21)', 'total_tickers': 35, 'processed_tickers': 9, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 24, 786953), 'stop_requested': False}
2025-07-12 15:49:45,187 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:45,188 INFO [chart_service.py:116] [PFE] Starting chart generation process...
2025-07-12 15:49:45,189 INFO [chart_service.py:123] [PFE] Downloading data from yfinance...
2025-07-12 15:49:45,189 INFO [market_data_service.py:373] [PFE] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:49:45,190 INFO [market_data_service.py:413] [PFE] Trying Yahoo Finance first...
2025-07-12 15:49:45,190 INFO [market_data_service.py:324] [PFE] Downloading chart data (attempt 1/2)...
2025-07-12 15:49:45,190 DEBUG [utils.py:96] Entering history()
2025-07-12 15:49:45,191 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['PFE', 1, 0])
2025-07-12 15:49:45,191 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:49:45,192 DEBUG [history.py:165] PFE: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:45,192 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:49:45,192 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:49:45,193 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/PFE
2025-07-12 15:49:45,193 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:45,193 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:49:45,193 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:49:45,193 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:49:45,323 DEBUG [data.py:179] reusing crumb
2025-07-12 15:49:45,324 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:49:45,324 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:49:45,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:45,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:39', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:45,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:45,906 DEBUG [data.py:367] response code=200
2025-07-12 15:49:45,907 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:49:45,907 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:49:45,921 DEBUG [history.py:281] PFE: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:49:45,924 DEBUG [history.py:318] PFE: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:49:45,952 DEBUG [history.py:388] PFE: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:45,954 DEBUG [history.py:467] PFE: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:45,955 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:49:45,955 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:49:45,955 INFO [market_data_service.py:337] [PFE] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:49:45,955 INFO [market_data_service.py:417] [PFE] Yahoo Finance successful
2025-07-12 15:49:45,956 INFO [chart_service.py:125] [PFE] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:49:45,956 INFO [chart_service.py:142] [PFE] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:49:46,000 WARNING [chart_service.py:217] [PFE] No saved MACD data found for d, calculating directly
2025-07-12 15:49:46,570 WARNING [chart_service.py:217] [PFE] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:49:46,978 WARNING [chart_service.py:217] [PFE] No saved MACD data found for m, calculating directly
2025-07-12 15:49:47,276 INFO [chart_service.py:154] [PFE] Starting integrated indicator calculation and storage...
2025-07-12 15:49:47,277 INFO [indicator_service.py:483] [PFE] Starting comprehensive indicator calculation and storage...
2025-07-12 15:49:47,287 INFO [indicator_service.py:54] [PFE] Daily OHLCV data saved: PFE_ohlcv_d_20250712_154947.csv
2025-07-12 15:49:47,296 INFO [indicator_service.py:68] [PFE] Weekly OHLCV data saved: PFE_ohlcv_w_20250712_154947.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:47,302 INFO [indicator_service.py:82] [PFE] Monthly OHLCV data saved: PFE_ohlcv_m_20250712_154947.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:47,321 INFO [indicator_service.py:116] [PFE] EMA5 d data saved: PFE_ema5_d_20250712_154947.csv
2025-07-12 15:49:47,330 INFO [indicator_service.py:116] [PFE] EMA20 d data saved: PFE_ema20_d_20250712_154947.csv
2025-07-12 15:49:47,338 INFO [indicator_service.py:116] [PFE] EMA40 d data saved: PFE_ema40_d_20250712_154947.csv
2025-07-12 15:49:47,355 INFO [indicator_service.py:139] [PFE] MACD d data saved: PFE_macd_d_20250712_154947.csv
2025-07-12 15:49:47,367 INFO [indicator_service.py:162] [PFE] Bollinger Bands d data saved: PFE_bollinger_d_20250712_154947.csv
2025-07-12 15:49:47,382 INFO [indicator_service.py:186] [PFE] Ichimoku d data saved: PFE_ichimoku_d_20250712_154947.csv
2025-07-12 15:49:47,389 INFO [indicator_service.py:207] [PFE] RSI d data saved: PFE_rsi_d_20250712_154947.csv
2025-07-12 15:49:47,400 INFO [indicator_service.py:229] [PFE] Stochastic d data saved: PFE_stochastic_d_20250712_154947.csv
2025-07-12 15:49:47,408 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d d data saved: PFE_volume_ratio_5d_d_20250712_154947.csv
2025-07-12 15:49:47,413 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d d data saved: PFE_volume_ratio_20d_d_20250712_154947.csv
2025-07-12 15:49:47,419 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d d data saved: PFE_volume_ratio_40d_d_20250712_154947.csv
2025-07-12 15:49:47,424 INFO [indicator_service.py:116] [PFE] EMA5 w data saved: PFE_ema5_w_20250712_154947.csv
2025-07-12 15:49:47,426 INFO [indicator_service.py:116] [PFE] EMA20 w data saved: PFE_ema20_w_20250712_154947.csv
2025-07-12 15:49:47,429 INFO [indicator_service.py:116] [PFE] EMA40 w data saved: PFE_ema40_w_20250712_154947.csv
2025-07-12 15:49:47,435 INFO [indicator_service.py:139] [PFE] MACD w data saved: PFE_macd_w_20250712_154947.csv
2025-07-12 15:49:47,441 INFO [indicator_service.py:162] [PFE] Bollinger Bands w data saved: PFE_bollinger_w_20250712_154947.csv
2025-07-12 15:49:47,448 INFO [indicator_service.py:186] [PFE] Ichimoku w data saved: PFE_ichimoku_w_20250712_154947.csv
2025-07-12 15:49:47,453 INFO [indicator_service.py:207] [PFE] RSI w data saved: PFE_rsi_w_20250712_154947.csv
2025-07-12 15:49:47,458 INFO [indicator_service.py:229] [PFE] Stochastic w data saved: PFE_stochastic_w_20250712_154947.csv
2025-07-12 15:49:47,463 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d w data saved: PFE_volume_ratio_5d_w_20250712_154947.csv
2025-07-12 15:49:47,466 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d w data saved: PFE_volume_ratio_20d_w_20250712_154947.csv
2025-07-12 15:49:47,469 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d w data saved: PFE_volume_ratio_40d_w_20250712_154947.csv
2025-07-12 15:49:47,473 INFO [indicator_service.py:116] [PFE] EMA5 m data saved: PFE_ema5_m_20250712_154947.csv
2025-07-12 15:49:47,475 INFO [indicator_service.py:116] [PFE] EMA20 m data saved: PFE_ema20_m_20250712_154947.csv
2025-07-12 15:49:47,477 INFO [indicator_service.py:116] [PFE] EMA40 m data saved: PFE_ema40_m_20250712_154947.csv
2025-07-12 15:49:47,481 INFO [indicator_service.py:139] [PFE] MACD m data saved: PFE_macd_m_20250712_154947.csv
2025-07-12 15:49:47,486 INFO [indicator_service.py:162] [PFE] Bollinger Bands m data saved: PFE_bollinger_m_20250712_154947.csv
2025-07-12 15:49:47,492 INFO [indicator_service.py:186] [PFE] Ichimoku m data saved: PFE_ichimoku_m_20250712_154947.csv
2025-07-12 15:49:47,495 INFO [indicator_service.py:207] [PFE] RSI m data saved: PFE_rsi_m_20250712_154947.csv
2025-07-12 15:49:47,499 INFO [indicator_service.py:229] [PFE] Stochastic m data saved: PFE_stochastic_m_20250712_154947.csv
2025-07-12 15:49:47,503 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d m data saved: PFE_volume_ratio_5d_m_20250712_154947.csv
2025-07-12 15:49:47,505 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d m data saved: PFE_volume_ratio_20d_m_20250712_154947.csv
2025-07-12 15:49:47,508 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d m data saved: PFE_volume_ratio_40d_m_20250712_154947.csv
2025-07-12 15:49:47,508 INFO [indicator_service.py:539] [PFE] All indicators calculated and saved successfully
2025-07-12 15:49:47,508 INFO [chart_service.py:158] [PFE] Indicator calculation and storage completed successfully
2025-07-12 15:49:47,508 INFO [chart_service.py:165] [PFE] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:49:47,510 INFO [analysis_service.py:348] [PFE] Starting AI analysis process...
2025-07-12 15:49:47,510 INFO [analysis_service.py:356] [PFE] Looking for chart files...
2025-07-12 15:49:47,514 INFO [analysis_service.py:413] [PFE] Found Daily chart: PFE_daily_20250712.png
2025-07-12 15:49:47,514 INFO [analysis_service.py:413] [PFE] Found Weekly chart: PFE_weekly_20250712.png
2025-07-12 15:49:47,514 INFO [analysis_service.py:413] [PFE] Found Monthly chart: PFE_monthly_20250712.png
2025-07-12 15:49:47,515 INFO [analysis_service.py:415] [PFE] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:49:47,515 INFO [analysis_service.py:432] [PFE] Chart image transmission disabled - using text-only analysis
2025-07-12 15:49:47,515 INFO [analysis_service.py:439] [PFE] Determining data processing strategy based on market hours...
2025-07-12 15:49:47,515 INFO [analysis_service.py:463] [PFE] US stock - Current EST: 15:49:47, Market hours: True
2025-07-12 15:49:47,515 INFO [analysis_service.py:470] [PFE] Market hours detected - will download fresh data
2025-07-12 15:49:47,516 INFO [analysis_service.py:479] [PFE] Downloading fresh data and calculating new indicators...
2025-07-12 15:49:47,516 INFO [analysis_service.py:155] [PFE] Starting fresh data download and analysis...
2025-07-12 15:49:47,516 INFO [analysis_service.py:163] [PFE] Downloading fresh stock data...
2025-07-12 15:49:47,516 INFO [market_data_service.py:373] [PFE] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:49:47,516 INFO [market_data_service.py:413] [PFE] Trying Yahoo Finance first...
2025-07-12 15:49:47,517 INFO [market_data_service.py:324] [PFE] Downloading chart data (attempt 1/2)...
2025-07-12 15:49:47,517 DEBUG [utils.py:96] Entering history()
2025-07-12 15:49:47,518 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['PFE', 1, 0])
2025-07-12 15:49:47,519 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:49:47,519 DEBUG [history.py:165] PFE: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:47,519 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:49:47,520 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:49:47,520 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/PFE
2025-07-12 15:49:47,520 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:49:47,520 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:49:47,520 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:49:47,520 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:49:47,594 DEBUG [data.py:179] reusing crumb
2025-07-12 15:49:47,596 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:49:47,598 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:49:47,851 DEBUG [data.py:367] response code=200
2025-07-12 15:49:47,852 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:49:47,852 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:49:47,857 DEBUG [history.py:281] PFE: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:49:47,859 DEBUG [history.py:318] PFE: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:49:47,877 DEBUG [history.py:388] PFE: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:47,879 DEBUG [history.py:467] PFE: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:49:47,880 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:49:47,880 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:49:47,880 INFO [market_data_service.py:337] [PFE] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:49:47,881 INFO [market_data_service.py:417] [PFE] Yahoo Finance successful
2025-07-12 15:49:47,882 INFO [analysis_service.py:178] [PFE] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:49:47,883 INFO [analysis_service.py:181] [PFE] Calculating and saving new indicators...
2025-07-12 15:49:47,883 INFO [indicator_service.py:483] [PFE] Starting comprehensive indicator calculation and storage...
2025-07-12 15:49:47,899 INFO [indicator_service.py:54] [PFE] Daily OHLCV data saved: PFE_ohlcv_d_20250712_154947.csv
2025-07-12 15:49:47,911 INFO [indicator_service.py:68] [PFE] Weekly OHLCV data saved: PFE_ohlcv_w_20250712_154947.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:47,918 INFO [indicator_service.py:82] [PFE] Monthly OHLCV data saved: PFE_ohlcv_m_20250712_154947.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:49:47,956 INFO [indicator_service.py:116] [PFE] EMA5 d data saved: PFE_ema5_d_20250712_154947.csv
2025-07-12 15:49:47,963 INFO [indicator_service.py:116] [PFE] EMA20 d data saved: PFE_ema20_d_20250712_154947.csv
2025-07-12 15:49:47,971 INFO [indicator_service.py:116] [PFE] EMA40 d data saved: PFE_ema40_d_20250712_154947.csv
2025-07-12 15:49:47,984 INFO [indicator_service.py:139] [PFE] MACD d data saved: PFE_macd_d_20250712_154947.csv
2025-07-12 15:49:47,997 INFO [indicator_service.py:162] [PFE] Bollinger Bands d data saved: PFE_bollinger_d_20250712_154947.csv
2025-07-12 15:49:48,011 INFO [indicator_service.py:186] [PFE] Ichimoku d data saved: PFE_ichimoku_d_20250712_154947.csv
2025-07-12 15:49:48,022 INFO [indicator_service.py:207] [PFE] RSI d data saved: PFE_rsi_d_20250712_154947.csv
2025-07-12 15:49:48,034 INFO [indicator_service.py:229] [PFE] Stochastic d data saved: PFE_stochastic_d_20250712_154947.csv
2025-07-12 15:49:48,042 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d d data saved: PFE_volume_ratio_5d_d_20250712_154947.csv
2025-07-12 15:49:48,047 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d d data saved: PFE_volume_ratio_20d_d_20250712_154947.csv
2025-07-12 15:49:48,053 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d d data saved: PFE_volume_ratio_40d_d_20250712_154947.csv
2025-07-12 15:49:48,057 INFO [indicator_service.py:116] [PFE] EMA5 w data saved: PFE_ema5_w_20250712_154947.csv
2025-07-12 15:49:48,059 INFO [indicator_service.py:116] [PFE] EMA20 w data saved: PFE_ema20_w_20250712_154947.csv
2025-07-12 15:49:48,061 INFO [indicator_service.py:116] [PFE] EMA40 w data saved: PFE_ema40_w_20250712_154947.csv
2025-07-12 15:49:48,067 INFO [indicator_service.py:139] [PFE] MACD w data saved: PFE_macd_w_20250712_154947.csv
2025-07-12 15:49:48,072 INFO [indicator_service.py:162] [PFE] Bollinger Bands w data saved: PFE_bollinger_w_20250712_154947.csv
2025-07-12 15:49:48,078 INFO [indicator_service.py:186] [PFE] Ichimoku w data saved: PFE_ichimoku_w_20250712_154947.csv
2025-07-12 15:49:48,082 INFO [indicator_service.py:207] [PFE] RSI w data saved: PFE_rsi_w_20250712_154947.csv
2025-07-12 15:49:48,087 INFO [indicator_service.py:229] [PFE] Stochastic w data saved: PFE_stochastic_w_20250712_154947.csv
2025-07-12 15:49:48,091 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d w data saved: PFE_volume_ratio_5d_w_20250712_154947.csv
2025-07-12 15:49:48,094 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d w data saved: PFE_volume_ratio_20d_w_20250712_154947.csv
2025-07-12 15:49:48,096 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d w data saved: PFE_volume_ratio_40d_w_20250712_154947.csv
2025-07-12 15:49:48,099 INFO [indicator_service.py:116] [PFE] EMA5 m data saved: PFE_ema5_m_20250712_154947.csv
2025-07-12 15:49:48,101 INFO [indicator_service.py:116] [PFE] EMA20 m data saved: PFE_ema20_m_20250712_154947.csv
2025-07-12 15:49:48,102 INFO [indicator_service.py:116] [PFE] EMA40 m data saved: PFE_ema40_m_20250712_154947.csv
2025-07-12 15:49:48,106 INFO [indicator_service.py:139] [PFE] MACD m data saved: PFE_macd_m_20250712_154947.csv
2025-07-12 15:49:48,109 INFO [indicator_service.py:162] [PFE] Bollinger Bands m data saved: PFE_bollinger_m_20250712_154947.csv
2025-07-12 15:49:48,115 INFO [indicator_service.py:186] [PFE] Ichimoku m data saved: PFE_ichimoku_m_20250712_154947.csv
2025-07-12 15:49:48,118 INFO [indicator_service.py:207] [PFE] RSI m data saved: PFE_rsi_m_20250712_154947.csv
2025-07-12 15:49:48,121 INFO [indicator_service.py:229] [PFE] Stochastic m data saved: PFE_stochastic_m_20250712_154947.csv
2025-07-12 15:49:48,126 INFO [indicator_service.py:267] [PFE] Volume Ratio 5d m data saved: PFE_volume_ratio_5d_m_20250712_154947.csv
2025-07-12 15:49:48,127 INFO [indicator_service.py:267] [PFE] Volume Ratio 20d m data saved: PFE_volume_ratio_20d_m_20250712_154947.csv
2025-07-12 15:49:48,128 INFO [indicator_service.py:267] [PFE] Volume Ratio 40d m data saved: PFE_volume_ratio_40d_m_20250712_154947.csv
2025-07-12 15:49:48,129 INFO [indicator_service.py:539] [PFE] All indicators calculated and saved successfully
2025-07-12 15:49:48,194 INFO [analysis_service.py:209] [PFE] Fresh indicators calculated successfully
2025-07-12 15:49:48,194 INFO [analysis_service.py:210] [PFE] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:49:48,899 INFO [analysis_service.py:790] [PFE] Starting Gemini AI analysis...
2025-07-12 15:49:48,899 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 PFE 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:49:48,907 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:48,907 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:42', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:48,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:51,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:51,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:45', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:51,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:54,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:54,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:48', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:54,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:49:57,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:49:57,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:51', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:49:57,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:49:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:00,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:00,889 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:54', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:00,890 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:03,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:03,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:04:57', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:03,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:06,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:06,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:05:00', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:06,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:09,907 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:09,907 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:05:03', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:09,908 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:12,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:12,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:05:06', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:12,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:16,869 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:16,870 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:05:10', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:16,871 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:16] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:19,862 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:19,863 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'progress_percentage': 28.6, 'elapsed_time': '0:05:13', 'estimated_completion': '16:01:21', 'stop_requested': False}
2025-07-12 15:50:19,864 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:19] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:20,614 INFO [analysis_service.py:928] [PFE] Gemini API call completed in 31.71 seconds
2025-07-12 15:50:20,615 INFO [analysis_service.py:931] Gemini raw response text length: 4432
2025-07-12 15:50:20,616 DEBUG [analysis_service.py:932] Gemini analysis raw response: PFE 종목에 대한 기술적 지표 분석 및 스윙 투자자의 매수/매도 타이밍 의견입니다.

---

**핵심 요약**
1.  PFE는 일봉과 주봉에서 강력한 상승 모멘텀을 보이며 장기 하락 추세에서 단기적 반전 조짐을 나타내고 있습니다.
2.  EMA 정배열, MACD 골든크로스 및 일목균형표의 구름대 돌파 등 대부분의 기술 지표들이 매수 신호를 지지하고 있습니다.
3.  스윙 투자자는 단기 조정 시 매수 기회를 노리되, 월봉상 여전히 장기 하락 추세에 있음을 인지하고 목표가를 주봉 저항선 부근으로 설정하여 위험 관리에 유의해야 합니다.

---

**상세 분석**

**1. 일봉 (Daily Chart) 분석 (최근 30일)**

*   **가격 움직임:** 5월 말 $23 초반대에서 횡보하던 주가는 6월 중순부터 점진적인 상승세를 보이다가 7월 초에 $25를 돌파하는 강한 상승을 기록했습니다. 현재는 $25.50~$25.70 부근에서 소폭의 조정을 보이며 안정화되는 모습입니다.
* ...
2025-07-12 15:50:20,616 INFO [analysis_service.py:792] [PFE] Gemini AI analysis completed. Success: True
2025-07-12 15:50:20,617 INFO [analysis_service.py:797] [PFE] Extracting summary from Gemini analysis...
2025-07-12 15:50:20,618 INFO [analysis_service.py:799] [PFE] Summary extracted successfully
2025-07-12 15:50:20,618 INFO [analysis_service.py:802] [PFE] Getting indicator data for analysis...
2025-07-12 15:50:20,838 INFO [analysis_service.py:806] [PFE] Saving HTML analysis file...
2025-07-12 15:50:20,840 INFO [analysis_service.py:834] [PFE] HTML analysis file saved successfully with app_context
2025-07-12 15:50:20,840 INFO [analysis_service.py:840] [PFE] AI analysis process completed successfully
2025-07-12 15:50:20,873 INFO [batch_analysis_service.py:435] [PFE] New analysis completed successfully
2025-07-12 15:50:20,873 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:50:20,873 INFO [progress_service.py:24] Input params: ticker=NVAX, processed=11, total=35, list_name=03 Watch (11/21)
2025-07-12 15:50:20,873 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'PFE', 'current_list': '03 Watch (10/21)', 'total_tickers': 35, 'processed_tickers': 10, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 21, 689095), 'stop_requested': False}
2025-07-12 15:50:20,874 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:20,874 INFO [chart_service.py:116] [NVAX] Starting chart generation process...
2025-07-12 15:50:20,875 INFO [chart_service.py:123] [NVAX] Downloading data from yfinance...
2025-07-12 15:50:20,875 INFO [market_data_service.py:373] [NVAX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:50:20,875 INFO [market_data_service.py:413] [NVAX] Trying Yahoo Finance first...
2025-07-12 15:50:20,876 INFO [market_data_service.py:324] [NVAX] Downloading chart data (attempt 1/2)...
2025-07-12 15:50:20,876 DEBUG [utils.py:96] Entering history()
2025-07-12 15:50:20,876 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NVAX', 1, 0])
2025-07-12 15:50:20,877 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:50:20,878 DEBUG [history.py:165] NVAX: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:50:20,878 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:50:20,878 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:50:20,878 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NVAX
2025-07-12 15:50:20,878 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:50:20,878 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:50:20,878 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:50:20,879 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:50:20,965 DEBUG [data.py:179] reusing crumb
2025-07-12 15:50:20,966 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:50:20,967 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:50:21,171 DEBUG [data.py:367] response code=200
2025-07-12 15:50:21,172 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:50:21,172 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:50:21,184 DEBUG [history.py:281] NVAX: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:50:21,186 DEBUG [history.py:318] NVAX: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:50:21,194 DEBUG [history.py:388] NVAX: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:50:21,199 DEBUG [history.py:467] NVAX: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:50:21,200 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:50:21,200 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:50:21,200 INFO [market_data_service.py:337] [NVAX] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:50:21,200 INFO [market_data_service.py:417] [NVAX] Yahoo Finance successful
2025-07-12 15:50:21,201 INFO [chart_service.py:125] [NVAX] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:50:21,201 INFO [chart_service.py:142] [NVAX] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:50:21,247 WARNING [chart_service.py:217] [NVAX] No saved MACD data found for d, calculating directly
2025-07-12 15:50:21,683 WARNING [chart_service.py:217] [NVAX] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:50:22,103 WARNING [chart_service.py:217] [NVAX] No saved MACD data found for m, calculating directly
2025-07-12 15:50:22,396 INFO [chart_service.py:154] [NVAX] Starting integrated indicator calculation and storage...
2025-07-12 15:50:22,396 INFO [indicator_service.py:483] [NVAX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:50:22,409 INFO [indicator_service.py:54] [NVAX] Daily OHLCV data saved: NVAX_ohlcv_d_20250712_155022.csv
2025-07-12 15:50:22,417 INFO [indicator_service.py:68] [NVAX] Weekly OHLCV data saved: NVAX_ohlcv_w_20250712_155022.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:50:22,422 INFO [indicator_service.py:82] [NVAX] Monthly OHLCV data saved: NVAX_ohlcv_m_20250712_155022.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:50:22,437 INFO [indicator_service.py:116] [NVAX] EMA5 d data saved: NVAX_ema5_d_20250712_155022.csv
2025-07-12 15:50:22,443 INFO [indicator_service.py:116] [NVAX] EMA20 d data saved: NVAX_ema20_d_20250712_155022.csv
2025-07-12 15:50:22,448 INFO [indicator_service.py:116] [NVAX] EMA40 d data saved: NVAX_ema40_d_20250712_155022.csv
2025-07-12 15:50:22,458 INFO [indicator_service.py:139] [NVAX] MACD d data saved: NVAX_macd_d_20250712_155022.csv
2025-07-12 15:50:22,469 INFO [indicator_service.py:162] [NVAX] Bollinger Bands d data saved: NVAX_bollinger_d_20250712_155022.csv
2025-07-12 15:50:22,482 INFO [indicator_service.py:186] [NVAX] Ichimoku d data saved: NVAX_ichimoku_d_20250712_155022.csv
2025-07-12 15:50:22,490 INFO [indicator_service.py:207] [NVAX] RSI d data saved: NVAX_rsi_d_20250712_155022.csv
2025-07-12 15:50:22,499 INFO [indicator_service.py:229] [NVAX] Stochastic d data saved: NVAX_stochastic_d_20250712_155022.csv
2025-07-12 15:50:22,506 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d d data saved: NVAX_volume_ratio_5d_d_20250712_155022.csv
2025-07-12 15:50:22,511 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d d data saved: NVAX_volume_ratio_20d_d_20250712_155022.csv
2025-07-12 15:50:22,517 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d d data saved: NVAX_volume_ratio_40d_d_20250712_155022.csv
2025-07-12 15:50:22,521 INFO [indicator_service.py:116] [NVAX] EMA5 w data saved: NVAX_ema5_w_20250712_155022.csv
2025-07-12 15:50:22,524 INFO [indicator_service.py:116] [NVAX] EMA20 w data saved: NVAX_ema20_w_20250712_155022.csv
2025-07-12 15:50:22,527 INFO [indicator_service.py:116] [NVAX] EMA40 w data saved: NVAX_ema40_w_20250712_155022.csv
2025-07-12 15:50:22,532 INFO [indicator_service.py:139] [NVAX] MACD w data saved: NVAX_macd_w_20250712_155022.csv
2025-07-12 15:50:22,537 INFO [indicator_service.py:162] [NVAX] Bollinger Bands w data saved: NVAX_bollinger_w_20250712_155022.csv
2025-07-12 15:50:22,545 INFO [indicator_service.py:186] [NVAX] Ichimoku w data saved: NVAX_ichimoku_w_20250712_155022.csv
2025-07-12 15:50:22,549 INFO [indicator_service.py:207] [NVAX] RSI w data saved: NVAX_rsi_w_20250712_155022.csv
2025-07-12 15:50:22,554 INFO [indicator_service.py:229] [NVAX] Stochastic w data saved: NVAX_stochastic_w_20250712_155022.csv
2025-07-12 15:50:22,559 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d w data saved: NVAX_volume_ratio_5d_w_20250712_155022.csv
2025-07-12 15:50:22,562 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d w data saved: NVAX_volume_ratio_20d_w_20250712_155022.csv
2025-07-12 15:50:22,565 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d w data saved: NVAX_volume_ratio_40d_w_20250712_155022.csv
2025-07-12 15:50:22,568 INFO [indicator_service.py:116] [NVAX] EMA5 m data saved: NVAX_ema5_m_20250712_155022.csv
2025-07-12 15:50:22,570 INFO [indicator_service.py:116] [NVAX] EMA20 m data saved: NVAX_ema20_m_20250712_155022.csv
2025-07-12 15:50:22,572 INFO [indicator_service.py:116] [NVAX] EMA40 m data saved: NVAX_ema40_m_20250712_155022.csv
2025-07-12 15:50:22,576 INFO [indicator_service.py:139] [NVAX] MACD m data saved: NVAX_macd_m_20250712_155022.csv
2025-07-12 15:50:22,580 INFO [indicator_service.py:162] [NVAX] Bollinger Bands m data saved: NVAX_bollinger_m_20250712_155022.csv
2025-07-12 15:50:22,585 INFO [indicator_service.py:186] [NVAX] Ichimoku m data saved: NVAX_ichimoku_m_20250712_155022.csv
2025-07-12 15:50:22,589 INFO [indicator_service.py:207] [NVAX] RSI m data saved: NVAX_rsi_m_20250712_155022.csv
2025-07-12 15:50:22,593 INFO [indicator_service.py:229] [NVAX] Stochastic m data saved: NVAX_stochastic_m_20250712_155022.csv
2025-07-12 15:50:22,598 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d m data saved: NVAX_volume_ratio_5d_m_20250712_155022.csv
2025-07-12 15:50:22,599 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d m data saved: NVAX_volume_ratio_20d_m_20250712_155022.csv
2025-07-12 15:50:22,602 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d m data saved: NVAX_volume_ratio_40d_m_20250712_155022.csv
2025-07-12 15:50:22,602 INFO [indicator_service.py:539] [NVAX] All indicators calculated and saved successfully
2025-07-12 15:50:22,603 INFO [chart_service.py:158] [NVAX] Indicator calculation and storage completed successfully
2025-07-12 15:50:22,603 INFO [chart_service.py:165] [NVAX] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:50:22,605 INFO [analysis_service.py:348] [NVAX] Starting AI analysis process...
2025-07-12 15:50:22,605 INFO [analysis_service.py:356] [NVAX] Looking for chart files...
2025-07-12 15:50:22,609 INFO [analysis_service.py:413] [NVAX] Found Daily chart: NVAX_daily_20250712.png
2025-07-12 15:50:22,609 INFO [analysis_service.py:413] [NVAX] Found Weekly chart: NVAX_weekly_20250712.png
2025-07-12 15:50:22,609 INFO [analysis_service.py:413] [NVAX] Found Monthly chart: NVAX_monthly_20250712.png
2025-07-12 15:50:22,610 INFO [analysis_service.py:415] [NVAX] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:50:22,610 INFO [analysis_service.py:432] [NVAX] Chart image transmission disabled - using text-only analysis
2025-07-12 15:50:22,610 INFO [analysis_service.py:439] [NVAX] Determining data processing strategy based on market hours...
2025-07-12 15:50:22,611 INFO [analysis_service.py:463] [NVAX] US stock - Current EST: 15:50:22, Market hours: True
2025-07-12 15:50:22,611 INFO [analysis_service.py:470] [NVAX] Market hours detected - will download fresh data
2025-07-12 15:50:22,611 INFO [analysis_service.py:479] [NVAX] Downloading fresh data and calculating new indicators...
2025-07-12 15:50:22,611 INFO [analysis_service.py:155] [NVAX] Starting fresh data download and analysis...
2025-07-12 15:50:22,612 INFO [analysis_service.py:163] [NVAX] Downloading fresh stock data...
2025-07-12 15:50:22,612 INFO [market_data_service.py:373] [NVAX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:50:22,612 INFO [market_data_service.py:413] [NVAX] Trying Yahoo Finance first...
2025-07-12 15:50:22,612 INFO [market_data_service.py:324] [NVAX] Downloading chart data (attempt 1/2)...
2025-07-12 15:50:22,613 DEBUG [utils.py:96] Entering history()
2025-07-12 15:50:22,613 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NVAX', 1, 0])
2025-07-12 15:50:22,614 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:50:22,615 DEBUG [history.py:165] NVAX: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:50:22,615 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:50:22,615 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:50:22,615 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NVAX
2025-07-12 15:50:22,616 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:50:22,616 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:50:22,616 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:50:22,616 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:50:22,694 DEBUG [data.py:179] reusing crumb
2025-07-12 15:50:22,694 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:50:22,695 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:50:22,833 DEBUG [data.py:367] response code=200
2025-07-12 15:50:22,833 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:50:22,833 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:50:22,838 DEBUG [history.py:281] NVAX: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:50:22,839 DEBUG [history.py:318] NVAX: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:50:22,842 DEBUG [history.py:388] NVAX: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:50:22,844 DEBUG [history.py:467] NVAX: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:50:22,845 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:50:22,845 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:50:22,845 INFO [market_data_service.py:337] [NVAX] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:50:22,846 INFO [market_data_service.py:417] [NVAX] Yahoo Finance successful
2025-07-12 15:50:22,846 INFO [analysis_service.py:178] [NVAX] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:50:22,847 INFO [analysis_service.py:181] [NVAX] Calculating and saving new indicators...
2025-07-12 15:50:22,847 INFO [indicator_service.py:483] [NVAX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:50:22,860 INFO [indicator_service.py:54] [NVAX] Daily OHLCV data saved: NVAX_ohlcv_d_20250712_155022.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:50:22,868 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:22,869 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:16', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:22,870 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:22] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:22,875 INFO [indicator_service.py:68] [NVAX] Weekly OHLCV data saved: NVAX_ohlcv_w_20250712_155022.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:50:22,881 INFO [indicator_service.py:82] [NVAX] Monthly OHLCV data saved: NVAX_ohlcv_m_20250712_155022.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:50:22,897 INFO [indicator_service.py:116] [NVAX] EMA5 d data saved: NVAX_ema5_d_20250712_155022.csv
2025-07-12 15:50:22,905 INFO [indicator_service.py:116] [NVAX] EMA20 d data saved: NVAX_ema20_d_20250712_155022.csv
2025-07-12 15:50:22,912 INFO [indicator_service.py:116] [NVAX] EMA40 d data saved: NVAX_ema40_d_20250712_155022.csv
2025-07-12 15:50:22,923 INFO [indicator_service.py:139] [NVAX] MACD d data saved: NVAX_macd_d_20250712_155022.csv
2025-07-12 15:50:22,940 INFO [indicator_service.py:162] [NVAX] Bollinger Bands d data saved: NVAX_bollinger_d_20250712_155022.csv
2025-07-12 15:50:22,960 INFO [indicator_service.py:186] [NVAX] Ichimoku d data saved: NVAX_ichimoku_d_20250712_155022.csv
2025-07-12 15:50:22,967 INFO [indicator_service.py:207] [NVAX] RSI d data saved: NVAX_rsi_d_20250712_155022.csv
2025-07-12 15:50:22,976 INFO [indicator_service.py:229] [NVAX] Stochastic d data saved: NVAX_stochastic_d_20250712_155022.csv
2025-07-12 15:50:22,983 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d d data saved: NVAX_volume_ratio_5d_d_20250712_155022.csv
2025-07-12 15:50:22,989 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d d data saved: NVAX_volume_ratio_20d_d_20250712_155022.csv
2025-07-12 15:50:22,994 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d d data saved: NVAX_volume_ratio_40d_d_20250712_155022.csv
2025-07-12 15:50:22,997 INFO [indicator_service.py:116] [NVAX] EMA5 w data saved: NVAX_ema5_w_20250712_155022.csv
2025-07-12 15:50:23,000 INFO [indicator_service.py:116] [NVAX] EMA20 w data saved: NVAX_ema20_w_20250712_155022.csv
2025-07-12 15:50:23,002 INFO [indicator_service.py:116] [NVAX] EMA40 w data saved: NVAX_ema40_w_20250712_155022.csv
2025-07-12 15:50:23,007 INFO [indicator_service.py:139] [NVAX] MACD w data saved: NVAX_macd_w_20250712_155022.csv
2025-07-12 15:50:23,013 INFO [indicator_service.py:162] [NVAX] Bollinger Bands w data saved: NVAX_bollinger_w_20250712_155022.csv
2025-07-12 15:50:23,019 INFO [indicator_service.py:186] [NVAX] Ichimoku w data saved: NVAX_ichimoku_w_20250712_155022.csv
2025-07-12 15:50:23,024 INFO [indicator_service.py:207] [NVAX] RSI w data saved: NVAX_rsi_w_20250712_155022.csv
2025-07-12 15:50:23,029 INFO [indicator_service.py:229] [NVAX] Stochastic w data saved: NVAX_stochastic_w_20250712_155022.csv
2025-07-12 15:50:23,033 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d w data saved: NVAX_volume_ratio_5d_w_20250712_155022.csv
2025-07-12 15:50:23,035 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d w data saved: NVAX_volume_ratio_20d_w_20250712_155022.csv
2025-07-12 15:50:23,039 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d w data saved: NVAX_volume_ratio_40d_w_20250712_155022.csv
2025-07-12 15:50:23,043 INFO [indicator_service.py:116] [NVAX] EMA5 m data saved: NVAX_ema5_m_20250712_155022.csv
2025-07-12 15:50:23,045 INFO [indicator_service.py:116] [NVAX] EMA20 m data saved: NVAX_ema20_m_20250712_155022.csv
2025-07-12 15:50:23,047 INFO [indicator_service.py:116] [NVAX] EMA40 m data saved: NVAX_ema40_m_20250712_155022.csv
2025-07-12 15:50:23,050 INFO [indicator_service.py:139] [NVAX] MACD m data saved: NVAX_macd_m_20250712_155022.csv
2025-07-12 15:50:23,054 INFO [indicator_service.py:162] [NVAX] Bollinger Bands m data saved: NVAX_bollinger_m_20250712_155022.csv
2025-07-12 15:50:23,061 INFO [indicator_service.py:186] [NVAX] Ichimoku m data saved: NVAX_ichimoku_m_20250712_155022.csv
2025-07-12 15:50:23,066 INFO [indicator_service.py:207] [NVAX] RSI m data saved: NVAX_rsi_m_20250712_155022.csv
2025-07-12 15:50:23,071 INFO [indicator_service.py:229] [NVAX] Stochastic m data saved: NVAX_stochastic_m_20250712_155022.csv
2025-07-12 15:50:23,078 INFO [indicator_service.py:267] [NVAX] Volume Ratio 5d m data saved: NVAX_volume_ratio_5d_m_20250712_155022.csv
2025-07-12 15:50:23,080 INFO [indicator_service.py:267] [NVAX] Volume Ratio 20d m data saved: NVAX_volume_ratio_20d_m_20250712_155022.csv
2025-07-12 15:50:23,082 INFO [indicator_service.py:267] [NVAX] Volume Ratio 40d m data saved: NVAX_volume_ratio_40d_m_20250712_155022.csv
2025-07-12 15:50:23,082 INFO [indicator_service.py:539] [NVAX] All indicators calculated and saved successfully
2025-07-12 15:50:23,152 INFO [analysis_service.py:209] [NVAX] Fresh indicators calculated successfully
2025-07-12 15:50:23,152 INFO [analysis_service.py:210] [NVAX] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:50:23,903 INFO [analysis_service.py:790] [NVAX] Starting Gemini AI analysis...
2025-07-12 15:50:23,904 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 NVAX 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:50:25,872 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:25,872 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:19', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:25,873 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:25] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:28,862 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:28,862 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:22', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:28,864 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:28] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:31,871 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:31,871 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:25', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:31,872 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:31] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:34,863 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:34,864 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:28', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:34,865 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:34] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:37,860 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:37,861 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:31', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:37,862 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:37] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:40,863 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:40,864 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:34', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:40,865 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:40] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:43,875 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:43,875 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:37', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:43,877 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:43] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:46,855 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:46,855 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:40', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:46,856 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:46] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:48,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:48,895 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:42', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:48,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:51,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:51,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:45', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:51,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:54,904 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:54,905 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:48', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:54,906 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:50:57,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:50:57,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:51', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:50:57,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:50:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:00,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:51:00,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'progress_percentage': 31.4, 'elapsed_time': '0:05:54', 'estimated_completion': '16:01:46', 'stop_requested': False}
2025-07-12 15:51:00,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:02,710 INFO [analysis_service.py:928] [NVAX] Gemini API call completed in 38.81 seconds
2025-07-12 15:51:02,711 INFO [analysis_service.py:931] Gemini raw response text length: 6026
2025-07-12 15:51:02,712 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  NVAX는 월봉 및 주봉상 장기 하락 추세 속에 갇혀 있으나, 최근 일봉상 6.13달러 저점 이후 단기적인 반등을 시도하다 7.18달러에서 저항에 부딪혀 6.84달러로 조정받고 있습니다.
2.  스윙 투자자는 6.50-6.60달러 부근에서의 지지력 확인과 함께 강한 매수 신호(거래량 동반 양봉, MACD 골든크로스 재확인) 발생 시 매수 접근을 고려할 수 있습니다.
3.  매도 시점은 7.00-7.20달러의 저항선 근처이며, 장기 하락 추세와 높은 변동성을 감안하여 6.50달러 이하로 내려갈 경우 즉각적인 손절매를 통한 리스크 관리가 중요합니다.

---

**NVAX 기술적 지표 분석 및 스윙 투자 전략**

제공된 NVAX의 OHLCV 데이터를 기반으로 일봉, 주봉, 월봉 차트를 분석하고, 스윙 투자자의 관점에서 매수 및 매도 타이밍에 대한 의견을 제시합니다.

---

**상세 분석**

**1. 일봉 차트 분석 (최근 30일)**

*   **가격 흐...
2025-07-12 15:51:02,712 INFO [analysis_service.py:792] [NVAX] Gemini AI analysis completed. Success: True
2025-07-12 15:51:02,713 INFO [analysis_service.py:797] [NVAX] Extracting summary from Gemini analysis...
2025-07-12 15:51:02,714 INFO [analysis_service.py:799] [NVAX] Summary extracted successfully
2025-07-12 15:51:02,714 INFO [analysis_service.py:802] [NVAX] Getting indicator data for analysis...
2025-07-12 15:51:02,949 INFO [analysis_service.py:806] [NVAX] Saving HTML analysis file...
2025-07-12 15:51:02,951 INFO [analysis_service.py:834] [NVAX] HTML analysis file saved successfully with app_context
2025-07-12 15:51:02,951 INFO [analysis_service.py:840] [NVAX] AI analysis process completed successfully
2025-07-12 15:51:02,984 INFO [batch_analysis_service.py:435] [NVAX] New analysis completed successfully
2025-07-12 15:51:02,984 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:51:02,985 INFO [progress_service.py:24] Input params: ticker=MRNA, processed=12, total=35, list_name=03 Watch (12/21)
2025-07-12 15:51:02,985 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVAX', 'current_list': '03 Watch (11/21)', 'total_tickers': 35, 'processed_tickers': 11, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 46, 590689), 'stop_requested': False}
2025-07-12 15:51:02,985 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:02,986 INFO [chart_service.py:116] [MRNA] Starting chart generation process...
2025-07-12 15:51:02,987 INFO [chart_service.py:123] [MRNA] Downloading data from yfinance...
2025-07-12 15:51:02,988 INFO [market_data_service.py:373] [MRNA] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:51:02,988 INFO [market_data_service.py:413] [MRNA] Trying Yahoo Finance first...
2025-07-12 15:51:02,988 INFO [market_data_service.py:324] [MRNA] Downloading chart data (attempt 1/2)...
2025-07-12 15:51:02,989 DEBUG [utils.py:96] Entering history()
2025-07-12 15:51:02,989 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MRNA', 1, 0])
2025-07-12 15:51:02,991 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:51:02,991 DEBUG [history.py:165] MRNA: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:02,992 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:51:02,992 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:51:02,992 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MRNA
2025-07-12 15:51:02,992 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:02,992 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:51:02,993 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:51:02,993 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:51:03,110 DEBUG [data.py:179] reusing crumb
2025-07-12 15:51:03,110 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:51:03,111 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:51:03,280 DEBUG [data.py:367] response code=200
2025-07-12 15:51:03,280 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:51:03,281 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:51:03,288 DEBUG [history.py:281] MRNA: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:51:03,290 DEBUG [history.py:318] MRNA: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:51:03,293 DEBUG [history.py:388] MRNA: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:03,296 DEBUG [history.py:467] MRNA: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:03,297 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:51:03,297 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:51:03,298 INFO [market_data_service.py:337] [MRNA] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:51:03,298 INFO [market_data_service.py:417] [MRNA] Yahoo Finance successful
2025-07-12 15:51:03,298 INFO [chart_service.py:125] [MRNA] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:51:03,300 INFO [chart_service.py:142] [MRNA] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:51:03,355 WARNING [chart_service.py:217] [MRNA] No saved MACD data found for d, calculating directly
2025-07-12 15:51:03,842 WARNING [chart_service.py:217] [MRNA] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:51:03,988 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:03,990 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:05:57', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:03,991 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:03] "GET /get_current_progress HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:51:04,313 WARNING [chart_service.py:217] [MRNA] No saved MACD data found for m, calculating directly
2025-07-12 15:51:04,726 INFO [chart_service.py:154] [MRNA] Starting integrated indicator calculation and storage...
2025-07-12 15:51:04,727 INFO [indicator_service.py:483] [MRNA] Starting comprehensive indicator calculation and storage...
2025-07-12 15:51:04,736 INFO [indicator_service.py:54] [MRNA] Daily OHLCV data saved: MRNA_ohlcv_d_20250712_155104.csv
2025-07-12 15:51:04,746 INFO [indicator_service.py:68] [MRNA] Weekly OHLCV data saved: MRNA_ohlcv_w_20250712_155104.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:04,751 INFO [indicator_service.py:82] [MRNA] Monthly OHLCV data saved: MRNA_ohlcv_m_20250712_155104.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:04,770 INFO [indicator_service.py:116] [MRNA] EMA5 d data saved: MRNA_ema5_d_20250712_155104.csv
2025-07-12 15:51:04,776 INFO [indicator_service.py:116] [MRNA] EMA20 d data saved: MRNA_ema20_d_20250712_155104.csv
2025-07-12 15:51:04,782 INFO [indicator_service.py:116] [MRNA] EMA40 d data saved: MRNA_ema40_d_20250712_155104.csv
2025-07-12 15:51:04,793 INFO [indicator_service.py:139] [MRNA] MACD d data saved: MRNA_macd_d_20250712_155104.csv
2025-07-12 15:51:04,805 INFO [indicator_service.py:162] [MRNA] Bollinger Bands d data saved: MRNA_bollinger_d_20250712_155104.csv
2025-07-12 15:51:04,820 INFO [indicator_service.py:186] [MRNA] Ichimoku d data saved: MRNA_ichimoku_d_20250712_155104.csv
2025-07-12 15:51:04,829 INFO [indicator_service.py:207] [MRNA] RSI d data saved: MRNA_rsi_d_20250712_155104.csv
2025-07-12 15:51:04,838 INFO [indicator_service.py:229] [MRNA] Stochastic d data saved: MRNA_stochastic_d_20250712_155104.csv
2025-07-12 15:51:04,846 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d d data saved: MRNA_volume_ratio_5d_d_20250712_155104.csv
2025-07-12 15:51:04,851 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d d data saved: MRNA_volume_ratio_20d_d_20250712_155104.csv
2025-07-12 15:51:04,858 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d d data saved: MRNA_volume_ratio_40d_d_20250712_155104.csv
2025-07-12 15:51:04,862 INFO [indicator_service.py:116] [MRNA] EMA5 w data saved: MRNA_ema5_w_20250712_155104.csv
2025-07-12 15:51:04,865 INFO [indicator_service.py:116] [MRNA] EMA20 w data saved: MRNA_ema20_w_20250712_155104.csv
2025-07-12 15:51:04,867 INFO [indicator_service.py:116] [MRNA] EMA40 w data saved: MRNA_ema40_w_20250712_155104.csv
2025-07-12 15:51:04,873 INFO [indicator_service.py:139] [MRNA] MACD w data saved: MRNA_macd_w_20250712_155104.csv
2025-07-12 15:51:04,879 INFO [indicator_service.py:162] [MRNA] Bollinger Bands w data saved: MRNA_bollinger_w_20250712_155104.csv
2025-07-12 15:51:04,887 INFO [indicator_service.py:186] [MRNA] Ichimoku w data saved: MRNA_ichimoku_w_20250712_155104.csv
2025-07-12 15:51:04,892 INFO [indicator_service.py:207] [MRNA] RSI w data saved: MRNA_rsi_w_20250712_155104.csv
2025-07-12 15:51:04,897 INFO [indicator_service.py:229] [MRNA] Stochastic w data saved: MRNA_stochastic_w_20250712_155104.csv
2025-07-12 15:51:04,903 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d w data saved: MRNA_volume_ratio_5d_w_20250712_155104.csv
2025-07-12 15:51:04,906 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d w data saved: MRNA_volume_ratio_20d_w_20250712_155104.csv
2025-07-12 15:51:04,909 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d w data saved: MRNA_volume_ratio_40d_w_20250712_155104.csv
2025-07-12 15:51:04,913 INFO [indicator_service.py:116] [MRNA] EMA5 m data saved: MRNA_ema5_m_20250712_155104.csv
2025-07-12 15:51:04,916 INFO [indicator_service.py:116] [MRNA] EMA20 m data saved: MRNA_ema20_m_20250712_155104.csv
2025-07-12 15:51:04,918 INFO [indicator_service.py:116] [MRNA] EMA40 m data saved: MRNA_ema40_m_20250712_155104.csv
2025-07-12 15:51:04,923 INFO [indicator_service.py:139] [MRNA] MACD m data saved: MRNA_macd_m_20250712_155104.csv
2025-07-12 15:51:04,927 INFO [indicator_service.py:162] [MRNA] Bollinger Bands m data saved: MRNA_bollinger_m_20250712_155104.csv
2025-07-12 15:51:04,933 INFO [indicator_service.py:186] [MRNA] Ichimoku m data saved: MRNA_ichimoku_m_20250712_155104.csv
2025-07-12 15:51:04,939 INFO [indicator_service.py:207] [MRNA] RSI m data saved: MRNA_rsi_m_20250712_155104.csv
2025-07-12 15:51:04,945 INFO [indicator_service.py:229] [MRNA] Stochastic m data saved: MRNA_stochastic_m_20250712_155104.csv
2025-07-12 15:51:04,950 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d m data saved: MRNA_volume_ratio_5d_m_20250712_155104.csv
2025-07-12 15:51:04,953 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d m data saved: MRNA_volume_ratio_20d_m_20250712_155104.csv
2025-07-12 15:51:04,956 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d m data saved: MRNA_volume_ratio_40d_m_20250712_155104.csv
2025-07-12 15:51:04,957 INFO [indicator_service.py:539] [MRNA] All indicators calculated and saved successfully
2025-07-12 15:51:04,957 INFO [chart_service.py:158] [MRNA] Indicator calculation and storage completed successfully
2025-07-12 15:51:04,957 INFO [chart_service.py:165] [MRNA] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:51:04,960 INFO [analysis_service.py:348] [MRNA] Starting AI analysis process...
2025-07-12 15:51:04,961 INFO [analysis_service.py:356] [MRNA] Looking for chart files...
2025-07-12 15:51:04,965 INFO [analysis_service.py:413] [MRNA] Found Daily chart: MRNA_daily_20250712.png
2025-07-12 15:51:04,965 INFO [analysis_service.py:413] [MRNA] Found Weekly chart: MRNA_weekly_20250712.png
2025-07-12 15:51:04,966 INFO [analysis_service.py:413] [MRNA] Found Monthly chart: MRNA_monthly_20250712.png
2025-07-12 15:51:04,966 INFO [analysis_service.py:415] [MRNA] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:51:04,967 INFO [analysis_service.py:432] [MRNA] Chart image transmission disabled - using text-only analysis
2025-07-12 15:51:04,967 INFO [analysis_service.py:439] [MRNA] Determining data processing strategy based on market hours...
2025-07-12 15:51:04,967 INFO [analysis_service.py:463] [MRNA] US stock - Current EST: 15:51:04, Market hours: True
2025-07-12 15:51:04,968 INFO [analysis_service.py:470] [MRNA] Market hours detected - will download fresh data
2025-07-12 15:51:04,968 INFO [analysis_service.py:479] [MRNA] Downloading fresh data and calculating new indicators...
2025-07-12 15:51:04,968 INFO [analysis_service.py:155] [MRNA] Starting fresh data download and analysis...
2025-07-12 15:51:04,969 INFO [analysis_service.py:163] [MRNA] Downloading fresh stock data...
2025-07-12 15:51:04,969 INFO [market_data_service.py:373] [MRNA] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:51:04,969 INFO [market_data_service.py:413] [MRNA] Trying Yahoo Finance first...
2025-07-12 15:51:04,970 INFO [market_data_service.py:324] [MRNA] Downloading chart data (attempt 1/2)...
2025-07-12 15:51:04,970 DEBUG [utils.py:96] Entering history()
2025-07-12 15:51:04,971 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MRNA', 1, 0])
2025-07-12 15:51:04,972 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:51:04,973 DEBUG [history.py:165] MRNA: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:04,973 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:51:04,973 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:51:04,974 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MRNA
2025-07-12 15:51:04,974 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:04,974 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:51:04,974 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:51:04,974 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:51:05,049 DEBUG [data.py:179] reusing crumb
2025-07-12 15:51:05,049 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:51:05,050 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:51:05,223 DEBUG [data.py:367] response code=200
2025-07-12 15:51:05,223 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:51:05,223 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:51:05,228 DEBUG [history.py:281] MRNA: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:51:05,229 DEBUG [history.py:318] MRNA: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:51:05,233 DEBUG [history.py:388] MRNA: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:05,238 DEBUG [history.py:467] MRNA: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:05,239 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:51:05,239 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:51:05,239 INFO [market_data_service.py:337] [MRNA] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:51:05,239 INFO [market_data_service.py:417] [MRNA] Yahoo Finance successful
2025-07-12 15:51:05,240 INFO [analysis_service.py:178] [MRNA] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:51:05,240 INFO [analysis_service.py:181] [MRNA] Calculating and saving new indicators...
2025-07-12 15:51:05,240 INFO [indicator_service.py:483] [MRNA] Starting comprehensive indicator calculation and storage...
2025-07-12 15:51:05,250 INFO [indicator_service.py:54] [MRNA] Daily OHLCV data saved: MRNA_ohlcv_d_20250712_155105.csv
2025-07-12 15:51:05,298 INFO [indicator_service.py:68] [MRNA] Weekly OHLCV data saved: MRNA_ohlcv_w_20250712_155105.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:05,305 INFO [indicator_service.py:82] [MRNA] Monthly OHLCV data saved: MRNA_ohlcv_m_20250712_155105.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:05,323 INFO [indicator_service.py:116] [MRNA] EMA5 d data saved: MRNA_ema5_d_20250712_155105.csv
2025-07-12 15:51:05,329 INFO [indicator_service.py:116] [MRNA] EMA20 d data saved: MRNA_ema20_d_20250712_155105.csv
2025-07-12 15:51:05,337 INFO [indicator_service.py:116] [MRNA] EMA40 d data saved: MRNA_ema40_d_20250712_155105.csv
2025-07-12 15:51:05,348 INFO [indicator_service.py:139] [MRNA] MACD d data saved: MRNA_macd_d_20250712_155105.csv
2025-07-12 15:51:05,361 INFO [indicator_service.py:162] [MRNA] Bollinger Bands d data saved: MRNA_bollinger_d_20250712_155105.csv
2025-07-12 15:51:05,383 INFO [indicator_service.py:186] [MRNA] Ichimoku d data saved: MRNA_ichimoku_d_20250712_155105.csv
2025-07-12 15:51:05,397 INFO [indicator_service.py:207] [MRNA] RSI d data saved: MRNA_rsi_d_20250712_155105.csv
2025-07-12 15:51:05,410 INFO [indicator_service.py:229] [MRNA] Stochastic d data saved: MRNA_stochastic_d_20250712_155105.csv
2025-07-12 15:51:05,421 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d d data saved: MRNA_volume_ratio_5d_d_20250712_155105.csv
2025-07-12 15:51:05,426 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d d data saved: MRNA_volume_ratio_20d_d_20250712_155105.csv
2025-07-12 15:51:05,434 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d d data saved: MRNA_volume_ratio_40d_d_20250712_155105.csv
2025-07-12 15:51:05,439 INFO [indicator_service.py:116] [MRNA] EMA5 w data saved: MRNA_ema5_w_20250712_155105.csv
2025-07-12 15:51:05,442 INFO [indicator_service.py:116] [MRNA] EMA20 w data saved: MRNA_ema20_w_20250712_155105.csv
2025-07-12 15:51:05,444 INFO [indicator_service.py:116] [MRNA] EMA40 w data saved: MRNA_ema40_w_20250712_155105.csv
2025-07-12 15:51:05,450 INFO [indicator_service.py:139] [MRNA] MACD w data saved: MRNA_macd_w_20250712_155105.csv
2025-07-12 15:51:05,456 INFO [indicator_service.py:162] [MRNA] Bollinger Bands w data saved: MRNA_bollinger_w_20250712_155105.csv
2025-07-12 15:51:05,463 INFO [indicator_service.py:186] [MRNA] Ichimoku w data saved: MRNA_ichimoku_w_20250712_155105.csv
2025-07-12 15:51:05,467 INFO [indicator_service.py:207] [MRNA] RSI w data saved: MRNA_rsi_w_20250712_155105.csv
2025-07-12 15:51:05,472 INFO [indicator_service.py:229] [MRNA] Stochastic w data saved: MRNA_stochastic_w_20250712_155105.csv
2025-07-12 15:51:05,477 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d w data saved: MRNA_volume_ratio_5d_w_20250712_155105.csv
2025-07-12 15:51:05,480 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d w data saved: MRNA_volume_ratio_20d_w_20250712_155105.csv
2025-07-12 15:51:05,484 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d w data saved: MRNA_volume_ratio_40d_w_20250712_155105.csv
2025-07-12 15:51:05,488 INFO [indicator_service.py:116] [MRNA] EMA5 m data saved: MRNA_ema5_m_20250712_155105.csv
2025-07-12 15:51:05,491 INFO [indicator_service.py:116] [MRNA] EMA20 m data saved: MRNA_ema20_m_20250712_155105.csv
2025-07-12 15:51:05,493 INFO [indicator_service.py:116] [MRNA] EMA40 m data saved: MRNA_ema40_m_20250712_155105.csv
2025-07-12 15:51:05,498 INFO [indicator_service.py:139] [MRNA] MACD m data saved: MRNA_macd_m_20250712_155105.csv
2025-07-12 15:51:05,504 INFO [indicator_service.py:162] [MRNA] Bollinger Bands m data saved: MRNA_bollinger_m_20250712_155105.csv
2025-07-12 15:51:05,510 INFO [indicator_service.py:186] [MRNA] Ichimoku m data saved: MRNA_ichimoku_m_20250712_155105.csv
2025-07-12 15:51:05,515 INFO [indicator_service.py:207] [MRNA] RSI m data saved: MRNA_rsi_m_20250712_155105.csv
2025-07-12 15:51:05,520 INFO [indicator_service.py:229] [MRNA] Stochastic m data saved: MRNA_stochastic_m_20250712_155105.csv
2025-07-12 15:51:05,528 INFO [indicator_service.py:267] [MRNA] Volume Ratio 5d m data saved: MRNA_volume_ratio_5d_m_20250712_155105.csv
2025-07-12 15:51:05,530 INFO [indicator_service.py:267] [MRNA] Volume Ratio 20d m data saved: MRNA_volume_ratio_20d_m_20250712_155105.csv
2025-07-12 15:51:05,532 INFO [indicator_service.py:267] [MRNA] Volume Ratio 40d m data saved: MRNA_volume_ratio_40d_m_20250712_155105.csv
2025-07-12 15:51:05,533 INFO [indicator_service.py:539] [MRNA] All indicators calculated and saved successfully
2025-07-12 15:51:05,602 INFO [analysis_service.py:209] [MRNA] Fresh indicators calculated successfully
2025-07-12 15:51:05,603 INFO [analysis_service.py:210] [MRNA] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:51:06,296 INFO [analysis_service.py:790] [MRNA] Starting Gemini AI analysis...
2025-07-12 15:51:06,296 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 MRNA 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:51:06,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:06,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:00', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:06,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:09,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:09,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:03', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:09,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:12,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:12,895 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:06', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:12,896 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:15,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:15,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:09', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:15,896 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:18,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:18,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:12', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:18,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:21,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:21,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:15', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:21,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:24,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:24,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:18', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:24,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:27,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:27,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:21', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:27,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:30,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:30,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:24', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:30,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:33,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:33,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:27', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:33,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:36,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:36,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:30', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:36,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:39,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:39,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:33', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:39,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:42,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:42,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'progress_percentage': 34.3, 'elapsed_time': '0:06:36', 'estimated_completion': '16:02:26', 'stop_requested': False}
2025-07-12 15:51:42,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:44,492 ERROR [analysis_service.py:938] Gemini analysis failed for MRNA
Traceback (most recent call last):
  File "C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\analysis_service.py", line 926, in perform_gemini_analysis
    response = model.generate_content(gemini_inputs)
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\generativeai\generative_models.py", line 331, in generate_content
    response = self._client.generate_content(
        request,
        **request_options,
    )
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\ai\generativelanguage_v1beta\services\generative_service\client.py", line 835, in generate_content
    response = rpc(
        request,
    ...<2 lines>...
        metadata=metadata,
    )
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\gapic_v1\method.py", line 131, in __call__
    return wrapped_func(*args, **kwargs)
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\retry\retry_unary.py", line 294, in retry_wrapped_func
    return retry_target(
        target,
    ...<3 lines>...
        on_error=on_error,
    )
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\retry\retry_unary.py", line 156, in retry_target
    next_sleep = _retry_error_helper(
        exc,
    ...<6 lines>...
        timeout,
    )
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\retry\retry_base.py", line 214, in _retry_error_helper
    raise final_exc from source_exc
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\retry\retry_unary.py", line 147, in retry_target
    result = target()
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\timeout.py", line 130, in func_with_timeout
    return func(*args, **kwargs)
  File "C:\Users\LTH_Laptop\AppData\Local\Programs\Python\Python313\Lib\site-packages\google\api_core\grpc_helpers.py", line 78, in error_remapped_callable
    raise exceptions.from_grpc_error(exc) from exc
google.api_core.exceptions.InternalServerError: 500 An internal error has occurred. Please retry or report in https://developers.generativeai.google/guide/troubleshooting
2025-07-12 15:51:44,542 INFO [analysis_service.py:792] [MRNA] Gemini AI analysis completed. Success: False
2025-07-12 15:51:44,543 INFO [analysis_service.py:802] [MRNA] Getting indicator data for analysis...
2025-07-12 15:51:44,747 INFO [analysis_service.py:806] [MRNA] Saving HTML analysis file...
2025-07-12 15:51:44,750 INFO [analysis_service.py:834] [MRNA] HTML analysis file saved successfully with app_context
2025-07-12 15:51:44,750 INFO [analysis_service.py:840] [MRNA] AI analysis process completed successfully
2025-07-12 15:51:44,754 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:51:44,754 INFO [progress_service.py:24] Input params: ticker=UAL, processed=13, total=35, list_name=03 Watch (13/21)
2025-07-12 15:51:44,755 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MRNA', 'current_list': '03 Watch (12/21)', 'total_tickers': 35, 'processed_tickers': 12, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 26, 81922), 'stop_requested': False}
2025-07-12 15:51:44,755 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:44,756 INFO [chart_service.py:116] [UAL] Starting chart generation process...
2025-07-12 15:51:44,757 INFO [chart_service.py:123] [UAL] Downloading data from yfinance...
2025-07-12 15:51:44,757 INFO [market_data_service.py:373] [UAL] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:51:44,758 INFO [market_data_service.py:413] [UAL] Trying Yahoo Finance first...
2025-07-12 15:51:44,758 INFO [market_data_service.py:324] [UAL] Downloading chart data (attempt 1/2)...
2025-07-12 15:51:44,758 DEBUG [utils.py:96] Entering history()
2025-07-12 15:51:44,759 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UAL', 1, 0])
2025-07-12 15:51:44,760 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:51:44,761 DEBUG [history.py:165] UAL: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:44,761 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:51:44,762 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:51:44,762 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UAL
2025-07-12 15:51:44,762 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:44,762 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:51:44,763 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:51:44,763 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:51:44,879 DEBUG [data.py:179] reusing crumb
2025-07-12 15:51:44,889 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:51:44,894 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:51:45,103 DEBUG [data.py:367] response code=200
2025-07-12 15:51:45,104 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:51:45,104 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:51:45,117 DEBUG [history.py:281] UAL: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:51:45,120 DEBUG [history.py:318] UAL: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:51:45,128 DEBUG [history.py:388] UAL: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:45,133 DEBUG [history.py:467] UAL: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:45,134 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:51:45,135 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:51:45,136 INFO [market_data_service.py:337] [UAL] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:51:45,136 INFO [market_data_service.py:417] [UAL] Yahoo Finance successful
2025-07-12 15:51:45,137 INFO [chart_service.py:125] [UAL] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:51:45,139 INFO [chart_service.py:142] [UAL] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:51:45,188 WARNING [chart_service.py:217] [UAL] No saved MACD data found for d, calculating directly
2025-07-12 15:51:45,783 WARNING [chart_service.py:217] [UAL] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:51:45,907 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:45,908 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:39', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:51:45,909 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:45] "GET /get_current_progress HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:51:46,215 WARNING [chart_service.py:217] [UAL] No saved MACD data found for m, calculating directly
2025-07-12 15:51:46,496 INFO [chart_service.py:154] [UAL] Starting integrated indicator calculation and storage...
2025-07-12 15:51:46,496 INFO [indicator_service.py:483] [UAL] Starting comprehensive indicator calculation and storage...
2025-07-12 15:51:46,507 INFO [indicator_service.py:54] [UAL] Daily OHLCV data saved: UAL_ohlcv_d_20250712_155146.csv
2025-07-12 15:51:46,516 INFO [indicator_service.py:68] [UAL] Weekly OHLCV data saved: UAL_ohlcv_w_20250712_155146.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:46,522 INFO [indicator_service.py:82] [UAL] Monthly OHLCV data saved: UAL_ohlcv_m_20250712_155146.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:46,538 INFO [indicator_service.py:116] [UAL] EMA5 d data saved: UAL_ema5_d_20250712_155146.csv
2025-07-12 15:51:46,544 INFO [indicator_service.py:116] [UAL] EMA20 d data saved: UAL_ema20_d_20250712_155146.csv
2025-07-12 15:51:46,549 INFO [indicator_service.py:116] [UAL] EMA40 d data saved: UAL_ema40_d_20250712_155146.csv
2025-07-12 15:51:46,560 INFO [indicator_service.py:139] [UAL] MACD d data saved: UAL_macd_d_20250712_155146.csv
2025-07-12 15:51:46,572 INFO [indicator_service.py:162] [UAL] Bollinger Bands d data saved: UAL_bollinger_d_20250712_155146.csv
2025-07-12 15:51:46,587 INFO [indicator_service.py:186] [UAL] Ichimoku d data saved: UAL_ichimoku_d_20250712_155146.csv
2025-07-12 15:51:46,595 INFO [indicator_service.py:207] [UAL] RSI d data saved: UAL_rsi_d_20250712_155146.csv
2025-07-12 15:51:46,604 INFO [indicator_service.py:229] [UAL] Stochastic d data saved: UAL_stochastic_d_20250712_155146.csv
2025-07-12 15:51:46,612 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d d data saved: UAL_volume_ratio_5d_d_20250712_155146.csv
2025-07-12 15:51:46,618 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d d data saved: UAL_volume_ratio_20d_d_20250712_155146.csv
2025-07-12 15:51:46,624 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d d data saved: UAL_volume_ratio_40d_d_20250712_155146.csv
2025-07-12 15:51:46,628 INFO [indicator_service.py:116] [UAL] EMA5 w data saved: UAL_ema5_w_20250712_155146.csv
2025-07-12 15:51:46,632 INFO [indicator_service.py:116] [UAL] EMA20 w data saved: UAL_ema20_w_20250712_155146.csv
2025-07-12 15:51:46,635 INFO [indicator_service.py:116] [UAL] EMA40 w data saved: UAL_ema40_w_20250712_155146.csv
2025-07-12 15:51:46,640 INFO [indicator_service.py:139] [UAL] MACD w data saved: UAL_macd_w_20250712_155146.csv
2025-07-12 15:51:46,646 INFO [indicator_service.py:162] [UAL] Bollinger Bands w data saved: UAL_bollinger_w_20250712_155146.csv
2025-07-12 15:51:46,654 INFO [indicator_service.py:186] [UAL] Ichimoku w data saved: UAL_ichimoku_w_20250712_155146.csv
2025-07-12 15:51:46,658 INFO [indicator_service.py:207] [UAL] RSI w data saved: UAL_rsi_w_20250712_155146.csv
2025-07-12 15:51:46,663 INFO [indicator_service.py:229] [UAL] Stochastic w data saved: UAL_stochastic_w_20250712_155146.csv
2025-07-12 15:51:46,668 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d w data saved: UAL_volume_ratio_5d_w_20250712_155146.csv
2025-07-12 15:51:46,672 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d w data saved: UAL_volume_ratio_20d_w_20250712_155146.csv
2025-07-12 15:51:46,674 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d w data saved: UAL_volume_ratio_40d_w_20250712_155146.csv
2025-07-12 15:51:46,678 INFO [indicator_service.py:116] [UAL] EMA5 m data saved: UAL_ema5_m_20250712_155146.csv
2025-07-12 15:51:46,680 INFO [indicator_service.py:116] [UAL] EMA20 m data saved: UAL_ema20_m_20250712_155146.csv
2025-07-12 15:51:46,682 INFO [indicator_service.py:116] [UAL] EMA40 m data saved: UAL_ema40_m_20250712_155146.csv
2025-07-12 15:51:46,686 INFO [indicator_service.py:139] [UAL] MACD m data saved: UAL_macd_m_20250712_155146.csv
2025-07-12 15:51:46,691 INFO [indicator_service.py:162] [UAL] Bollinger Bands m data saved: UAL_bollinger_m_20250712_155146.csv
2025-07-12 15:51:46,698 INFO [indicator_service.py:186] [UAL] Ichimoku m data saved: UAL_ichimoku_m_20250712_155146.csv
2025-07-12 15:51:46,702 INFO [indicator_service.py:207] [UAL] RSI m data saved: UAL_rsi_m_20250712_155146.csv
2025-07-12 15:51:46,706 INFO [indicator_service.py:229] [UAL] Stochastic m data saved: UAL_stochastic_m_20250712_155146.csv
2025-07-12 15:51:46,710 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d m data saved: UAL_volume_ratio_5d_m_20250712_155146.csv
2025-07-12 15:51:46,712 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d m data saved: UAL_volume_ratio_20d_m_20250712_155146.csv
2025-07-12 15:51:46,714 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d m data saved: UAL_volume_ratio_40d_m_20250712_155146.csv
2025-07-12 15:51:46,715 INFO [indicator_service.py:539] [UAL] All indicators calculated and saved successfully
2025-07-12 15:51:46,715 INFO [chart_service.py:158] [UAL] Indicator calculation and storage completed successfully
2025-07-12 15:51:46,715 INFO [chart_service.py:165] [UAL] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:51:46,718 INFO [analysis_service.py:348] [UAL] Starting AI analysis process...
2025-07-12 15:51:46,719 INFO [analysis_service.py:356] [UAL] Looking for chart files...
2025-07-12 15:51:46,722 INFO [analysis_service.py:413] [UAL] Found Daily chart: UAL_daily_20250712.png
2025-07-12 15:51:46,723 INFO [analysis_service.py:413] [UAL] Found Weekly chart: UAL_weekly_20250712.png
2025-07-12 15:51:46,723 INFO [analysis_service.py:413] [UAL] Found Monthly chart: UAL_monthly_20250712.png
2025-07-12 15:51:46,724 INFO [analysis_service.py:415] [UAL] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:51:46,724 INFO [analysis_service.py:432] [UAL] Chart image transmission disabled - using text-only analysis
2025-07-12 15:51:46,724 INFO [analysis_service.py:439] [UAL] Determining data processing strategy based on market hours...
2025-07-12 15:51:46,724 INFO [analysis_service.py:463] [UAL] US stock - Current EST: 15:51:46, Market hours: True
2025-07-12 15:51:46,725 INFO [analysis_service.py:470] [UAL] Market hours detected - will download fresh data
2025-07-12 15:51:46,725 INFO [analysis_service.py:479] [UAL] Downloading fresh data and calculating new indicators...
2025-07-12 15:51:46,725 INFO [analysis_service.py:155] [UAL] Starting fresh data download and analysis...
2025-07-12 15:51:46,726 INFO [analysis_service.py:163] [UAL] Downloading fresh stock data...
2025-07-12 15:51:46,726 INFO [market_data_service.py:373] [UAL] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:51:46,727 INFO [market_data_service.py:413] [UAL] Trying Yahoo Finance first...
2025-07-12 15:51:46,727 INFO [market_data_service.py:324] [UAL] Downloading chart data (attempt 1/2)...
2025-07-12 15:51:46,728 DEBUG [utils.py:96] Entering history()
2025-07-12 15:51:46,728 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UAL', 1, 0])
2025-07-12 15:51:46,729 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:51:46,730 DEBUG [history.py:165] UAL: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:46,731 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:51:46,731 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:51:46,731 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UAL
2025-07-12 15:51:46,732 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:51:46,732 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:51:46,732 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:51:46,732 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:51:46,804 DEBUG [data.py:179] reusing crumb
2025-07-12 15:51:46,805 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:51:46,805 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:51:46,984 DEBUG [data.py:367] response code=200
2025-07-12 15:51:46,984 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:51:46,985 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:51:46,991 DEBUG [history.py:281] UAL: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:51:46,992 DEBUG [history.py:318] UAL: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:51:46,996 DEBUG [history.py:388] UAL: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:46,998 DEBUG [history.py:467] UAL: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:51:46,999 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:51:46,999 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:51:46,999 INFO [market_data_service.py:337] [UAL] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:51:46,999 INFO [market_data_service.py:417] [UAL] Yahoo Finance successful
2025-07-12 15:51:47,000 INFO [analysis_service.py:178] [UAL] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:51:47,000 INFO [analysis_service.py:181] [UAL] Calculating and saving new indicators...
2025-07-12 15:51:47,000 INFO [indicator_service.py:483] [UAL] Starting comprehensive indicator calculation and storage...
2025-07-12 15:51:47,010 INFO [indicator_service.py:54] [UAL] Daily OHLCV data saved: UAL_ohlcv_d_20250712_155147.csv
2025-07-12 15:51:47,024 INFO [indicator_service.py:68] [UAL] Weekly OHLCV data saved: UAL_ohlcv_w_20250712_155147.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:47,029 INFO [indicator_service.py:82] [UAL] Monthly OHLCV data saved: UAL_ohlcv_m_20250712_155147.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:51:47,096 INFO [indicator_service.py:116] [UAL] EMA5 d data saved: UAL_ema5_d_20250712_155147.csv
2025-07-12 15:51:47,102 INFO [indicator_service.py:116] [UAL] EMA20 d data saved: UAL_ema20_d_20250712_155147.csv
2025-07-12 15:51:47,109 INFO [indicator_service.py:116] [UAL] EMA40 d data saved: UAL_ema40_d_20250712_155147.csv
2025-07-12 15:51:47,123 INFO [indicator_service.py:139] [UAL] MACD d data saved: UAL_macd_d_20250712_155147.csv
2025-07-12 15:51:47,140 INFO [indicator_service.py:162] [UAL] Bollinger Bands d data saved: UAL_bollinger_d_20250712_155147.csv
2025-07-12 15:51:47,159 INFO [indicator_service.py:186] [UAL] Ichimoku d data saved: UAL_ichimoku_d_20250712_155147.csv
2025-07-12 15:51:47,167 INFO [indicator_service.py:207] [UAL] RSI d data saved: UAL_rsi_d_20250712_155147.csv
2025-07-12 15:51:47,179 INFO [indicator_service.py:229] [UAL] Stochastic d data saved: UAL_stochastic_d_20250712_155147.csv
2025-07-12 15:51:47,195 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d d data saved: UAL_volume_ratio_5d_d_20250712_155147.csv
2025-07-12 15:51:47,201 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d d data saved: UAL_volume_ratio_20d_d_20250712_155147.csv
2025-07-12 15:51:47,207 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d d data saved: UAL_volume_ratio_40d_d_20250712_155147.csv
2025-07-12 15:51:47,211 INFO [indicator_service.py:116] [UAL] EMA5 w data saved: UAL_ema5_w_20250712_155147.csv
2025-07-12 15:51:47,214 INFO [indicator_service.py:116] [UAL] EMA20 w data saved: UAL_ema20_w_20250712_155147.csv
2025-07-12 15:51:47,216 INFO [indicator_service.py:116] [UAL] EMA40 w data saved: UAL_ema40_w_20250712_155147.csv
2025-07-12 15:51:47,222 INFO [indicator_service.py:139] [UAL] MACD w data saved: UAL_macd_w_20250712_155147.csv
2025-07-12 15:51:47,226 INFO [indicator_service.py:162] [UAL] Bollinger Bands w data saved: UAL_bollinger_w_20250712_155147.csv
2025-07-12 15:51:47,234 INFO [indicator_service.py:186] [UAL] Ichimoku w data saved: UAL_ichimoku_w_20250712_155147.csv
2025-07-12 15:51:47,238 INFO [indicator_service.py:207] [UAL] RSI w data saved: UAL_rsi_w_20250712_155147.csv
2025-07-12 15:51:47,243 INFO [indicator_service.py:229] [UAL] Stochastic w data saved: UAL_stochastic_w_20250712_155147.csv
2025-07-12 15:51:47,247 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d w data saved: UAL_volume_ratio_5d_w_20250712_155147.csv
2025-07-12 15:51:47,250 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d w data saved: UAL_volume_ratio_20d_w_20250712_155147.csv
2025-07-12 15:51:47,253 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d w data saved: UAL_volume_ratio_40d_w_20250712_155147.csv
2025-07-12 15:51:47,257 INFO [indicator_service.py:116] [UAL] EMA5 m data saved: UAL_ema5_m_20250712_155147.csv
2025-07-12 15:51:47,259 INFO [indicator_service.py:116] [UAL] EMA20 m data saved: UAL_ema20_m_20250712_155147.csv
2025-07-12 15:51:47,261 INFO [indicator_service.py:116] [UAL] EMA40 m data saved: UAL_ema40_m_20250712_155147.csv
2025-07-12 15:51:47,265 INFO [indicator_service.py:139] [UAL] MACD m data saved: UAL_macd_m_20250712_155147.csv
2025-07-12 15:51:47,269 INFO [indicator_service.py:162] [UAL] Bollinger Bands m data saved: UAL_bollinger_m_20250712_155147.csv
2025-07-12 15:51:47,274 INFO [indicator_service.py:186] [UAL] Ichimoku m data saved: UAL_ichimoku_m_20250712_155147.csv
2025-07-12 15:51:47,278 INFO [indicator_service.py:207] [UAL] RSI m data saved: UAL_rsi_m_20250712_155147.csv
2025-07-12 15:51:47,281 INFO [indicator_service.py:229] [UAL] Stochastic m data saved: UAL_stochastic_m_20250712_155147.csv
2025-07-12 15:51:47,286 INFO [indicator_service.py:267] [UAL] Volume Ratio 5d m data saved: UAL_volume_ratio_5d_m_20250712_155147.csv
2025-07-12 15:51:47,288 INFO [indicator_service.py:267] [UAL] Volume Ratio 20d m data saved: UAL_volume_ratio_20d_m_20250712_155147.csv
2025-07-12 15:51:47,290 INFO [indicator_service.py:267] [UAL] Volume Ratio 40d m data saved: UAL_volume_ratio_40d_m_20250712_155147.csv
2025-07-12 15:51:47,290 INFO [indicator_service.py:539] [UAL] All indicators calculated and saved successfully
2025-07-12 15:51:47,356 INFO [analysis_service.py:209] [UAL] Fresh indicators calculated successfully
2025-07-12 15:51:47,357 INFO [analysis_service.py:210] [UAL] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:51:48,084 INFO [analysis_service.py:790] [UAL] Starting Gemini AI analysis...
2025-07-12 15:51:48,085 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 UAL 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:51:48,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:48,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:42', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:51:48,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:51,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:51,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:45', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:51:51,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:54,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:54,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:48', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:51:54,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:51:57,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:51:57,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:51', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:51:57,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:51:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:00,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:00,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:54', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:00,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:03,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:03,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:06:57', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:03,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:06,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:06,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:00', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:06,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:09,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:09,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:03', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:09,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:12,895 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:12,896 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:06', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:12,897 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:15,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:15,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:09', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:15,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:18,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:18,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:12', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:18,892 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:21,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:21,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'progress_percentage': 37.1, 'elapsed_time': '0:07:15', 'estimated_completion': '16:02:58', 'stop_requested': False}
2025-07-12 15:52:21,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:23,087 INFO [analysis_service.py:928] [UAL] Gemini API call completed in 35.00 seconds
2025-07-12 15:52:23,089 INFO [analysis_service.py:931] Gemini raw response text length: 5772
2025-07-12 15:52:23,090 DEBUG [analysis_service.py:932] Gemini analysis raw response: UAL 종목에 대한 기술적 지표 분석 및 스윙 투자자의 매매 타이밍 의견은 다음과 같습니다.

---

**핵심 요약**
1.  UAL은 월봉 기준 장기 하락 추세 후 반등을 시작했으며, 주봉 기준으로는 명확한 상승 추세로 전환되어 주요 저항선을 돌파하며 강한 상승 모멘텀을 보이고 있습니다.
2.  일봉 기준 최근 급등(7/10)으로 단기 과매수 상태이며 조정이 예상되므로, 스윙 투자자는 급등 시 추격 매수보다 조정 시 지지선 확인 후 분할 매수하는 전략이 유효합니다.
3.  매도 시점은 단기 저항선(90~94달러) 돌파 실패 시 또는 주봉상 MACD 매도 신호나 볼린저밴드 상단 이탈 후 재진입 실패 시 고려하며, 월봉상 장기 저항선 돌파 여부를 주시해야 합니다.

---

**상세 분석**

UAL 종목은 최근 일봉, 주봉, 월봉에서 각기 다른 양상의 움직임을 보이고 있어, 다중 시간대 분석이 중요합니다.

### **1. 일봉 분석 (Daily Chart)**

*   **가격 ...
2025-07-12 15:52:23,091 INFO [analysis_service.py:792] [UAL] Gemini AI analysis completed. Success: True
2025-07-12 15:52:23,092 INFO [analysis_service.py:797] [UAL] Extracting summary from Gemini analysis...
2025-07-12 15:52:23,093 INFO [analysis_service.py:799] [UAL] Summary extracted successfully
2025-07-12 15:52:23,094 INFO [analysis_service.py:802] [UAL] Getting indicator data for analysis...
2025-07-12 15:52:23,327 INFO [analysis_service.py:806] [UAL] Saving HTML analysis file...
2025-07-12 15:52:23,329 INFO [analysis_service.py:834] [UAL] HTML analysis file saved successfully with app_context
2025-07-12 15:52:23,330 INFO [analysis_service.py:840] [UAL] AI analysis process completed successfully
2025-07-12 15:52:23,367 INFO [batch_analysis_service.py:435] [UAL] New analysis completed successfully
2025-07-12 15:52:23,368 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:52:23,368 INFO [progress_service.py:24] Input params: ticker=DAL, processed=14, total=35, list_name=03 Watch (14/21)
2025-07-12 15:52:23,368 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UAL', 'current_list': '03 Watch (13/21)', 'total_tickers': 35, 'processed_tickers': 13, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 58, 578615), 'stop_requested': False}
2025-07-12 15:52:23,369 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:23,370 INFO [chart_service.py:116] [DAL] Starting chart generation process...
2025-07-12 15:52:23,371 INFO [chart_service.py:123] [DAL] Downloading data from yfinance...
2025-07-12 15:52:23,371 INFO [market_data_service.py:373] [DAL] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:52:23,372 INFO [market_data_service.py:413] [DAL] Trying Yahoo Finance first...
2025-07-12 15:52:23,372 INFO [market_data_service.py:324] [DAL] Downloading chart data (attempt 1/2)...
2025-07-12 15:52:23,373 DEBUG [utils.py:96] Entering history()
2025-07-12 15:52:23,373 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DAL', 1, 0])
2025-07-12 15:52:23,375 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:52:23,375 DEBUG [history.py:165] DAL: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:52:23,376 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:52:23,376 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:52:23,377 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DAL
2025-07-12 15:52:23,377 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:52:23,378 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:52:23,378 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:52:23,378 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:52:23,484 DEBUG [data.py:179] reusing crumb
2025-07-12 15:52:23,485 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:52:23,486 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:52:23,702 DEBUG [data.py:367] response code=200
2025-07-12 15:52:23,703 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:52:23,704 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:52:23,714 DEBUG [history.py:281] DAL: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:52:23,717 DEBUG [history.py:318] DAL: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:52:23,734 DEBUG [history.py:388] DAL: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:52:23,737 DEBUG [history.py:467] DAL: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:52:23,737 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:52:23,738 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:52:23,738 INFO [market_data_service.py:337] [DAL] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:52:23,739 INFO [market_data_service.py:417] [DAL] Yahoo Finance successful
2025-07-12 15:52:23,739 INFO [chart_service.py:125] [DAL] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:52:23,740 INFO [chart_service.py:142] [DAL] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:52:23,792 WARNING [chart_service.py:217] [DAL] No saved MACD data found for d, calculating directly
2025-07-12 15:52:24,179 WARNING [chart_service.py:217] [DAL] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:52:24,614 WARNING [chart_service.py:217] [DAL] No saved MACD data found for m, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:52:24,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:24,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:18', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:24,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:24,929 INFO [chart_service.py:154] [DAL] Starting integrated indicator calculation and storage...
2025-07-12 15:52:24,930 INFO [indicator_service.py:483] [DAL] Starting comprehensive indicator calculation and storage...
2025-07-12 15:52:24,939 INFO [indicator_service.py:54] [DAL] Daily OHLCV data saved: DAL_ohlcv_d_20250712_155224.csv
2025-07-12 15:52:24,949 INFO [indicator_service.py:68] [DAL] Weekly OHLCV data saved: DAL_ohlcv_w_20250712_155224.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:52:24,955 INFO [indicator_service.py:82] [DAL] Monthly OHLCV data saved: DAL_ohlcv_m_20250712_155224.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:52:24,974 INFO [indicator_service.py:116] [DAL] EMA5 d data saved: DAL_ema5_d_20250712_155224.csv
2025-07-12 15:52:24,981 INFO [indicator_service.py:116] [DAL] EMA20 d data saved: DAL_ema20_d_20250712_155224.csv
2025-07-12 15:52:24,988 INFO [indicator_service.py:116] [DAL] EMA40 d data saved: DAL_ema40_d_20250712_155224.csv
2025-07-12 15:52:25,000 INFO [indicator_service.py:139] [DAL] MACD d data saved: DAL_macd_d_20250712_155224.csv
2025-07-12 15:52:25,013 INFO [indicator_service.py:162] [DAL] Bollinger Bands d data saved: DAL_bollinger_d_20250712_155224.csv
2025-07-12 15:52:25,028 INFO [indicator_service.py:186] [DAL] Ichimoku d data saved: DAL_ichimoku_d_20250712_155224.csv
2025-07-12 15:52:25,037 INFO [indicator_service.py:207] [DAL] RSI d data saved: DAL_rsi_d_20250712_155224.csv
2025-07-12 15:52:25,046 INFO [indicator_service.py:229] [DAL] Stochastic d data saved: DAL_stochastic_d_20250712_155224.csv
2025-07-12 15:52:25,054 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d d data saved: DAL_volume_ratio_5d_d_20250712_155224.csv
2025-07-12 15:52:25,059 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d d data saved: DAL_volume_ratio_20d_d_20250712_155224.csv
2025-07-12 15:52:25,065 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d d data saved: DAL_volume_ratio_40d_d_20250712_155224.csv
2025-07-12 15:52:25,070 INFO [indicator_service.py:116] [DAL] EMA5 w data saved: DAL_ema5_w_20250712_155224.csv
2025-07-12 15:52:25,073 INFO [indicator_service.py:116] [DAL] EMA20 w data saved: DAL_ema20_w_20250712_155224.csv
2025-07-12 15:52:25,076 INFO [indicator_service.py:116] [DAL] EMA40 w data saved: DAL_ema40_w_20250712_155224.csv
2025-07-12 15:52:25,081 INFO [indicator_service.py:139] [DAL] MACD w data saved: DAL_macd_w_20250712_155224.csv
2025-07-12 15:52:25,088 INFO [indicator_service.py:162] [DAL] Bollinger Bands w data saved: DAL_bollinger_w_20250712_155224.csv
2025-07-12 15:52:25,098 INFO [indicator_service.py:186] [DAL] Ichimoku w data saved: DAL_ichimoku_w_20250712_155224.csv
2025-07-12 15:52:25,105 INFO [indicator_service.py:207] [DAL] RSI w data saved: DAL_rsi_w_20250712_155224.csv
2025-07-12 15:52:25,110 INFO [indicator_service.py:229] [DAL] Stochastic w data saved: DAL_stochastic_w_20250712_155224.csv
2025-07-12 15:52:25,124 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d w data saved: DAL_volume_ratio_5d_w_20250712_155224.csv
2025-07-12 15:52:25,127 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d w data saved: DAL_volume_ratio_20d_w_20250712_155224.csv
2025-07-12 15:52:25,130 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d w data saved: DAL_volume_ratio_40d_w_20250712_155224.csv
2025-07-12 15:52:25,135 INFO [indicator_service.py:116] [DAL] EMA5 m data saved: DAL_ema5_m_20250712_155224.csv
2025-07-12 15:52:25,137 INFO [indicator_service.py:116] [DAL] EMA20 m data saved: DAL_ema20_m_20250712_155224.csv
2025-07-12 15:52:25,139 INFO [indicator_service.py:116] [DAL] EMA40 m data saved: DAL_ema40_m_20250712_155224.csv
2025-07-12 15:52:25,143 INFO [indicator_service.py:139] [DAL] MACD m data saved: DAL_macd_m_20250712_155224.csv
2025-07-12 15:52:25,148 INFO [indicator_service.py:162] [DAL] Bollinger Bands m data saved: DAL_bollinger_m_20250712_155224.csv
2025-07-12 15:52:25,154 INFO [indicator_service.py:186] [DAL] Ichimoku m data saved: DAL_ichimoku_m_20250712_155224.csv
2025-07-12 15:52:25,157 INFO [indicator_service.py:207] [DAL] RSI m data saved: DAL_rsi_m_20250712_155224.csv
2025-07-12 15:52:25,161 INFO [indicator_service.py:229] [DAL] Stochastic m data saved: DAL_stochastic_m_20250712_155224.csv
2025-07-12 15:52:25,166 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d m data saved: DAL_volume_ratio_5d_m_20250712_155224.csv
2025-07-12 15:52:25,168 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d m data saved: DAL_volume_ratio_20d_m_20250712_155224.csv
2025-07-12 15:52:25,171 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d m data saved: DAL_volume_ratio_40d_m_20250712_155224.csv
2025-07-12 15:52:25,171 INFO [indicator_service.py:539] [DAL] All indicators calculated and saved successfully
2025-07-12 15:52:25,172 INFO [chart_service.py:158] [DAL] Indicator calculation and storage completed successfully
2025-07-12 15:52:25,172 INFO [chart_service.py:165] [DAL] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:52:25,175 INFO [analysis_service.py:348] [DAL] Starting AI analysis process...
2025-07-12 15:52:25,175 INFO [analysis_service.py:356] [DAL] Looking for chart files...
2025-07-12 15:52:25,179 INFO [analysis_service.py:413] [DAL] Found Daily chart: DAL_daily_20250712.png
2025-07-12 15:52:25,179 INFO [analysis_service.py:413] [DAL] Found Weekly chart: DAL_weekly_20250712.png
2025-07-12 15:52:25,179 INFO [analysis_service.py:413] [DAL] Found Monthly chart: DAL_monthly_20250712.png
2025-07-12 15:52:25,179 INFO [analysis_service.py:415] [DAL] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:52:25,180 INFO [analysis_service.py:432] [DAL] Chart image transmission disabled - using text-only analysis
2025-07-12 15:52:25,180 INFO [analysis_service.py:439] [DAL] Determining data processing strategy based on market hours...
2025-07-12 15:52:25,180 INFO [analysis_service.py:463] [DAL] US stock - Current EST: 15:52:25, Market hours: True
2025-07-12 15:52:25,180 INFO [analysis_service.py:470] [DAL] Market hours detected - will download fresh data
2025-07-12 15:52:25,181 INFO [analysis_service.py:479] [DAL] Downloading fresh data and calculating new indicators...
2025-07-12 15:52:25,181 INFO [analysis_service.py:155] [DAL] Starting fresh data download and analysis...
2025-07-12 15:52:25,181 INFO [analysis_service.py:163] [DAL] Downloading fresh stock data...
2025-07-12 15:52:25,181 INFO [market_data_service.py:373] [DAL] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:52:25,182 INFO [market_data_service.py:413] [DAL] Trying Yahoo Finance first...
2025-07-12 15:52:25,182 INFO [market_data_service.py:324] [DAL] Downloading chart data (attempt 1/2)...
2025-07-12 15:52:25,182 DEBUG [utils.py:96] Entering history()
2025-07-12 15:52:25,183 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DAL', 1, 0])
2025-07-12 15:52:25,184 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:52:25,184 DEBUG [history.py:165] DAL: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:52:25,185 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:52:25,185 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:52:25,185 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DAL
2025-07-12 15:52:25,185 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:52:25,186 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:52:25,186 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:52:25,186 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:52:25,269 DEBUG [data.py:179] reusing crumb
2025-07-12 15:52:25,269 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:52:25,270 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:52:25,480 DEBUG [data.py:367] response code=200
2025-07-12 15:52:25,480 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:52:25,481 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:52:25,488 DEBUG [history.py:281] DAL: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:52:25,489 DEBUG [history.py:318] DAL: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:52:25,496 DEBUG [history.py:388] DAL: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:52:25,498 DEBUG [history.py:467] DAL: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:52:25,499 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:52:25,499 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:52:25,499 INFO [market_data_service.py:337] [DAL] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:52:25,500 INFO [market_data_service.py:417] [DAL] Yahoo Finance successful
2025-07-12 15:52:25,501 INFO [analysis_service.py:178] [DAL] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:52:25,501 INFO [analysis_service.py:181] [DAL] Calculating and saving new indicators...
2025-07-12 15:52:25,502 INFO [indicator_service.py:483] [DAL] Starting comprehensive indicator calculation and storage...
2025-07-12 15:52:25,512 INFO [indicator_service.py:54] [DAL] Daily OHLCV data saved: DAL_ohlcv_d_20250712_155225.csv
2025-07-12 15:52:25,522 INFO [indicator_service.py:68] [DAL] Weekly OHLCV data saved: DAL_ohlcv_w_20250712_155225.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:52:25,527 INFO [indicator_service.py:82] [DAL] Monthly OHLCV data saved: DAL_ohlcv_m_20250712_155225.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:52:25,551 INFO [indicator_service.py:116] [DAL] EMA5 d data saved: DAL_ema5_d_20250712_155225.csv
2025-07-12 15:52:25,558 INFO [indicator_service.py:116] [DAL] EMA20 d data saved: DAL_ema20_d_20250712_155225.csv
2025-07-12 15:52:25,565 INFO [indicator_service.py:116] [DAL] EMA40 d data saved: DAL_ema40_d_20250712_155225.csv
2025-07-12 15:52:25,580 INFO [indicator_service.py:139] [DAL] MACD d data saved: DAL_macd_d_20250712_155225.csv
2025-07-12 15:52:25,608 INFO [indicator_service.py:162] [DAL] Bollinger Bands d data saved: DAL_bollinger_d_20250712_155225.csv
2025-07-12 15:52:25,625 INFO [indicator_service.py:186] [DAL] Ichimoku d data saved: DAL_ichimoku_d_20250712_155225.csv
2025-07-12 15:52:25,633 INFO [indicator_service.py:207] [DAL] RSI d data saved: DAL_rsi_d_20250712_155225.csv
2025-07-12 15:52:25,643 INFO [indicator_service.py:229] [DAL] Stochastic d data saved: DAL_stochastic_d_20250712_155225.csv
2025-07-12 15:52:25,651 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d d data saved: DAL_volume_ratio_5d_d_20250712_155225.csv
2025-07-12 15:52:25,656 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d d data saved: DAL_volume_ratio_20d_d_20250712_155225.csv
2025-07-12 15:52:25,662 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d d data saved: DAL_volume_ratio_40d_d_20250712_155225.csv
2025-07-12 15:52:25,666 INFO [indicator_service.py:116] [DAL] EMA5 w data saved: DAL_ema5_w_20250712_155225.csv
2025-07-12 15:52:25,669 INFO [indicator_service.py:116] [DAL] EMA20 w data saved: DAL_ema20_w_20250712_155225.csv
2025-07-12 15:52:25,672 INFO [indicator_service.py:116] [DAL] EMA40 w data saved: DAL_ema40_w_20250712_155225.csv
2025-07-12 15:52:25,678 INFO [indicator_service.py:139] [DAL] MACD w data saved: DAL_macd_w_20250712_155225.csv
2025-07-12 15:52:25,684 INFO [indicator_service.py:162] [DAL] Bollinger Bands w data saved: DAL_bollinger_w_20250712_155225.csv
2025-07-12 15:52:25,694 INFO [indicator_service.py:186] [DAL] Ichimoku w data saved: DAL_ichimoku_w_20250712_155225.csv
2025-07-12 15:52:25,698 INFO [indicator_service.py:207] [DAL] RSI w data saved: DAL_rsi_w_20250712_155225.csv
2025-07-12 15:52:25,703 INFO [indicator_service.py:229] [DAL] Stochastic w data saved: DAL_stochastic_w_20250712_155225.csv
2025-07-12 15:52:25,710 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d w data saved: DAL_volume_ratio_5d_w_20250712_155225.csv
2025-07-12 15:52:25,712 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d w data saved: DAL_volume_ratio_20d_w_20250712_155225.csv
2025-07-12 15:52:25,714 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d w data saved: DAL_volume_ratio_40d_w_20250712_155225.csv
2025-07-12 15:52:25,718 INFO [indicator_service.py:116] [DAL] EMA5 m data saved: DAL_ema5_m_20250712_155225.csv
2025-07-12 15:52:25,720 INFO [indicator_service.py:116] [DAL] EMA20 m data saved: DAL_ema20_m_20250712_155225.csv
2025-07-12 15:52:25,722 INFO [indicator_service.py:116] [DAL] EMA40 m data saved: DAL_ema40_m_20250712_155225.csv
2025-07-12 15:52:25,726 INFO [indicator_service.py:139] [DAL] MACD m data saved: DAL_macd_m_20250712_155225.csv
2025-07-12 15:52:25,730 INFO [indicator_service.py:162] [DAL] Bollinger Bands m data saved: DAL_bollinger_m_20250712_155225.csv
2025-07-12 15:52:25,736 INFO [indicator_service.py:186] [DAL] Ichimoku m data saved: DAL_ichimoku_m_20250712_155225.csv
2025-07-12 15:52:25,739 INFO [indicator_service.py:207] [DAL] RSI m data saved: DAL_rsi_m_20250712_155225.csv
2025-07-12 15:52:25,743 INFO [indicator_service.py:229] [DAL] Stochastic m data saved: DAL_stochastic_m_20250712_155225.csv
2025-07-12 15:52:25,747 INFO [indicator_service.py:267] [DAL] Volume Ratio 5d m data saved: DAL_volume_ratio_5d_m_20250712_155225.csv
2025-07-12 15:52:25,750 INFO [indicator_service.py:267] [DAL] Volume Ratio 20d m data saved: DAL_volume_ratio_20d_m_20250712_155225.csv
2025-07-12 15:52:25,752 INFO [indicator_service.py:267] [DAL] Volume Ratio 40d m data saved: DAL_volume_ratio_40d_m_20250712_155225.csv
2025-07-12 15:52:25,753 INFO [indicator_service.py:539] [DAL] All indicators calculated and saved successfully
2025-07-12 15:52:25,817 INFO [analysis_service.py:209] [DAL] Fresh indicators calculated successfully
2025-07-12 15:52:25,817 INFO [analysis_service.py:210] [DAL] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:52:26,557 INFO [analysis_service.py:790] [DAL] Starting Gemini AI analysis...
2025-07-12 15:52:26,557 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 DAL 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:52:27,895 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:27,896 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:21', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:27,897 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:30,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:30,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:24', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:30,892 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:33,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:33,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:27', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:33,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:36,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:36,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:30', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:36,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:39,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:39,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:33', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:39,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:42,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:42,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:36', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:42,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:45,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:45,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:39', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:45,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:48,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:48,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:42', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:48,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:51,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:51,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:45', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:51,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:54,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:54,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:48', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:54,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:52:57,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:52:57,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:51', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:52:57,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:52:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:00,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:53:00,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:54', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:53:00,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:03,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:53:03,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:07:57', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:53:03,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:06,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:53:06,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'progress_percentage': 40.0, 'elapsed_time': '0:08:00', 'estimated_completion': '16:03:18', 'stop_requested': False}
2025-07-12 15:53:06,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:07,824 INFO [analysis_service.py:928] [DAL] Gemini API call completed in 41.27 seconds
2025-07-12 15:53:07,825 INFO [analysis_service.py:931] Gemini raw response text length: 7335
2025-07-12 15:53:07,826 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  DAL 종목은 최근 일봉상 대량 거래량을 동반한 50달러 후반대 가격 급등으로 강력한 단기 상승 모멘텀을 확보하며 모든 단기 기술 지표에서 강한 매수 신호를 보이고 있습니다.
2.  주봉상으로도 바닥을 다지고 주요 이동평균선을 상향 돌파하며 중기적 추세 전환의 가능성을 시사하고 있으나, 월봉상으로는 여전히 장기 하락 추세의 저항권 내에서 회복을 시도하는 단계입니다.
3.  스윙 투자자는 급등에 따른 단기 과열을 인지하고 5일 또는 20일 EMA 근처의 가격 조정 시 분할 매수 기회를 모색하며, 60달러 초반의 주봉상 저항대 도달 시 이익 실현을 고려하고 급등 이전 지지선(약 50.50달러) 아래로 손절매 라인을 설정하는 것이 좋습니다.

---

**상세 분석**

주어진 DAL 종목의 OHLCV 데이터를 기반으로 EMA(지수 이동 평균), MACD(이동 평균 수렴 확산), 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하고 분석하여 스윙 투자자의 매...
2025-07-12 15:53:07,827 INFO [analysis_service.py:792] [DAL] Gemini AI analysis completed. Success: True
2025-07-12 15:53:07,828 INFO [analysis_service.py:797] [DAL] Extracting summary from Gemini analysis...
2025-07-12 15:53:07,829 INFO [analysis_service.py:799] [DAL] Summary extracted successfully
2025-07-12 15:53:07,829 INFO [analysis_service.py:802] [DAL] Getting indicator data for analysis...
2025-07-12 15:53:08,055 INFO [analysis_service.py:806] [DAL] Saving HTML analysis file...
2025-07-12 15:53:08,056 INFO [analysis_service.py:834] [DAL] HTML analysis file saved successfully with app_context
2025-07-12 15:53:08,057 INFO [analysis_service.py:840] [DAL] AI analysis process completed successfully
2025-07-12 15:53:08,089 INFO [batch_analysis_service.py:435] [DAL] New analysis completed successfully
2025-07-12 15:53:08,090 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:53:08,090 INFO [progress_service.py:24] Input params: ticker=WMT, processed=15, total=35, list_name=03 Watch (15/21)
2025-07-12 15:53:08,090 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DAL', 'current_list': '03 Watch (14/21)', 'total_tickers': 35, 'processed_tickers': 14, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 18, 541986), 'stop_requested': False}
2025-07-12 15:53:08,091 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:08,092 INFO [chart_service.py:116] [WMT] Starting chart generation process...
2025-07-12 15:53:08,093 INFO [chart_service.py:123] [WMT] Downloading data from yfinance...
2025-07-12 15:53:08,093 INFO [market_data_service.py:373] [WMT] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:53:08,094 INFO [market_data_service.py:413] [WMT] Trying Yahoo Finance first...
2025-07-12 15:53:08,094 INFO [market_data_service.py:324] [WMT] Downloading chart data (attempt 1/2)...
2025-07-12 15:53:08,095 DEBUG [utils.py:96] Entering history()
2025-07-12 15:53:08,095 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['WMT', 1, 0])
2025-07-12 15:53:08,096 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:53:08,097 DEBUG [history.py:165] WMT: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:08,098 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:53:08,098 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:53:08,099 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/WMT
2025-07-12 15:53:08,099 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:08,099 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:53:08,100 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:53:08,100 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:53:08,246 DEBUG [data.py:179] reusing crumb
2025-07-12 15:53:08,247 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:53:08,247 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:53:08,545 DEBUG [data.py:367] response code=200
2025-07-12 15:53:08,545 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:53:08,546 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:53:08,552 DEBUG [history.py:281] WMT: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:53:08,554 DEBUG [history.py:318] WMT: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:53:08,570 DEBUG [history.py:388] WMT: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:08,573 DEBUG [history.py:467] WMT: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:08,573 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:53:08,574 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:53:08,574 INFO [market_data_service.py:337] [WMT] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:53:08,574 INFO [market_data_service.py:417] [WMT] Yahoo Finance successful
2025-07-12 15:53:08,574 INFO [chart_service.py:125] [WMT] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:53:08,576 INFO [chart_service.py:142] [WMT] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:53:08,633 WARNING [chart_service.py:217] [WMT] No saved MACD data found for d, calculating directly
2025-07-12 15:53:09,089 WARNING [chart_service.py:217] [WMT] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:53:09,519 WARNING [chart_service.py:217] [WMT] No saved MACD data found for m, calculating directly
2025-07-12 15:53:09,813 INFO [chart_service.py:154] [WMT] Starting integrated indicator calculation and storage...
2025-07-12 15:53:09,814 INFO [indicator_service.py:483] [WMT] Starting comprehensive indicator calculation and storage...
2025-07-12 15:53:09,826 INFO [indicator_service.py:54] [WMT] Daily OHLCV data saved: WMT_ohlcv_d_20250712_155309.csv
2025-07-12 15:53:09,835 INFO [indicator_service.py:68] [WMT] Weekly OHLCV data saved: WMT_ohlcv_w_20250712_155309.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:09,841 INFO [indicator_service.py:82] [WMT] Monthly OHLCV data saved: WMT_ohlcv_m_20250712_155309.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:09,858 INFO [indicator_service.py:116] [WMT] EMA5 d data saved: WMT_ema5_d_20250712_155309.csv
2025-07-12 15:53:09,864 INFO [indicator_service.py:116] [WMT] EMA20 d data saved: WMT_ema20_d_20250712_155309.csv
2025-07-12 15:53:09,871 INFO [indicator_service.py:116] [WMT] EMA40 d data saved: WMT_ema40_d_20250712_155309.csv
2025-07-12 15:53:09,881 INFO [indicator_service.py:139] [WMT] MACD d data saved: WMT_macd_d_20250712_155309.csv
2025-07-12 15:53:09,895 INFO [indicator_service.py:162] [WMT] Bollinger Bands d data saved: WMT_bollinger_d_20250712_155309.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:53:09,914 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:09,915 INFO [indicator_service.py:186] [WMT] Ichimoku d data saved: WMT_ichimoku_d_20250712_155309.csv
2025-07-12 15:53:09,915 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:03', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:09,918 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:09,928 INFO [indicator_service.py:207] [WMT] RSI d data saved: WMT_rsi_d_20250712_155309.csv
2025-07-12 15:53:09,938 INFO [indicator_service.py:229] [WMT] Stochastic d data saved: WMT_stochastic_d_20250712_155309.csv
2025-07-12 15:53:09,946 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d d data saved: WMT_volume_ratio_5d_d_20250712_155309.csv
2025-07-12 15:53:09,952 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d d data saved: WMT_volume_ratio_20d_d_20250712_155309.csv
2025-07-12 15:53:09,957 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d d data saved: WMT_volume_ratio_40d_d_20250712_155309.csv
2025-07-12 15:53:09,961 INFO [indicator_service.py:116] [WMT] EMA5 w data saved: WMT_ema5_w_20250712_155309.csv
2025-07-12 15:53:09,964 INFO [indicator_service.py:116] [WMT] EMA20 w data saved: WMT_ema20_w_20250712_155309.csv
2025-07-12 15:53:09,967 INFO [indicator_service.py:116] [WMT] EMA40 w data saved: WMT_ema40_w_20250712_155309.csv
2025-07-12 15:53:09,972 INFO [indicator_service.py:139] [WMT] MACD w data saved: WMT_macd_w_20250712_155309.csv
2025-07-12 15:53:09,978 INFO [indicator_service.py:162] [WMT] Bollinger Bands w data saved: WMT_bollinger_w_20250712_155309.csv
2025-07-12 15:53:09,986 INFO [indicator_service.py:186] [WMT] Ichimoku w data saved: WMT_ichimoku_w_20250712_155309.csv
2025-07-12 15:53:09,990 INFO [indicator_service.py:207] [WMT] RSI w data saved: WMT_rsi_w_20250712_155309.csv
2025-07-12 15:53:09,994 INFO [indicator_service.py:229] [WMT] Stochastic w data saved: WMT_stochastic_w_20250712_155309.csv
2025-07-12 15:53:09,999 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d w data saved: WMT_volume_ratio_5d_w_20250712_155309.csv
2025-07-12 15:53:10,003 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d w data saved: WMT_volume_ratio_20d_w_20250712_155309.csv
2025-07-12 15:53:10,006 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d w data saved: WMT_volume_ratio_40d_w_20250712_155309.csv
2025-07-12 15:53:10,009 INFO [indicator_service.py:116] [WMT] EMA5 m data saved: WMT_ema5_m_20250712_155309.csv
2025-07-12 15:53:10,011 INFO [indicator_service.py:116] [WMT] EMA20 m data saved: WMT_ema20_m_20250712_155309.csv
2025-07-12 15:53:10,013 INFO [indicator_service.py:116] [WMT] EMA40 m data saved: WMT_ema40_m_20250712_155309.csv
2025-07-12 15:53:10,018 INFO [indicator_service.py:139] [WMT] MACD m data saved: WMT_macd_m_20250712_155309.csv
2025-07-12 15:53:10,022 INFO [indicator_service.py:162] [WMT] Bollinger Bands m data saved: WMT_bollinger_m_20250712_155309.csv
2025-07-12 15:53:10,028 INFO [indicator_service.py:186] [WMT] Ichimoku m data saved: WMT_ichimoku_m_20250712_155309.csv
2025-07-12 15:53:10,032 INFO [indicator_service.py:207] [WMT] RSI m data saved: WMT_rsi_m_20250712_155309.csv
2025-07-12 15:53:10,036 INFO [indicator_service.py:229] [WMT] Stochastic m data saved: WMT_stochastic_m_20250712_155309.csv
2025-07-12 15:53:10,040 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d m data saved: WMT_volume_ratio_5d_m_20250712_155309.csv
2025-07-12 15:53:10,042 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d m data saved: WMT_volume_ratio_20d_m_20250712_155309.csv
2025-07-12 15:53:10,045 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d m data saved: WMT_volume_ratio_40d_m_20250712_155309.csv
2025-07-12 15:53:10,045 INFO [indicator_service.py:539] [WMT] All indicators calculated and saved successfully
2025-07-12 15:53:10,045 INFO [chart_service.py:158] [WMT] Indicator calculation and storage completed successfully
2025-07-12 15:53:10,045 INFO [chart_service.py:165] [WMT] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:53:10,048 INFO [analysis_service.py:348] [WMT] Starting AI analysis process...
2025-07-12 15:53:10,048 INFO [analysis_service.py:356] [WMT] Looking for chart files...
2025-07-12 15:53:10,053 INFO [analysis_service.py:413] [WMT] Found Daily chart: WMT_daily_20250712.png
2025-07-12 15:53:10,053 INFO [analysis_service.py:413] [WMT] Found Weekly chart: WMT_weekly_20250712.png
2025-07-12 15:53:10,053 INFO [analysis_service.py:413] [WMT] Found Monthly chart: WMT_monthly_20250712.png
2025-07-12 15:53:10,053 INFO [analysis_service.py:415] [WMT] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:53:10,054 INFO [analysis_service.py:432] [WMT] Chart image transmission disabled - using text-only analysis
2025-07-12 15:53:10,054 INFO [analysis_service.py:439] [WMT] Determining data processing strategy based on market hours...
2025-07-12 15:53:10,054 INFO [analysis_service.py:463] [WMT] US stock - Current EST: 15:53:10, Market hours: True
2025-07-12 15:53:10,054 INFO [analysis_service.py:470] [WMT] Market hours detected - will download fresh data
2025-07-12 15:53:10,055 INFO [analysis_service.py:479] [WMT] Downloading fresh data and calculating new indicators...
2025-07-12 15:53:10,055 INFO [analysis_service.py:155] [WMT] Starting fresh data download and analysis...
2025-07-12 15:53:10,055 INFO [analysis_service.py:163] [WMT] Downloading fresh stock data...
2025-07-12 15:53:10,055 INFO [market_data_service.py:373] [WMT] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:53:10,056 INFO [market_data_service.py:413] [WMT] Trying Yahoo Finance first...
2025-07-12 15:53:10,056 INFO [market_data_service.py:324] [WMT] Downloading chart data (attempt 1/2)...
2025-07-12 15:53:10,056 DEBUG [utils.py:96] Entering history()
2025-07-12 15:53:10,057 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['WMT', 1, 0])
2025-07-12 15:53:10,058 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:53:10,058 DEBUG [history.py:165] WMT: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:10,059 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:53:10,059 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:53:10,059 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/WMT
2025-07-12 15:53:10,059 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:10,059 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:53:10,059 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:53:10,060 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:53:10,167 DEBUG [data.py:179] reusing crumb
2025-07-12 15:53:10,167 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:53:10,168 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:53:10,375 DEBUG [data.py:367] response code=200
2025-07-12 15:53:10,375 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:53:10,376 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:53:10,380 DEBUG [history.py:281] WMT: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:53:10,382 DEBUG [history.py:318] WMT: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:53:10,397 DEBUG [history.py:388] WMT: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:10,400 DEBUG [history.py:467] WMT: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:10,401 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:53:10,401 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:53:10,401 INFO [market_data_service.py:337] [WMT] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:53:10,402 INFO [market_data_service.py:417] [WMT] Yahoo Finance successful
2025-07-12 15:53:10,402 INFO [analysis_service.py:178] [WMT] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:53:10,403 INFO [analysis_service.py:181] [WMT] Calculating and saving new indicators...
2025-07-12 15:53:10,403 INFO [indicator_service.py:483] [WMT] Starting comprehensive indicator calculation and storage...
2025-07-12 15:53:10,415 INFO [indicator_service.py:54] [WMT] Daily OHLCV data saved: WMT_ohlcv_d_20250712_155310.csv
2025-07-12 15:53:10,424 INFO [indicator_service.py:68] [WMT] Weekly OHLCV data saved: WMT_ohlcv_w_20250712_155310.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:10,431 INFO [indicator_service.py:82] [WMT] Monthly OHLCV data saved: WMT_ohlcv_m_20250712_155310.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:10,447 INFO [indicator_service.py:116] [WMT] EMA5 d data saved: WMT_ema5_d_20250712_155310.csv
2025-07-12 15:53:10,454 INFO [indicator_service.py:116] [WMT] EMA20 d data saved: WMT_ema20_d_20250712_155310.csv
2025-07-12 15:53:10,459 INFO [indicator_service.py:116] [WMT] EMA40 d data saved: WMT_ema40_d_20250712_155310.csv
2025-07-12 15:53:10,471 INFO [indicator_service.py:139] [WMT] MACD d data saved: WMT_macd_d_20250712_155310.csv
2025-07-12 15:53:10,482 INFO [indicator_service.py:162] [WMT] Bollinger Bands d data saved: WMT_bollinger_d_20250712_155310.csv
2025-07-12 15:53:10,497 INFO [indicator_service.py:186] [WMT] Ichimoku d data saved: WMT_ichimoku_d_20250712_155310.csv
2025-07-12 15:53:10,504 INFO [indicator_service.py:207] [WMT] RSI d data saved: WMT_rsi_d_20250712_155310.csv
2025-07-12 15:53:10,513 INFO [indicator_service.py:229] [WMT] Stochastic d data saved: WMT_stochastic_d_20250712_155310.csv
2025-07-12 15:53:10,522 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d d data saved: WMT_volume_ratio_5d_d_20250712_155310.csv
2025-07-12 15:53:10,528 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d d data saved: WMT_volume_ratio_20d_d_20250712_155310.csv
2025-07-12 15:53:10,536 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d d data saved: WMT_volume_ratio_40d_d_20250712_155310.csv
2025-07-12 15:53:10,541 INFO [indicator_service.py:116] [WMT] EMA5 w data saved: WMT_ema5_w_20250712_155310.csv
2025-07-12 15:53:10,545 INFO [indicator_service.py:116] [WMT] EMA20 w data saved: WMT_ema20_w_20250712_155310.csv
2025-07-12 15:53:10,549 INFO [indicator_service.py:116] [WMT] EMA40 w data saved: WMT_ema40_w_20250712_155310.csv
2025-07-12 15:53:10,557 INFO [indicator_service.py:139] [WMT] MACD w data saved: WMT_macd_w_20250712_155310.csv
2025-07-12 15:53:10,563 INFO [indicator_service.py:162] [WMT] Bollinger Bands w data saved: WMT_bollinger_w_20250712_155310.csv
2025-07-12 15:53:10,573 INFO [indicator_service.py:186] [WMT] Ichimoku w data saved: WMT_ichimoku_w_20250712_155310.csv
2025-07-12 15:53:10,578 INFO [indicator_service.py:207] [WMT] RSI w data saved: WMT_rsi_w_20250712_155310.csv
2025-07-12 15:53:10,583 INFO [indicator_service.py:229] [WMT] Stochastic w data saved: WMT_stochastic_w_20250712_155310.csv
2025-07-12 15:53:10,590 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d w data saved: WMT_volume_ratio_5d_w_20250712_155310.csv
2025-07-12 15:53:10,593 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d w data saved: WMT_volume_ratio_20d_w_20250712_155310.csv
2025-07-12 15:53:10,595 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d w data saved: WMT_volume_ratio_40d_w_20250712_155310.csv
2025-07-12 15:53:10,598 INFO [indicator_service.py:116] [WMT] EMA5 m data saved: WMT_ema5_m_20250712_155310.csv
2025-07-12 15:53:10,600 INFO [indicator_service.py:116] [WMT] EMA20 m data saved: WMT_ema20_m_20250712_155310.csv
2025-07-12 15:53:10,603 INFO [indicator_service.py:116] [WMT] EMA40 m data saved: WMT_ema40_m_20250712_155310.csv
2025-07-12 15:53:10,607 INFO [indicator_service.py:139] [WMT] MACD m data saved: WMT_macd_m_20250712_155310.csv
2025-07-12 15:53:10,611 INFO [indicator_service.py:162] [WMT] Bollinger Bands m data saved: WMT_bollinger_m_20250712_155310.csv
2025-07-12 15:53:10,616 INFO [indicator_service.py:186] [WMT] Ichimoku m data saved: WMT_ichimoku_m_20250712_155310.csv
2025-07-12 15:53:10,620 INFO [indicator_service.py:207] [WMT] RSI m data saved: WMT_rsi_m_20250712_155310.csv
2025-07-12 15:53:10,624 INFO [indicator_service.py:229] [WMT] Stochastic m data saved: WMT_stochastic_m_20250712_155310.csv
2025-07-12 15:53:10,628 INFO [indicator_service.py:267] [WMT] Volume Ratio 5d m data saved: WMT_volume_ratio_5d_m_20250712_155310.csv
2025-07-12 15:53:10,630 INFO [indicator_service.py:267] [WMT] Volume Ratio 20d m data saved: WMT_volume_ratio_20d_m_20250712_155310.csv
2025-07-12 15:53:10,631 INFO [indicator_service.py:267] [WMT] Volume Ratio 40d m data saved: WMT_volume_ratio_40d_m_20250712_155310.csv
2025-07-12 15:53:10,632 INFO [indicator_service.py:539] [WMT] All indicators calculated and saved successfully
2025-07-12 15:53:10,704 INFO [analysis_service.py:209] [WMT] Fresh indicators calculated successfully
2025-07-12 15:53:10,704 INFO [analysis_service.py:210] [WMT] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:53:11,369 INFO [analysis_service.py:790] [WMT] Starting Gemini AI analysis...
2025-07-12 15:53:11,369 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 WMT 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 배...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:53:12,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:12,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:06', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:12,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:15,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:15,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:09', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:15,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:18,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:18,896 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:12', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:18,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:21,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:21,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:15', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:21,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:24,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:24,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:18', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:24,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:27,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:27,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:21', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:27,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:30,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:30,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:24', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:30,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:33,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:33,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:27', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:33,892 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:36,904 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:36,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:30', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:36,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:39,904 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:39,905 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:33', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:39,906 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:42,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:42,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:36', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:42,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:45,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:45,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:39', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:45,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:48,679 INFO [analysis_service.py:928] [WMT] Gemini API call completed in 37.31 seconds
2025-07-12 15:53:48,680 INFO [analysis_service.py:931] Gemini raw response text length: 6288
2025-07-12 15:53:48,681 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  WMT는 월봉상 견고한 장기 상승 추세 내에 있지만, 주봉상 중기 모멘텀 둔화와 일봉상 뚜렷한 단기 하락 추세로 전환되었습니다.
2.  스윙 투자자는 현재 매수를 보류하고, 주봉상 중요 지지선인 91~93달러 범위에서의 가격 안정화 및 일봉상 매수 신호(EMA, MACD, 볼린저밴드 등) 전환을 기다려야 합니다.
3.  매수 타이밍은 해당 지지대에서 반등하며 단기 이평선 회복 및 MACD 골든크로스가 발생할 때 고려하며, 기존 보유자는 단기 하락세에 대비한 익절 또는 손절 구간입니다.

---

**WMT 종목 차트 분석: 스윙 투자자의 매수 및 매도 타이밍**

제공된 WMT 종목의 OHLCV 데이터를 기반으로 일봉, 주봉, 월봉 순으로 기술적 지표들을 분석하고 스윙 투자자의 관점에서 매매 타이밍을 제시합니다.

---

**상세 분석**

**1. 일봉 (단기 추세 분석: 최근 30일)**

*   **가격 움직임:** 5월 말 97달러대에서 시작하여 6...
2025-07-12 15:53:48,682 INFO [analysis_service.py:792] [WMT] Gemini AI analysis completed. Success: True
2025-07-12 15:53:48,682 INFO [analysis_service.py:797] [WMT] Extracting summary from Gemini analysis...
2025-07-12 15:53:48,684 INFO [analysis_service.py:799] [WMT] Summary extracted successfully
2025-07-12 15:53:48,684 INFO [analysis_service.py:802] [WMT] Getting indicator data for analysis...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:53:48,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:48,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'progress_percentage': 42.9, 'elapsed_time': '0:08:42', 'estimated_completion': '16:03:50', 'stop_requested': False}
2025-07-12 15:53:48,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:48,921 INFO [analysis_service.py:806] [WMT] Saving HTML analysis file...
2025-07-12 15:53:48,923 INFO [analysis_service.py:834] [WMT] HTML analysis file saved successfully with app_context
2025-07-12 15:53:48,924 INFO [analysis_service.py:840] [WMT] AI analysis process completed successfully
2025-07-12 15:53:48,956 INFO [batch_analysis_service.py:435] [WMT] New analysis completed successfully
2025-07-12 15:53:48,956 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:53:48,956 INFO [progress_service.py:24] Input params: ticker=COST, processed=16, total=35, list_name=03 Watch (16/21)
2025-07-12 15:53:48,957 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'WMT', 'current_list': '03 Watch (15/21)', 'total_tickers': 35, 'processed_tickers': 15, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 50, 96609), 'stop_requested': False}
2025-07-12 15:53:48,957 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:53:48,958 INFO [chart_service.py:116] [COST] Starting chart generation process...
2025-07-12 15:53:48,958 INFO [chart_service.py:123] [COST] Downloading data from yfinance...
2025-07-12 15:53:48,959 INFO [market_data_service.py:373] [COST] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:53:48,959 INFO [market_data_service.py:413] [COST] Trying Yahoo Finance first...
2025-07-12 15:53:48,959 INFO [market_data_service.py:324] [COST] Downloading chart data (attempt 1/2)...
2025-07-12 15:53:48,960 DEBUG [utils.py:96] Entering history()
2025-07-12 15:53:48,960 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['COST', 1, 0])
2025-07-12 15:53:48,961 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:53:48,962 DEBUG [history.py:165] COST: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:48,962 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:53:48,963 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:53:48,963 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/COST
2025-07-12 15:53:48,963 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:48,964 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:53:48,964 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:53:48,964 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:53:49,095 DEBUG [data.py:179] reusing crumb
2025-07-12 15:53:49,095 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:53:49,096 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:53:49,302 DEBUG [data.py:367] response code=200
2025-07-12 15:53:49,302 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:53:49,303 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:53:49,314 DEBUG [history.py:281] COST: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:53:49,316 DEBUG [history.py:318] COST: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:53:49,324 DEBUG [history.py:388] COST: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:49,327 DEBUG [history.py:467] COST: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:49,327 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:53:49,328 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:53:49,328 INFO [market_data_service.py:337] [COST] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:53:49,329 INFO [market_data_service.py:417] [COST] Yahoo Finance successful
2025-07-12 15:53:49,329 INFO [chart_service.py:125] [COST] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:53:49,331 INFO [chart_service.py:142] [COST] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:53:49,380 WARNING [chart_service.py:217] [COST] No saved MACD data found for d, calculating directly
2025-07-12 15:53:49,782 WARNING [chart_service.py:217] [COST] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:53:50,353 WARNING [chart_service.py:217] [COST] No saved MACD data found for m, calculating directly
2025-07-12 15:53:50,633 INFO [chart_service.py:154] [COST] Starting integrated indicator calculation and storage...
2025-07-12 15:53:50,634 INFO [indicator_service.py:483] [COST] Starting comprehensive indicator calculation and storage...
2025-07-12 15:53:50,644 INFO [indicator_service.py:54] [COST] Daily OHLCV data saved: COST_ohlcv_d_20250712_155350.csv
2025-07-12 15:53:50,654 INFO [indicator_service.py:68] [COST] Weekly OHLCV data saved: COST_ohlcv_w_20250712_155350.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:50,659 INFO [indicator_service.py:82] [COST] Monthly OHLCV data saved: COST_ohlcv_m_20250712_155350.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:50,676 INFO [indicator_service.py:116] [COST] EMA5 d data saved: COST_ema5_d_20250712_155350.csv
2025-07-12 15:53:50,682 INFO [indicator_service.py:116] [COST] EMA20 d data saved: COST_ema20_d_20250712_155350.csv
2025-07-12 15:53:50,688 INFO [indicator_service.py:116] [COST] EMA40 d data saved: COST_ema40_d_20250712_155350.csv
2025-07-12 15:53:50,699 INFO [indicator_service.py:139] [COST] MACD d data saved: COST_macd_d_20250712_155350.csv
2025-07-12 15:53:50,712 INFO [indicator_service.py:162] [COST] Bollinger Bands d data saved: COST_bollinger_d_20250712_155350.csv
2025-07-12 15:53:50,726 INFO [indicator_service.py:186] [COST] Ichimoku d data saved: COST_ichimoku_d_20250712_155350.csv
2025-07-12 15:53:50,734 INFO [indicator_service.py:207] [COST] RSI d data saved: COST_rsi_d_20250712_155350.csv
2025-07-12 15:53:50,743 INFO [indicator_service.py:229] [COST] Stochastic d data saved: COST_stochastic_d_20250712_155350.csv
2025-07-12 15:53:50,752 INFO [indicator_service.py:267] [COST] Volume Ratio 5d d data saved: COST_volume_ratio_5d_d_20250712_155350.csv
2025-07-12 15:53:50,757 INFO [indicator_service.py:267] [COST] Volume Ratio 20d d data saved: COST_volume_ratio_20d_d_20250712_155350.csv
2025-07-12 15:53:50,762 INFO [indicator_service.py:267] [COST] Volume Ratio 40d d data saved: COST_volume_ratio_40d_d_20250712_155350.csv
2025-07-12 15:53:50,767 INFO [indicator_service.py:116] [COST] EMA5 w data saved: COST_ema5_w_20250712_155350.csv
2025-07-12 15:53:50,771 INFO [indicator_service.py:116] [COST] EMA20 w data saved: COST_ema20_w_20250712_155350.csv
2025-07-12 15:53:50,774 INFO [indicator_service.py:116] [COST] EMA40 w data saved: COST_ema40_w_20250712_155350.csv
2025-07-12 15:53:50,779 INFO [indicator_service.py:139] [COST] MACD w data saved: COST_macd_w_20250712_155350.csv
2025-07-12 15:53:50,785 INFO [indicator_service.py:162] [COST] Bollinger Bands w data saved: COST_bollinger_w_20250712_155350.csv
2025-07-12 15:53:50,793 INFO [indicator_service.py:186] [COST] Ichimoku w data saved: COST_ichimoku_w_20250712_155350.csv
2025-07-12 15:53:50,797 INFO [indicator_service.py:207] [COST] RSI w data saved: COST_rsi_w_20250712_155350.csv
2025-07-12 15:53:50,803 INFO [indicator_service.py:229] [COST] Stochastic w data saved: COST_stochastic_w_20250712_155350.csv
2025-07-12 15:53:50,808 INFO [indicator_service.py:267] [COST] Volume Ratio 5d w data saved: COST_volume_ratio_5d_w_20250712_155350.csv
2025-07-12 15:53:50,811 INFO [indicator_service.py:267] [COST] Volume Ratio 20d w data saved: COST_volume_ratio_20d_w_20250712_155350.csv
2025-07-12 15:53:50,814 INFO [indicator_service.py:267] [COST] Volume Ratio 40d w data saved: COST_volume_ratio_40d_w_20250712_155350.csv
2025-07-12 15:53:50,818 INFO [indicator_service.py:116] [COST] EMA5 m data saved: COST_ema5_m_20250712_155350.csv
2025-07-12 15:53:50,820 INFO [indicator_service.py:116] [COST] EMA20 m data saved: COST_ema20_m_20250712_155350.csv
2025-07-12 15:53:50,823 INFO [indicator_service.py:116] [COST] EMA40 m data saved: COST_ema40_m_20250712_155350.csv
2025-07-12 15:53:50,832 INFO [indicator_service.py:139] [COST] MACD m data saved: COST_macd_m_20250712_155350.csv
2025-07-12 15:53:50,838 INFO [indicator_service.py:162] [COST] Bollinger Bands m data saved: COST_bollinger_m_20250712_155350.csv
2025-07-12 15:53:50,843 INFO [indicator_service.py:186] [COST] Ichimoku m data saved: COST_ichimoku_m_20250712_155350.csv
2025-07-12 15:53:50,847 INFO [indicator_service.py:207] [COST] RSI m data saved: COST_rsi_m_20250712_155350.csv
2025-07-12 15:53:50,852 INFO [indicator_service.py:229] [COST] Stochastic m data saved: COST_stochastic_m_20250712_155350.csv
2025-07-12 15:53:50,856 INFO [indicator_service.py:267] [COST] Volume Ratio 5d m data saved: COST_volume_ratio_5d_m_20250712_155350.csv
2025-07-12 15:53:50,858 INFO [indicator_service.py:267] [COST] Volume Ratio 20d m data saved: COST_volume_ratio_20d_m_20250712_155350.csv
2025-07-12 15:53:50,861 INFO [indicator_service.py:267] [COST] Volume Ratio 40d m data saved: COST_volume_ratio_40d_m_20250712_155350.csv
2025-07-12 15:53:50,861 INFO [indicator_service.py:539] [COST] All indicators calculated and saved successfully
2025-07-12 15:53:50,861 INFO [chart_service.py:158] [COST] Indicator calculation and storage completed successfully
2025-07-12 15:53:50,862 INFO [chart_service.py:165] [COST] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:53:50,864 INFO [analysis_service.py:348] [COST] Starting AI analysis process...
2025-07-12 15:53:50,865 INFO [analysis_service.py:356] [COST] Looking for chart files...
2025-07-12 15:53:50,869 INFO [analysis_service.py:413] [COST] Found Daily chart: COST_daily_20250712.png
2025-07-12 15:53:50,870 INFO [analysis_service.py:413] [COST] Found Weekly chart: COST_weekly_20250712.png
2025-07-12 15:53:50,870 INFO [analysis_service.py:413] [COST] Found Monthly chart: COST_monthly_20250712.png
2025-07-12 15:53:50,870 INFO [analysis_service.py:415] [COST] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:53:50,871 INFO [analysis_service.py:432] [COST] Chart image transmission disabled - using text-only analysis
2025-07-12 15:53:50,871 INFO [analysis_service.py:439] [COST] Determining data processing strategy based on market hours...
2025-07-12 15:53:50,871 INFO [analysis_service.py:463] [COST] US stock - Current EST: 15:53:50, Market hours: True
2025-07-12 15:53:50,872 INFO [analysis_service.py:470] [COST] Market hours detected - will download fresh data
2025-07-12 15:53:50,872 INFO [analysis_service.py:479] [COST] Downloading fresh data and calculating new indicators...
2025-07-12 15:53:50,872 INFO [analysis_service.py:155] [COST] Starting fresh data download and analysis...
2025-07-12 15:53:50,873 INFO [analysis_service.py:163] [COST] Downloading fresh stock data...
2025-07-12 15:53:50,873 INFO [market_data_service.py:373] [COST] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:53:50,873 INFO [market_data_service.py:413] [COST] Trying Yahoo Finance first...
2025-07-12 15:53:50,873 INFO [market_data_service.py:324] [COST] Downloading chart data (attempt 1/2)...
2025-07-12 15:53:50,874 DEBUG [utils.py:96] Entering history()
2025-07-12 15:53:50,874 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['COST', 1, 0])
2025-07-12 15:53:50,875 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:53:50,875 DEBUG [history.py:165] COST: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:50,876 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:53:50,876 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:53:50,877 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/COST
2025-07-12 15:53:50,877 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:53:50,877 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:53:50,878 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:53:50,878 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:53:50,984 DEBUG [data.py:179] reusing crumb
2025-07-12 15:53:50,985 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:53:50,985 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:53:51,157 DEBUG [data.py:367] response code=200
2025-07-12 15:53:51,158 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:53:51,158 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:53:51,162 DEBUG [history.py:281] COST: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:53:51,164 DEBUG [history.py:318] COST: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:53:51,173 DEBUG [history.py:388] COST: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:51,176 DEBUG [history.py:467] COST: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:53:51,176 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:53:51,177 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:53:51,177 INFO [market_data_service.py:337] [COST] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:53:51,177 INFO [market_data_service.py:417] [COST] Yahoo Finance successful
2025-07-12 15:53:51,177 INFO [analysis_service.py:178] [COST] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:53:51,178 INFO [analysis_service.py:181] [COST] Calculating and saving new indicators...
2025-07-12 15:53:51,178 INFO [indicator_service.py:483] [COST] Starting comprehensive indicator calculation and storage...
2025-07-12 15:53:51,207 INFO [indicator_service.py:54] [COST] Daily OHLCV data saved: COST_ohlcv_d_20250712_155351.csv
2025-07-12 15:53:51,215 INFO [indicator_service.py:68] [COST] Weekly OHLCV data saved: COST_ohlcv_w_20250712_155351.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:51,222 INFO [indicator_service.py:82] [COST] Monthly OHLCV data saved: COST_ohlcv_m_20250712_155351.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:53:51,252 INFO [indicator_service.py:116] [COST] EMA5 d data saved: COST_ema5_d_20250712_155351.csv
2025-07-12 15:53:51,259 INFO [indicator_service.py:116] [COST] EMA20 d data saved: COST_ema20_d_20250712_155351.csv
2025-07-12 15:53:51,266 INFO [indicator_service.py:116] [COST] EMA40 d data saved: COST_ema40_d_20250712_155351.csv
2025-07-12 15:53:51,278 INFO [indicator_service.py:139] [COST] MACD d data saved: COST_macd_d_20250712_155351.csv
2025-07-12 15:53:51,291 INFO [indicator_service.py:162] [COST] Bollinger Bands d data saved: COST_bollinger_d_20250712_155351.csv
2025-07-12 15:53:51,307 INFO [indicator_service.py:186] [COST] Ichimoku d data saved: COST_ichimoku_d_20250712_155351.csv
2025-07-12 15:53:51,314 INFO [indicator_service.py:207] [COST] RSI d data saved: COST_rsi_d_20250712_155351.csv
2025-07-12 15:53:51,323 INFO [indicator_service.py:229] [COST] Stochastic d data saved: COST_stochastic_d_20250712_155351.csv
2025-07-12 15:53:51,332 INFO [indicator_service.py:267] [COST] Volume Ratio 5d d data saved: COST_volume_ratio_5d_d_20250712_155351.csv
2025-07-12 15:53:51,337 INFO [indicator_service.py:267] [COST] Volume Ratio 20d d data saved: COST_volume_ratio_20d_d_20250712_155351.csv
2025-07-12 15:53:51,343 INFO [indicator_service.py:267] [COST] Volume Ratio 40d d data saved: COST_volume_ratio_40d_d_20250712_155351.csv
2025-07-12 15:53:51,347 INFO [indicator_service.py:116] [COST] EMA5 w data saved: COST_ema5_w_20250712_155351.csv
2025-07-12 15:53:51,350 INFO [indicator_service.py:116] [COST] EMA20 w data saved: COST_ema20_w_20250712_155351.csv
2025-07-12 15:53:51,353 INFO [indicator_service.py:116] [COST] EMA40 w data saved: COST_ema40_w_20250712_155351.csv
2025-07-12 15:53:51,358 INFO [indicator_service.py:139] [COST] MACD w data saved: COST_macd_w_20250712_155351.csv
2025-07-12 15:53:51,363 INFO [indicator_service.py:162] [COST] Bollinger Bands w data saved: COST_bollinger_w_20250712_155351.csv
2025-07-12 15:53:51,371 INFO [indicator_service.py:186] [COST] Ichimoku w data saved: COST_ichimoku_w_20250712_155351.csv
2025-07-12 15:53:51,375 INFO [indicator_service.py:207] [COST] RSI w data saved: COST_rsi_w_20250712_155351.csv
2025-07-12 15:53:51,379 INFO [indicator_service.py:229] [COST] Stochastic w data saved: COST_stochastic_w_20250712_155351.csv
2025-07-12 15:53:51,384 INFO [indicator_service.py:267] [COST] Volume Ratio 5d w data saved: COST_volume_ratio_5d_w_20250712_155351.csv
2025-07-12 15:53:51,387 INFO [indicator_service.py:267] [COST] Volume Ratio 20d w data saved: COST_volume_ratio_20d_w_20250712_155351.csv
2025-07-12 15:53:51,390 INFO [indicator_service.py:267] [COST] Volume Ratio 40d w data saved: COST_volume_ratio_40d_w_20250712_155351.csv
2025-07-12 15:53:51,393 INFO [indicator_service.py:116] [COST] EMA5 m data saved: COST_ema5_m_20250712_155351.csv
2025-07-12 15:53:51,395 INFO [indicator_service.py:116] [COST] EMA20 m data saved: COST_ema20_m_20250712_155351.csv
2025-07-12 15:53:51,397 INFO [indicator_service.py:116] [COST] EMA40 m data saved: COST_ema40_m_20250712_155351.csv
2025-07-12 15:53:51,401 INFO [indicator_service.py:139] [COST] MACD m data saved: COST_macd_m_20250712_155351.csv
2025-07-12 15:53:51,405 INFO [indicator_service.py:162] [COST] Bollinger Bands m data saved: COST_bollinger_m_20250712_155351.csv
2025-07-12 15:53:51,410 INFO [indicator_service.py:186] [COST] Ichimoku m data saved: COST_ichimoku_m_20250712_155351.csv
2025-07-12 15:53:51,414 INFO [indicator_service.py:207] [COST] RSI m data saved: COST_rsi_m_20250712_155351.csv
2025-07-12 15:53:51,417 INFO [indicator_service.py:229] [COST] Stochastic m data saved: COST_stochastic_m_20250712_155351.csv
2025-07-12 15:53:51,422 INFO [indicator_service.py:267] [COST] Volume Ratio 5d m data saved: COST_volume_ratio_5d_m_20250712_155351.csv
2025-07-12 15:53:51,424 INFO [indicator_service.py:267] [COST] Volume Ratio 20d m data saved: COST_volume_ratio_20d_m_20250712_155351.csv
2025-07-12 15:53:51,426 INFO [indicator_service.py:267] [COST] Volume Ratio 40d m data saved: COST_volume_ratio_40d_m_20250712_155351.csv
2025-07-12 15:53:51,426 INFO [indicator_service.py:539] [COST] All indicators calculated and saved successfully
2025-07-12 15:53:51,494 INFO [analysis_service.py:209] [COST] Fresh indicators calculated successfully
2025-07-12 15:53:51,495 INFO [analysis_service.py:210] [COST] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:53:51,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:53:51,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:08:45', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:53:51,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:52,190 INFO [analysis_service.py:790] [COST] Starting Gemini AI analysis...
2025-07-12 15:53:52,190 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 COST 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:53:54,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:53:54,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:08:48', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:53:54,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:53:57,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:53:57,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:08:51', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:53:57,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:53:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:00,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:00,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:08:54', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:00,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:03,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:03,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:08:57', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:03,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:06,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:06,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:00', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:06,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:09,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:09,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:03', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:09,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:12,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:12,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:06', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:12,892 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:15,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:15,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:09', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:15,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:18,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:18,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:12', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:18,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:21,905 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:21,906 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'progress_percentage': 45.7, 'elapsed_time': '0:09:15', 'estimated_completion': '16:04:09', 'stop_requested': False}
2025-07-12 15:54:21,907 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:23,803 INFO [analysis_service.py:928] [COST] Gemini API call completed in 31.61 seconds
2025-07-12 15:54:23,804 INFO [analysis_service.py:931] Gemini raw response text length: 5113
2025-07-12 15:54:23,805 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  COST 종목은 월봉 차트 기준 매우 강한 장기 상승 추세에 있으나, 일봉 및 주봉 차트에서는 최근 두 달간 상당한 조정을 겪으며 하락 추세가 진행 중입니다.
2.  현재 가격(970.33)은 단기 및 중기 EMA 아래에 있으며, MACD는 하락 모멘텀을, 볼린저밴드는 하단에 근접하여 일시적 과매도 상태일 수 있으나 명확한 반등 신호는 아직 없습니다.
3.  스윙 투자자는 현 시점에서 매수를 보류하고, 960~970 구간에서의 지지 여부와 함께 단기 이동평균선 상향 돌파, MACD의 골든 크로스 등 명확한 기술적 반등 신호가 출현할 때까지 관망 후 분할 매수를 고려해야 합니다.

---

### COST 종목 기술적 분석 및 스윙 투자 의견

제공된 OHLCV 데이터를 바탕으로 COST 종목의 일봉, 주봉, 월봉 차트를 분석하고 각 기술적 지표(EMA, MACD, 볼린저밴드, 일목균형표)를 활용하여 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 제시합니다...
2025-07-12 15:54:23,806 INFO [analysis_service.py:792] [COST] Gemini AI analysis completed. Success: True
2025-07-12 15:54:23,806 INFO [analysis_service.py:797] [COST] Extracting summary from Gemini analysis...
2025-07-12 15:54:23,807 INFO [analysis_service.py:799] [COST] Summary extracted successfully
2025-07-12 15:54:23,808 INFO [analysis_service.py:802] [COST] Getting indicator data for analysis...
2025-07-12 15:54:24,039 INFO [analysis_service.py:806] [COST] Saving HTML analysis file...
2025-07-12 15:54:24,041 INFO [analysis_service.py:834] [COST] HTML analysis file saved successfully with app_context
2025-07-12 15:54:24,041 INFO [analysis_service.py:840] [COST] AI analysis process completed successfully
2025-07-12 15:54:24,078 INFO [batch_analysis_service.py:435] [COST] New analysis completed successfully
2025-07-12 15:54:24,078 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:54:24,079 INFO [progress_service.py:24] Input params: ticker=DIS, processed=17, total=35, list_name=03 Watch (17/21)
2025-07-12 15:54:24,079 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'COST', 'current_list': '03 Watch (16/21)', 'total_tickers': 35, 'processed_tickers': 16, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 9, 271668), 'stop_requested': False}
2025-07-12 15:54:24,080 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DIS', 'current_list': '03 Watch (17/21)', 'total_tickers': 35, 'processed_tickers': 17, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 14, 366610), 'stop_requested': False}
2025-07-12 15:54:24,080 INFO [batch_analysis_service.py:378] [DIS] Reusing existing files (within 1 hour)
2025-07-12 15:54:24,083 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:54:24,083 INFO [progress_service.py:24] Input params: ticker=SPG, processed=18, total=35, list_name=03 Watch (18/21)
2025-07-12 15:54:24,084 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DIS', 'current_list': '03 Watch (17/21)', 'total_tickers': 35, 'processed_tickers': 17, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 4, 14, 366610), 'stop_requested': False}
2025-07-12 15:54:24,084 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPG', 'current_list': '03 Watch (18/21)', 'total_tickers': 35, 'processed_tickers': 18, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 10, 609946), 'stop_requested': False}
2025-07-12 15:54:24,085 INFO [batch_analysis_service.py:378] [SPG] Reusing existing files (within 1 hour)
2025-07-12 15:54:24,087 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:54:24,088 INFO [progress_service.py:24] Input params: ticker=O, processed=19, total=35, list_name=03 Watch (19/21)
2025-07-12 15:54:24,088 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPG', 'current_list': '03 Watch (18/21)', 'total_tickers': 35, 'processed_tickers': 18, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 3, 10, 609946), 'stop_requested': False}
2025-07-12 15:54:24,089 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'O', 'current_list': '03 Watch (19/21)', 'total_tickers': 35, 'processed_tickers': 19, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 13, 564360), 'stop_requested': False}
2025-07-12 15:54:24,089 INFO [batch_analysis_service.py:378] [O] Reusing existing files (within 1 hour)
2025-07-12 15:54:24,092 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:54:24,093 INFO [progress_service.py:24] Input params: ticker=CROX, processed=20, total=35, list_name=03 Watch (20/21)
2025-07-12 15:54:24,093 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'O', 'current_list': '03 Watch (19/21)', 'total_tickers': 35, 'processed_tickers': 19, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 2, 13, 564360), 'stop_requested': False}
2025-07-12 15:54:24,093 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:24,094 INFO [chart_service.py:116] [CROX] Starting chart generation process...
2025-07-12 15:54:24,095 INFO [chart_service.py:123] [CROX] Downloading data from yfinance...
2025-07-12 15:54:24,095 INFO [market_data_service.py:373] [CROX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:54:24,096 INFO [market_data_service.py:413] [CROX] Trying Yahoo Finance first...
2025-07-12 15:54:24,096 INFO [market_data_service.py:324] [CROX] Downloading chart data (attempt 1/2)...
2025-07-12 15:54:24,096 DEBUG [utils.py:96] Entering history()
2025-07-12 15:54:24,097 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['CROX', 1, 0])
2025-07-12 15:54:24,098 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:54:24,099 DEBUG [history.py:165] CROX: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:54:24,099 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:54:24,099 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:54:24,099 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/CROX
2025-07-12 15:54:24,100 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:54:24,100 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:54:24,100 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:54:24,101 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:54:24,214 DEBUG [data.py:179] reusing crumb
2025-07-12 15:54:24,215 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:54:24,215 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:54:24,429 DEBUG [data.py:367] response code=200
2025-07-12 15:54:24,430 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:54:24,430 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:54:24,440 DEBUG [history.py:281] CROX: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:54:24,442 DEBUG [history.py:318] CROX: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:54:24,446 DEBUG [history.py:388] CROX: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:54:24,448 DEBUG [history.py:467] CROX: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:54:24,449 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:54:24,449 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:54:24,450 INFO [market_data_service.py:337] [CROX] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:54:24,450 INFO [market_data_service.py:417] [CROX] Yahoo Finance successful
2025-07-12 15:54:24,451 INFO [chart_service.py:125] [CROX] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:54:24,453 INFO [chart_service.py:142] [CROX] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:54:24,508 WARNING [chart_service.py:217] [CROX] No saved MACD data found for d, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:54:24,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:24,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:18', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:24,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:24,945 WARNING [chart_service.py:217] [CROX] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:54:25,338 WARNING [chart_service.py:217] [CROX] No saved MACD data found for m, calculating directly
2025-07-12 15:54:25,636 INFO [chart_service.py:154] [CROX] Starting integrated indicator calculation and storage...
2025-07-12 15:54:25,637 INFO [indicator_service.py:483] [CROX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:54:25,646 INFO [indicator_service.py:54] [CROX] Daily OHLCV data saved: CROX_ohlcv_d_20250712_155425.csv
2025-07-12 15:54:25,655 INFO [indicator_service.py:68] [CROX] Weekly OHLCV data saved: CROX_ohlcv_w_20250712_155425.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:54:25,661 INFO [indicator_service.py:82] [CROX] Monthly OHLCV data saved: CROX_ohlcv_m_20250712_155425.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:54:25,676 INFO [indicator_service.py:116] [CROX] EMA5 d data saved: CROX_ema5_d_20250712_155425.csv
2025-07-12 15:54:25,682 INFO [indicator_service.py:116] [CROX] EMA20 d data saved: CROX_ema20_d_20250712_155425.csv
2025-07-12 15:54:25,689 INFO [indicator_service.py:116] [CROX] EMA40 d data saved: CROX_ema40_d_20250712_155425.csv
2025-07-12 15:54:25,700 INFO [indicator_service.py:139] [CROX] MACD d data saved: CROX_macd_d_20250712_155425.csv
2025-07-12 15:54:25,711 INFO [indicator_service.py:162] [CROX] Bollinger Bands d data saved: CROX_bollinger_d_20250712_155425.csv
2025-07-12 15:54:25,726 INFO [indicator_service.py:186] [CROX] Ichimoku d data saved: CROX_ichimoku_d_20250712_155425.csv
2025-07-12 15:54:25,733 INFO [indicator_service.py:207] [CROX] RSI d data saved: CROX_rsi_d_20250712_155425.csv
2025-07-12 15:54:25,744 INFO [indicator_service.py:229] [CROX] Stochastic d data saved: CROX_stochastic_d_20250712_155425.csv
2025-07-12 15:54:25,751 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d d data saved: CROX_volume_ratio_5d_d_20250712_155425.csv
2025-07-12 15:54:25,758 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d d data saved: CROX_volume_ratio_20d_d_20250712_155425.csv
2025-07-12 15:54:25,763 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d d data saved: CROX_volume_ratio_40d_d_20250712_155425.csv
2025-07-12 15:54:25,768 INFO [indicator_service.py:116] [CROX] EMA5 w data saved: CROX_ema5_w_20250712_155425.csv
2025-07-12 15:54:25,772 INFO [indicator_service.py:116] [CROX] EMA20 w data saved: CROX_ema20_w_20250712_155425.csv
2025-07-12 15:54:25,775 INFO [indicator_service.py:116] [CROX] EMA40 w data saved: CROX_ema40_w_20250712_155425.csv
2025-07-12 15:54:25,780 INFO [indicator_service.py:139] [CROX] MACD w data saved: CROX_macd_w_20250712_155425.csv
2025-07-12 15:54:25,785 INFO [indicator_service.py:162] [CROX] Bollinger Bands w data saved: CROX_bollinger_w_20250712_155425.csv
2025-07-12 15:54:25,793 INFO [indicator_service.py:186] [CROX] Ichimoku w data saved: CROX_ichimoku_w_20250712_155425.csv
2025-07-12 15:54:25,798 INFO [indicator_service.py:207] [CROX] RSI w data saved: CROX_rsi_w_20250712_155425.csv
2025-07-12 15:54:25,803 INFO [indicator_service.py:229] [CROX] Stochastic w data saved: CROX_stochastic_w_20250712_155425.csv
2025-07-12 15:54:25,809 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d w data saved: CROX_volume_ratio_5d_w_20250712_155425.csv
2025-07-12 15:54:25,811 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d w data saved: CROX_volume_ratio_20d_w_20250712_155425.csv
2025-07-12 15:54:25,813 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d w data saved: CROX_volume_ratio_40d_w_20250712_155425.csv
2025-07-12 15:54:25,817 INFO [indicator_service.py:116] [CROX] EMA5 m data saved: CROX_ema5_m_20250712_155425.csv
2025-07-12 15:54:25,820 INFO [indicator_service.py:116] [CROX] EMA20 m data saved: CROX_ema20_m_20250712_155425.csv
2025-07-12 15:54:25,823 INFO [indicator_service.py:116] [CROX] EMA40 m data saved: CROX_ema40_m_20250712_155425.csv
2025-07-12 15:54:25,827 INFO [indicator_service.py:139] [CROX] MACD m data saved: CROX_macd_m_20250712_155425.csv
2025-07-12 15:54:25,831 INFO [indicator_service.py:162] [CROX] Bollinger Bands m data saved: CROX_bollinger_m_20250712_155425.csv
2025-07-12 15:54:25,837 INFO [indicator_service.py:186] [CROX] Ichimoku m data saved: CROX_ichimoku_m_20250712_155425.csv
2025-07-12 15:54:25,841 INFO [indicator_service.py:207] [CROX] RSI m data saved: CROX_rsi_m_20250712_155425.csv
2025-07-12 15:54:25,845 INFO [indicator_service.py:229] [CROX] Stochastic m data saved: CROX_stochastic_m_20250712_155425.csv
2025-07-12 15:54:25,849 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d m data saved: CROX_volume_ratio_5d_m_20250712_155425.csv
2025-07-12 15:54:25,851 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d m data saved: CROX_volume_ratio_20d_m_20250712_155425.csv
2025-07-12 15:54:25,854 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d m data saved: CROX_volume_ratio_40d_m_20250712_155425.csv
2025-07-12 15:54:25,854 INFO [indicator_service.py:539] [CROX] All indicators calculated and saved successfully
2025-07-12 15:54:25,854 INFO [chart_service.py:158] [CROX] Indicator calculation and storage completed successfully
2025-07-12 15:54:25,855 INFO [chart_service.py:165] [CROX] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:54:25,857 INFO [analysis_service.py:348] [CROX] Starting AI analysis process...
2025-07-12 15:54:25,858 INFO [analysis_service.py:356] [CROX] Looking for chart files...
2025-07-12 15:54:25,861 INFO [analysis_service.py:413] [CROX] Found Daily chart: CROX_daily_20250712.png
2025-07-12 15:54:25,862 INFO [analysis_service.py:413] [CROX] Found Weekly chart: CROX_weekly_20250712.png
2025-07-12 15:54:25,862 INFO [analysis_service.py:413] [CROX] Found Monthly chart: CROX_monthly_20250712.png
2025-07-12 15:54:25,862 INFO [analysis_service.py:415] [CROX] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:54:25,862 INFO [analysis_service.py:432] [CROX] Chart image transmission disabled - using text-only analysis
2025-07-12 15:54:25,863 INFO [analysis_service.py:439] [CROX] Determining data processing strategy based on market hours...
2025-07-12 15:54:25,863 INFO [analysis_service.py:463] [CROX] US stock - Current EST: 15:54:25, Market hours: True
2025-07-12 15:54:25,863 INFO [analysis_service.py:470] [CROX] Market hours detected - will download fresh data
2025-07-12 15:54:25,863 INFO [analysis_service.py:479] [CROX] Downloading fresh data and calculating new indicators...
2025-07-12 15:54:25,864 INFO [analysis_service.py:155] [CROX] Starting fresh data download and analysis...
2025-07-12 15:54:25,864 INFO [analysis_service.py:163] [CROX] Downloading fresh stock data...
2025-07-12 15:54:25,864 INFO [market_data_service.py:373] [CROX] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:54:25,865 INFO [market_data_service.py:413] [CROX] Trying Yahoo Finance first...
2025-07-12 15:54:25,865 INFO [market_data_service.py:324] [CROX] Downloading chart data (attempt 1/2)...
2025-07-12 15:54:25,865 DEBUG [utils.py:96] Entering history()
2025-07-12 15:54:25,866 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['CROX', 1, 0])
2025-07-12 15:54:25,867 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:54:25,868 DEBUG [history.py:165] CROX: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:54:25,868 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:54:25,868 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:54:25,869 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/CROX
2025-07-12 15:54:25,869 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:54:25,869 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:54:25,870 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:54:25,870 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:54:25,949 DEBUG [data.py:179] reusing crumb
2025-07-12 15:54:25,949 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:54:25,950 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:54:26,120 DEBUG [data.py:367] response code=200
2025-07-12 15:54:26,120 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:54:26,121 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:54:26,128 DEBUG [history.py:281] CROX: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:54:26,130 DEBUG [history.py:318] CROX: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:54:26,134 DEBUG [history.py:388] CROX: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:54:26,138 DEBUG [history.py:467] CROX: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:54:26,139 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:54:26,139 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:54:26,139 INFO [market_data_service.py:337] [CROX] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:54:26,139 INFO [market_data_service.py:417] [CROX] Yahoo Finance successful
2025-07-12 15:54:26,140 INFO [analysis_service.py:178] [CROX] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:54:26,140 INFO [analysis_service.py:181] [CROX] Calculating and saving new indicators...
2025-07-12 15:54:26,140 INFO [indicator_service.py:483] [CROX] Starting comprehensive indicator calculation and storage...
2025-07-12 15:54:26,156 INFO [indicator_service.py:54] [CROX] Daily OHLCV data saved: CROX_ohlcv_d_20250712_155426.csv
2025-07-12 15:54:26,165 INFO [indicator_service.py:68] [CROX] Weekly OHLCV data saved: CROX_ohlcv_w_20250712_155426.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:54:26,194 INFO [indicator_service.py:82] [CROX] Monthly OHLCV data saved: CROX_ohlcv_m_20250712_155426.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:54:26,212 INFO [indicator_service.py:116] [CROX] EMA5 d data saved: CROX_ema5_d_20250712_155426.csv
2025-07-12 15:54:26,218 INFO [indicator_service.py:116] [CROX] EMA20 d data saved: CROX_ema20_d_20250712_155426.csv
2025-07-12 15:54:26,225 INFO [indicator_service.py:116] [CROX] EMA40 d data saved: CROX_ema40_d_20250712_155426.csv
2025-07-12 15:54:26,236 INFO [indicator_service.py:139] [CROX] MACD d data saved: CROX_macd_d_20250712_155426.csv
2025-07-12 15:54:26,247 INFO [indicator_service.py:162] [CROX] Bollinger Bands d data saved: CROX_bollinger_d_20250712_155426.csv
2025-07-12 15:54:26,262 INFO [indicator_service.py:186] [CROX] Ichimoku d data saved: CROX_ichimoku_d_20250712_155426.csv
2025-07-12 15:54:26,270 INFO [indicator_service.py:207] [CROX] RSI d data saved: CROX_rsi_d_20250712_155426.csv
2025-07-12 15:54:26,280 INFO [indicator_service.py:229] [CROX] Stochastic d data saved: CROX_stochastic_d_20250712_155426.csv
2025-07-12 15:54:26,291 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d d data saved: CROX_volume_ratio_5d_d_20250712_155426.csv
2025-07-12 15:54:26,296 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d d data saved: CROX_volume_ratio_20d_d_20250712_155426.csv
2025-07-12 15:54:26,301 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d d data saved: CROX_volume_ratio_40d_d_20250712_155426.csv
2025-07-12 15:54:26,307 INFO [indicator_service.py:116] [CROX] EMA5 w data saved: CROX_ema5_w_20250712_155426.csv
2025-07-12 15:54:26,309 INFO [indicator_service.py:116] [CROX] EMA20 w data saved: CROX_ema20_w_20250712_155426.csv
2025-07-12 15:54:26,312 INFO [indicator_service.py:116] [CROX] EMA40 w data saved: CROX_ema40_w_20250712_155426.csv
2025-07-12 15:54:26,320 INFO [indicator_service.py:139] [CROX] MACD w data saved: CROX_macd_w_20250712_155426.csv
2025-07-12 15:54:26,329 INFO [indicator_service.py:162] [CROX] Bollinger Bands w data saved: CROX_bollinger_w_20250712_155426.csv
2025-07-12 15:54:26,337 INFO [indicator_service.py:186] [CROX] Ichimoku w data saved: CROX_ichimoku_w_20250712_155426.csv
2025-07-12 15:54:26,341 INFO [indicator_service.py:207] [CROX] RSI w data saved: CROX_rsi_w_20250712_155426.csv
2025-07-12 15:54:26,346 INFO [indicator_service.py:229] [CROX] Stochastic w data saved: CROX_stochastic_w_20250712_155426.csv
2025-07-12 15:54:26,351 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d w data saved: CROX_volume_ratio_5d_w_20250712_155426.csv
2025-07-12 15:54:26,354 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d w data saved: CROX_volume_ratio_20d_w_20250712_155426.csv
2025-07-12 15:54:26,357 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d w data saved: CROX_volume_ratio_40d_w_20250712_155426.csv
2025-07-12 15:54:26,360 INFO [indicator_service.py:116] [CROX] EMA5 m data saved: CROX_ema5_m_20250712_155426.csv
2025-07-12 15:54:26,362 INFO [indicator_service.py:116] [CROX] EMA20 m data saved: CROX_ema20_m_20250712_155426.csv
2025-07-12 15:54:26,365 INFO [indicator_service.py:116] [CROX] EMA40 m data saved: CROX_ema40_m_20250712_155426.csv
2025-07-12 15:54:26,370 INFO [indicator_service.py:139] [CROX] MACD m data saved: CROX_macd_m_20250712_155426.csv
2025-07-12 15:54:26,376 INFO [indicator_service.py:162] [CROX] Bollinger Bands m data saved: CROX_bollinger_m_20250712_155426.csv
2025-07-12 15:54:26,383 INFO [indicator_service.py:186] [CROX] Ichimoku m data saved: CROX_ichimoku_m_20250712_155426.csv
2025-07-12 15:54:26,389 INFO [indicator_service.py:207] [CROX] RSI m data saved: CROX_rsi_m_20250712_155426.csv
2025-07-12 15:54:26,395 INFO [indicator_service.py:229] [CROX] Stochastic m data saved: CROX_stochastic_m_20250712_155426.csv
2025-07-12 15:54:26,400 INFO [indicator_service.py:267] [CROX] Volume Ratio 5d m data saved: CROX_volume_ratio_5d_m_20250712_155426.csv
2025-07-12 15:54:26,402 INFO [indicator_service.py:267] [CROX] Volume Ratio 20d m data saved: CROX_volume_ratio_20d_m_20250712_155426.csv
2025-07-12 15:54:26,405 INFO [indicator_service.py:267] [CROX] Volume Ratio 40d m data saved: CROX_volume_ratio_40d_m_20250712_155426.csv
2025-07-12 15:54:26,405 INFO [indicator_service.py:539] [CROX] All indicators calculated and saved successfully
2025-07-12 15:54:26,479 INFO [analysis_service.py:209] [CROX] Fresh indicators calculated successfully
2025-07-12 15:54:26,479 INFO [analysis_service.py:210] [CROX] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:54:27,192 INFO [analysis_service.py:790] [CROX] Starting Gemini AI analysis...
2025-07-12 15:54:27,192 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 CROX 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:54:27,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:27,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:21', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:27,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:30,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:30,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:24', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:30,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:33,891 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:33,892 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:27', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:33,893 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:36,890 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:36,891 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:30', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:36,892 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:39,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:39,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:33', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:39,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:42,898 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:42,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:36', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:42,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:45,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:45,899 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:39', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:45,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:48,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:48,894 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:42', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:48,895 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:51,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:51,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:45', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:51,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:54,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:54,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:48', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:54,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:54:57,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:54:57,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:51', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:54:57,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:54:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:00,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:55:00,896 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:54', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:55:00,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:03,894 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:55:03,895 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:09:57', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:55:03,896 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:06,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:55:06,889 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:10:00', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:55:06,890 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:09,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:55:09,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'progress_percentage': 57.1, 'elapsed_time': '0:10:03', 'estimated_completion': '16:01:22', 'stop_requested': False}
2025-07-12 15:55:09,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:10,376 INFO [analysis_service.py:928] [CROX] Gemini API call completed in 43.18 seconds
2025-07-12 15:55:10,376 INFO [analysis_service.py:931] Gemini raw response text length: 5227
2025-07-12 15:55:10,377 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  CROX는 주봉과 월봉에서 명확한 하락 추세를 보이고 있으며, 일봉상 최근의 기술적 반등은 현재 조정 국면에 진입했습니다.
2.  스윙 투자자는 107-108달러 저항선에서의 매도 기회 또는 97-100달러 지지선에서의 반등을 노리는 단기 매수 전략을 고려할 수 있습니다.
3.  매수 시에는 지지선에서 강한 매수 신호(캔들, 거래량) 및 지표 반전 확인 후 접근하고, 매도는 저항 도달 또는 단기 하락 추세 전환 시 실행해야 합니다.

---

**상세 분석**

주어진 CROX 종목의 OHLCV 데이터를 바탕으로 일봉, 주봉, 월봉 차트를 분석하고 스윙 투자자의 매수/매도 타이밍에 대한 의견을 개진하겠습니다.

**1. 일봉 분석 (최근 30일)**

*   **추세 분석:** 최근 한 달간 CROX 주가는 97.37달러(2025-06-23)에서 107.34달러(2025-07-03)까지 단기적인 반등세를 보였으나, 다시 103.75달러(2025-07-11)까...
2025-07-12 15:55:10,378 INFO [analysis_service.py:792] [CROX] Gemini AI analysis completed. Success: True
2025-07-12 15:55:10,378 INFO [analysis_service.py:797] [CROX] Extracting summary from Gemini analysis...
2025-07-12 15:55:10,379 INFO [analysis_service.py:799] [CROX] Summary extracted successfully
2025-07-12 15:55:10,379 INFO [analysis_service.py:802] [CROX] Getting indicator data for analysis...
2025-07-12 15:55:10,601 INFO [analysis_service.py:806] [CROX] Saving HTML analysis file...
2025-07-12 15:55:10,603 INFO [analysis_service.py:834] [CROX] HTML analysis file saved successfully with app_context
2025-07-12 15:55:10,603 INFO [analysis_service.py:840] [CROX] AI analysis process completed successfully
2025-07-12 15:55:10,641 INFO [batch_analysis_service.py:435] [CROX] New analysis completed successfully
2025-07-12 15:55:10,642 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:55:10,642 INFO [progress_service.py:24] Input params: ticker=NKE, processed=21, total=35, list_name=03 Watch (21/21)
2025-07-12 15:55:10,642 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'CROX', 'current_list': '03 Watch (20/21)', 'total_tickers': 35, 'processed_tickers': 20, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 22, 223358), 'stop_requested': False}
2025-07-12 15:55:10,643 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NKE', 'current_list': '03 Watch (21/21)', 'total_tickers': 35, 'processed_tickers': 21, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 53, 347244), 'stop_requested': False}
2025-07-12 15:55:10,643 INFO [batch_analysis_service.py:378] [NKE] Reusing existing files (within 1 hour)
2025-07-12 15:55:10,646 INFO [batch_analysis_service.py:502] Completed processing list '03 Watch' with 21 tickers
2025-07-12 15:55:10,647 INFO [batch_analysis_service.py:358] Processing list 2/2: '02 It' with 14 tickers
2025-07-12 15:55:10,647 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:55:10,648 INFO [progress_service.py:24] Input params: ticker=SPGI, processed=22, total=35, list_name=02 It (1/14)
2025-07-12 15:55:10,648 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NKE', 'current_list': '03 Watch (21/21)', 'total_tickers': 35, 'processed_tickers': 21, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 53, 347244), 'stop_requested': False}
2025-07-12 15:55:10,649 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:10,650 INFO [chart_service.py:116] [SPGI] Starting chart generation process...
2025-07-12 15:55:10,651 INFO [chart_service.py:123] [SPGI] Downloading data from yfinance...
2025-07-12 15:55:10,651 INFO [market_data_service.py:373] [SPGI] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:55:10,651 INFO [market_data_service.py:413] [SPGI] Trying Yahoo Finance first...
2025-07-12 15:55:10,652 INFO [market_data_service.py:324] [SPGI] Downloading chart data (attempt 1/2)...
2025-07-12 15:55:10,652 DEBUG [utils.py:96] Entering history()
2025-07-12 15:55:10,653 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPGI', 1, 0])
2025-07-12 15:55:10,654 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:55:10,655 DEBUG [history.py:165] SPGI: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:10,655 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:55:10,655 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:55:10,656 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPGI
2025-07-12 15:55:10,656 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:10,656 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:55:10,657 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:55:10,657 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:55:10,773 DEBUG [data.py:179] reusing crumb
2025-07-12 15:55:10,774 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:55:10,774 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:55:11,046 DEBUG [data.py:367] response code=200
2025-07-12 15:55:11,047 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:55:11,047 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:55:11,058 DEBUG [history.py:281] SPGI: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:55:11,062 DEBUG [history.py:318] SPGI: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:55:11,081 DEBUG [history.py:388] SPGI: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:11,087 DEBUG [history.py:467] SPGI: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:11,087 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:55:11,088 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:55:11,088 INFO [market_data_service.py:337] [SPGI] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:55:11,089 INFO [market_data_service.py:417] [SPGI] Yahoo Finance successful
2025-07-12 15:55:11,089 INFO [chart_service.py:125] [SPGI] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:55:11,091 INFO [chart_service.py:142] [SPGI] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:55:11,142 WARNING [chart_service.py:217] [SPGI] No saved MACD data found for d, calculating directly
2025-07-12 15:55:11,611 WARNING [chart_service.py:217] [SPGI] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:55:12,033 WARNING [chart_service.py:217] [SPGI] No saved MACD data found for m, calculating directly
2025-07-12 15:55:12,361 INFO [chart_service.py:154] [SPGI] Starting integrated indicator calculation and storage...
2025-07-12 15:55:12,362 INFO [indicator_service.py:483] [SPGI] Starting comprehensive indicator calculation and storage...
2025-07-12 15:55:12,373 INFO [indicator_service.py:54] [SPGI] Daily OHLCV data saved: SPGI_ohlcv_d_20250712_155512.csv
2025-07-12 15:55:12,383 INFO [indicator_service.py:68] [SPGI] Weekly OHLCV data saved: SPGI_ohlcv_w_20250712_155512.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:12,389 INFO [indicator_service.py:82] [SPGI] Monthly OHLCV data saved: SPGI_ohlcv_m_20250712_155512.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:12,406 INFO [indicator_service.py:116] [SPGI] EMA5 d data saved: SPGI_ema5_d_20250712_155512.csv
2025-07-12 15:55:12,413 INFO [indicator_service.py:116] [SPGI] EMA20 d data saved: SPGI_ema20_d_20250712_155512.csv
2025-07-12 15:55:12,421 INFO [indicator_service.py:116] [SPGI] EMA40 d data saved: SPGI_ema40_d_20250712_155512.csv
2025-07-12 15:55:12,436 INFO [indicator_service.py:139] [SPGI] MACD d data saved: SPGI_macd_d_20250712_155512.csv
2025-07-12 15:55:12,449 INFO [indicator_service.py:162] [SPGI] Bollinger Bands d data saved: SPGI_bollinger_d_20250712_155512.csv
2025-07-12 15:55:12,463 INFO [indicator_service.py:186] [SPGI] Ichimoku d data saved: SPGI_ichimoku_d_20250712_155512.csv
2025-07-12 15:55:12,472 INFO [indicator_service.py:207] [SPGI] RSI d data saved: SPGI_rsi_d_20250712_155512.csv
2025-07-12 15:55:12,481 INFO [indicator_service.py:229] [SPGI] Stochastic d data saved: SPGI_stochastic_d_20250712_155512.csv
2025-07-12 15:55:12,489 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d d data saved: SPGI_volume_ratio_5d_d_20250712_155512.csv
2025-07-12 15:55:12,495 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d d data saved: SPGI_volume_ratio_20d_d_20250712_155512.csv
2025-07-12 15:55:12,501 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d d data saved: SPGI_volume_ratio_40d_d_20250712_155512.csv
2025-07-12 15:55:12,506 INFO [indicator_service.py:116] [SPGI] EMA5 w data saved: SPGI_ema5_w_20250712_155512.csv
2025-07-12 15:55:12,509 INFO [indicator_service.py:116] [SPGI] EMA20 w data saved: SPGI_ema20_w_20250712_155512.csv
2025-07-12 15:55:12,512 INFO [indicator_service.py:116] [SPGI] EMA40 w data saved: SPGI_ema40_w_20250712_155512.csv
2025-07-12 15:55:12,518 INFO [indicator_service.py:139] [SPGI] MACD w data saved: SPGI_macd_w_20250712_155512.csv
2025-07-12 15:55:12,524 INFO [indicator_service.py:162] [SPGI] Bollinger Bands w data saved: SPGI_bollinger_w_20250712_155512.csv
2025-07-12 15:55:12,531 INFO [indicator_service.py:186] [SPGI] Ichimoku w data saved: SPGI_ichimoku_w_20250712_155512.csv
2025-07-12 15:55:12,536 INFO [indicator_service.py:207] [SPGI] RSI w data saved: SPGI_rsi_w_20250712_155512.csv
2025-07-12 15:55:12,541 INFO [indicator_service.py:229] [SPGI] Stochastic w data saved: SPGI_stochastic_w_20250712_155512.csv
2025-07-12 15:55:12,546 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d w data saved: SPGI_volume_ratio_5d_w_20250712_155512.csv
2025-07-12 15:55:12,549 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d w data saved: SPGI_volume_ratio_20d_w_20250712_155512.csv
2025-07-12 15:55:12,552 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d w data saved: SPGI_volume_ratio_40d_w_20250712_155512.csv
2025-07-12 15:55:12,557 INFO [indicator_service.py:116] [SPGI] EMA5 m data saved: SPGI_ema5_m_20250712_155512.csv
2025-07-12 15:55:12,559 INFO [indicator_service.py:116] [SPGI] EMA20 m data saved: SPGI_ema20_m_20250712_155512.csv
2025-07-12 15:55:12,561 INFO [indicator_service.py:116] [SPGI] EMA40 m data saved: SPGI_ema40_m_20250712_155512.csv
2025-07-12 15:55:12,565 INFO [indicator_service.py:139] [SPGI] MACD m data saved: SPGI_macd_m_20250712_155512.csv
2025-07-12 15:55:12,570 INFO [indicator_service.py:162] [SPGI] Bollinger Bands m data saved: SPGI_bollinger_m_20250712_155512.csv
2025-07-12 15:55:12,576 INFO [indicator_service.py:186] [SPGI] Ichimoku m data saved: SPGI_ichimoku_m_20250712_155512.csv
2025-07-12 15:55:12,580 INFO [indicator_service.py:207] [SPGI] RSI m data saved: SPGI_rsi_m_20250712_155512.csv
2025-07-12 15:55:12,585 INFO [indicator_service.py:229] [SPGI] Stochastic m data saved: SPGI_stochastic_m_20250712_155512.csv
2025-07-12 15:55:12,591 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d m data saved: SPGI_volume_ratio_5d_m_20250712_155512.csv
2025-07-12 15:55:12,592 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d m data saved: SPGI_volume_ratio_20d_m_20250712_155512.csv
2025-07-12 15:55:12,595 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d m data saved: SPGI_volume_ratio_40d_m_20250712_155512.csv
2025-07-12 15:55:12,595 INFO [indicator_service.py:539] [SPGI] All indicators calculated and saved successfully
2025-07-12 15:55:12,595 INFO [chart_service.py:158] [SPGI] Indicator calculation and storage completed successfully
2025-07-12 15:55:12,595 INFO [chart_service.py:165] [SPGI] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:55:12,598 INFO [analysis_service.py:348] [SPGI] Starting AI analysis process...
2025-07-12 15:55:12,598 INFO [analysis_service.py:356] [SPGI] Looking for chart files...
2025-07-12 15:55:12,602 INFO [analysis_service.py:413] [SPGI] Found Daily chart: SPGI_daily_20250712.png
2025-07-12 15:55:12,602 INFO [analysis_service.py:413] [SPGI] Found Weekly chart: SPGI_weekly_20250712.png
2025-07-12 15:55:12,603 INFO [analysis_service.py:413] [SPGI] Found Monthly chart: SPGI_monthly_20250712.png
2025-07-12 15:55:12,603 INFO [analysis_service.py:415] [SPGI] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:55:12,603 INFO [analysis_service.py:432] [SPGI] Chart image transmission disabled - using text-only analysis
2025-07-12 15:55:12,603 INFO [analysis_service.py:439] [SPGI] Determining data processing strategy based on market hours...
2025-07-12 15:55:12,604 INFO [analysis_service.py:463] [SPGI] US stock - Current EST: 15:55:12, Market hours: True
2025-07-12 15:55:12,604 INFO [analysis_service.py:470] [SPGI] Market hours detected - will download fresh data
2025-07-12 15:55:12,604 INFO [analysis_service.py:479] [SPGI] Downloading fresh data and calculating new indicators...
2025-07-12 15:55:12,604 INFO [analysis_service.py:155] [SPGI] Starting fresh data download and analysis...
2025-07-12 15:55:12,604 INFO [analysis_service.py:163] [SPGI] Downloading fresh stock data...
2025-07-12 15:55:12,604 INFO [market_data_service.py:373] [SPGI] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:55:12,605 INFO [market_data_service.py:413] [SPGI] Trying Yahoo Finance first...
2025-07-12 15:55:12,605 INFO [market_data_service.py:324] [SPGI] Downloading chart data (attempt 1/2)...
2025-07-12 15:55:12,605 DEBUG [utils.py:96] Entering history()
2025-07-12 15:55:12,606 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPGI', 1, 0])
2025-07-12 15:55:12,607 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:55:12,607 DEBUG [history.py:165] SPGI: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:12,608 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:55:12,608 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:55:12,608 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPGI
2025-07-12 15:55:12,608 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:12,609 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:55:12,609 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:55:12,609 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:55:12,712 DEBUG [data.py:179] reusing crumb
2025-07-12 15:55:12,712 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:55:12,713 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:55:12,908 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:12,908 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:06', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:12,908 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:12,946 DEBUG [data.py:367] response code=200
2025-07-12 15:55:12,947 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:55:12,947 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:55:12,952 DEBUG [history.py:281] SPGI: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:55:12,954 DEBUG [history.py:318] SPGI: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:55:12,963 DEBUG [history.py:388] SPGI: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:12,966 DEBUG [history.py:467] SPGI: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:12,966 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:55:12,966 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:55:12,967 INFO [market_data_service.py:337] [SPGI] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:55:12,967 INFO [market_data_service.py:417] [SPGI] Yahoo Finance successful
2025-07-12 15:55:12,968 INFO [analysis_service.py:178] [SPGI] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:55:12,968 INFO [analysis_service.py:181] [SPGI] Calculating and saving new indicators...
2025-07-12 15:55:12,968 INFO [indicator_service.py:483] [SPGI] Starting comprehensive indicator calculation and storage...
2025-07-12 15:55:12,978 INFO [indicator_service.py:54] [SPGI] Daily OHLCV data saved: SPGI_ohlcv_d_20250712_155512.csv
2025-07-12 15:55:12,987 INFO [indicator_service.py:68] [SPGI] Weekly OHLCV data saved: SPGI_ohlcv_w_20250712_155512.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:12,991 INFO [indicator_service.py:82] [SPGI] Monthly OHLCV data saved: SPGI_ohlcv_m_20250712_155512.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:13,008 INFO [indicator_service.py:116] [SPGI] EMA5 d data saved: SPGI_ema5_d_20250712_155512.csv
2025-07-12 15:55:13,013 INFO [indicator_service.py:116] [SPGI] EMA20 d data saved: SPGI_ema20_d_20250712_155512.csv
2025-07-12 15:55:13,020 INFO [indicator_service.py:116] [SPGI] EMA40 d data saved: SPGI_ema40_d_20250712_155512.csv
2025-07-12 15:55:13,033 INFO [indicator_service.py:139] [SPGI] MACD d data saved: SPGI_macd_d_20250712_155512.csv
2025-07-12 15:55:13,045 INFO [indicator_service.py:162] [SPGI] Bollinger Bands d data saved: SPGI_bollinger_d_20250712_155512.csv
2025-07-12 15:55:13,066 INFO [indicator_service.py:186] [SPGI] Ichimoku d data saved: SPGI_ichimoku_d_20250712_155512.csv
2025-07-12 15:55:13,079 INFO [indicator_service.py:207] [SPGI] RSI d data saved: SPGI_rsi_d_20250712_155512.csv
2025-07-12 15:55:13,090 INFO [indicator_service.py:229] [SPGI] Stochastic d data saved: SPGI_stochastic_d_20250712_155512.csv
2025-07-12 15:55:13,098 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d d data saved: SPGI_volume_ratio_5d_d_20250712_155512.csv
2025-07-12 15:55:13,104 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d d data saved: SPGI_volume_ratio_20d_d_20250712_155512.csv
2025-07-12 15:55:13,110 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d d data saved: SPGI_volume_ratio_40d_d_20250712_155512.csv
2025-07-12 15:55:13,114 INFO [indicator_service.py:116] [SPGI] EMA5 w data saved: SPGI_ema5_w_20250712_155512.csv
2025-07-12 15:55:13,117 INFO [indicator_service.py:116] [SPGI] EMA20 w data saved: SPGI_ema20_w_20250712_155512.csv
2025-07-12 15:55:13,120 INFO [indicator_service.py:116] [SPGI] EMA40 w data saved: SPGI_ema40_w_20250712_155512.csv
2025-07-12 15:55:13,125 INFO [indicator_service.py:139] [SPGI] MACD w data saved: SPGI_macd_w_20250712_155512.csv
2025-07-12 15:55:13,131 INFO [indicator_service.py:162] [SPGI] Bollinger Bands w data saved: SPGI_bollinger_w_20250712_155512.csv
2025-07-12 15:55:13,139 INFO [indicator_service.py:186] [SPGI] Ichimoku w data saved: SPGI_ichimoku_w_20250712_155512.csv
2025-07-12 15:55:13,143 INFO [indicator_service.py:207] [SPGI] RSI w data saved: SPGI_rsi_w_20250712_155512.csv
2025-07-12 15:55:13,147 INFO [indicator_service.py:229] [SPGI] Stochastic w data saved: SPGI_stochastic_w_20250712_155512.csv
2025-07-12 15:55:13,151 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d w data saved: SPGI_volume_ratio_5d_w_20250712_155512.csv
2025-07-12 15:55:13,154 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d w data saved: SPGI_volume_ratio_20d_w_20250712_155512.csv
2025-07-12 15:55:13,156 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d w data saved: SPGI_volume_ratio_40d_w_20250712_155512.csv
2025-07-12 15:55:13,159 INFO [indicator_service.py:116] [SPGI] EMA5 m data saved: SPGI_ema5_m_20250712_155512.csv
2025-07-12 15:55:13,161 INFO [indicator_service.py:116] [SPGI] EMA20 m data saved: SPGI_ema20_m_20250712_155512.csv
2025-07-12 15:55:13,162 INFO [indicator_service.py:116] [SPGI] EMA40 m data saved: SPGI_ema40_m_20250712_155512.csv
2025-07-12 15:55:13,166 INFO [indicator_service.py:139] [SPGI] MACD m data saved: SPGI_macd_m_20250712_155512.csv
2025-07-12 15:55:13,170 INFO [indicator_service.py:162] [SPGI] Bollinger Bands m data saved: SPGI_bollinger_m_20250712_155512.csv
2025-07-12 15:55:13,175 INFO [indicator_service.py:186] [SPGI] Ichimoku m data saved: SPGI_ichimoku_m_20250712_155512.csv
2025-07-12 15:55:13,179 INFO [indicator_service.py:207] [SPGI] RSI m data saved: SPGI_rsi_m_20250712_155512.csv
2025-07-12 15:55:13,182 INFO [indicator_service.py:229] [SPGI] Stochastic m data saved: SPGI_stochastic_m_20250712_155512.csv
2025-07-12 15:55:13,189 INFO [indicator_service.py:267] [SPGI] Volume Ratio 5d m data saved: SPGI_volume_ratio_5d_m_20250712_155512.csv
2025-07-12 15:55:13,191 INFO [indicator_service.py:267] [SPGI] Volume Ratio 20d m data saved: SPGI_volume_ratio_20d_m_20250712_155512.csv
2025-07-12 15:55:13,192 INFO [indicator_service.py:267] [SPGI] Volume Ratio 40d m data saved: SPGI_volume_ratio_40d_m_20250712_155512.csv
2025-07-12 15:55:13,192 INFO [indicator_service.py:539] [SPGI] All indicators calculated and saved successfully
2025-07-12 15:55:13,258 INFO [analysis_service.py:209] [SPGI] Fresh indicators calculated successfully
2025-07-12 15:55:13,258 INFO [analysis_service.py:210] [SPGI] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:55:13,966 INFO [analysis_service.py:790] [SPGI] Starting Gemini AI analysis...
2025-07-12 15:55:13,966 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 SPGI 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:55:15,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:15,890 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:09', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:15,891 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:18,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:18,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:12', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:18,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:18] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:21,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:21,901 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:15', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:21,902 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:21] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:24,900 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:24,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:18', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:24,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:24] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:27,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:27,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:21', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:27,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:27] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:30,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:30,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:24', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:30,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:30] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:33,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:33,904 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:27', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:33,905 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:33] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:36,903 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:36,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:30', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:36,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:36] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:39,899 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:39,900 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:33', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:39,901 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:39] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:42,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:42,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:36', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:42,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:42] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:45,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:45,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'progress_percentage': 62.9, 'elapsed_time': '0:10:39', 'estimated_completion': '16:01:07', 'stop_requested': False}
2025-07-12 15:55:45,899 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:45] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:46,592 INFO [analysis_service.py:928] [SPGI] Gemini API call completed in 32.63 seconds
2025-07-12 15:55:46,593 INFO [analysis_service.py:931] Gemini raw response text length: 4622
2025-07-12 15:55:46,594 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  SPGI는 월봉 및 주봉 차트에서 강력한 장기 상승 추세를 보이며 모든 기술적 지표가 긍정적입니다.
2.  일봉 차트에서는 최근 고점 갱신 후 횡보하며 단기 모멘텀이 둔화되었으나, 주요 지지선들이 견고하게 작용하고 있습니다.
3.  스윙 투자자는 520-525 달러 구간에서 지지 확인 시 분할 매수를 고려하고, 단기 고점 돌파 실패 시 이익을 실현하며 리스크를 관리해야 합니다.

---

**SPGI 종목 차트 분석 및 스윙 투자 의견**

**상세 분석**

**1. 일봉 차트 분석 (최근 30일)**

*   **가격 움직임 및 추세:** SPGI는 2025년 6월 중순 500달러 초반에서 반등하여 6월 말 520달러 중반, 7월 초 530달러 초반까지 상승하며 견조한 상승세를 보였습니다. 최근(7월 8일~11일)에는 525-530달러 범위 내에서 횡보하며 단기 상승 모멘텀이 다소 둔화된 모습입니다. 현재 종가는 527.07달러입니다.
*   **이동평균...
2025-07-12 15:55:46,594 INFO [analysis_service.py:792] [SPGI] Gemini AI analysis completed. Success: True
2025-07-12 15:55:46,595 INFO [analysis_service.py:797] [SPGI] Extracting summary from Gemini analysis...
2025-07-12 15:55:46,596 INFO [analysis_service.py:799] [SPGI] Summary extracted successfully
2025-07-12 15:55:46,596 INFO [analysis_service.py:802] [SPGI] Getting indicator data for analysis...
2025-07-12 15:55:46,824 INFO [analysis_service.py:806] [SPGI] Saving HTML analysis file...
2025-07-12 15:55:46,826 INFO [analysis_service.py:834] [SPGI] HTML analysis file saved successfully with app_context
2025-07-12 15:55:46,826 INFO [analysis_service.py:840] [SPGI] AI analysis process completed successfully
2025-07-12 15:55:46,859 INFO [batch_analysis_service.py:435] [SPGI] New analysis completed successfully
2025-07-12 15:55:46,859 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:55:46,859 INFO [progress_service.py:24] Input params: ticker=UBER, processed=23, total=35, list_name=02 It (2/14)
2025-07-12 15:55:46,859 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SPGI', 'current_list': '02 It (1/14)', 'total_tickers': 35, 'processed_tickers': 22, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 7, 594757), 'stop_requested': False}
2025-07-12 15:55:46,860 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:55:46,860 INFO [chart_service.py:116] [UBER] Starting chart generation process...
2025-07-12 15:55:46,861 INFO [chart_service.py:123] [UBER] Downloading data from yfinance...
2025-07-12 15:55:46,861 INFO [market_data_service.py:373] [UBER] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:55:46,861 INFO [market_data_service.py:413] [UBER] Trying Yahoo Finance first...
2025-07-12 15:55:46,862 INFO [market_data_service.py:324] [UBER] Downloading chart data (attempt 1/2)...
2025-07-12 15:55:46,862 DEBUG [utils.py:96] Entering history()
2025-07-12 15:55:46,862 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UBER', 1, 0])
2025-07-12 15:55:46,863 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:55:46,864 DEBUG [history.py:165] UBER: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:46,864 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:55:46,864 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:55:46,865 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UBER
2025-07-12 15:55:46,865 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:46,865 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:55:46,865 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:55:46,866 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:55:46,950 DEBUG [data.py:179] reusing crumb
2025-07-12 15:55:46,950 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:55:46,951 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:55:47,136 DEBUG [data.py:367] response code=200
2025-07-12 15:55:47,137 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:55:47,137 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:55:47,148 DEBUG [history.py:281] UBER: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:55:47,151 DEBUG [history.py:318] UBER: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:55:47,160 DEBUG [history.py:388] UBER: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:47,165 DEBUG [history.py:467] UBER: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:47,166 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:55:47,167 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:55:47,167 INFO [market_data_service.py:337] [UBER] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:55:47,168 INFO [market_data_service.py:417] [UBER] Yahoo Finance successful
2025-07-12 15:55:47,168 INFO [chart_service.py:125] [UBER] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:55:47,171 INFO [chart_service.py:142] [UBER] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:55:47,246 WARNING [chart_service.py:217] [UBER] No saved MACD data found for d, calculating directly
2025-07-12 15:55:47,706 WARNING [chart_service.py:217] [UBER] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:55:48,280 WARNING [chart_service.py:217] [UBER] No saved MACD data found for m, calculating directly
2025-07-12 15:55:48,581 INFO [chart_service.py:154] [UBER] Starting integrated indicator calculation and storage...
2025-07-12 15:55:48,582 INFO [indicator_service.py:483] [UBER] Starting comprehensive indicator calculation and storage...
2025-07-12 15:55:48,594 INFO [indicator_service.py:54] [UBER] Daily OHLCV data saved: UBER_ohlcv_d_20250712_155548.csv
2025-07-12 15:55:48,603 INFO [indicator_service.py:68] [UBER] Weekly OHLCV data saved: UBER_ohlcv_w_20250712_155548.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:48,610 INFO [indicator_service.py:82] [UBER] Monthly OHLCV data saved: UBER_ohlcv_m_20250712_155548.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:48,627 INFO [indicator_service.py:116] [UBER] EMA5 d data saved: UBER_ema5_d_20250712_155548.csv
2025-07-12 15:55:48,632 INFO [indicator_service.py:116] [UBER] EMA20 d data saved: UBER_ema20_d_20250712_155548.csv
2025-07-12 15:55:48,640 INFO [indicator_service.py:116] [UBER] EMA40 d data saved: UBER_ema40_d_20250712_155548.csv
2025-07-12 15:55:48,650 INFO [indicator_service.py:139] [UBER] MACD d data saved: UBER_macd_d_20250712_155548.csv
2025-07-12 15:55:48,664 INFO [indicator_service.py:162] [UBER] Bollinger Bands d data saved: UBER_bollinger_d_20250712_155548.csv
2025-07-12 15:55:48,678 INFO [indicator_service.py:186] [UBER] Ichimoku d data saved: UBER_ichimoku_d_20250712_155548.csv
2025-07-12 15:55:48,686 INFO [indicator_service.py:207] [UBER] RSI d data saved: UBER_rsi_d_20250712_155548.csv
2025-07-12 15:55:48,696 INFO [indicator_service.py:229] [UBER] Stochastic d data saved: UBER_stochastic_d_20250712_155548.csv
2025-07-12 15:55:48,705 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d d data saved: UBER_volume_ratio_5d_d_20250712_155548.csv
2025-07-12 15:55:48,711 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d d data saved: UBER_volume_ratio_20d_d_20250712_155548.csv
2025-07-12 15:55:48,716 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d d data saved: UBER_volume_ratio_40d_d_20250712_155548.csv
2025-07-12 15:55:48,722 INFO [indicator_service.py:116] [UBER] EMA5 w data saved: UBER_ema5_w_20250712_155548.csv
2025-07-12 15:55:48,725 INFO [indicator_service.py:116] [UBER] EMA20 w data saved: UBER_ema20_w_20250712_155548.csv
2025-07-12 15:55:48,728 INFO [indicator_service.py:116] [UBER] EMA40 w data saved: UBER_ema40_w_20250712_155548.csv
2025-07-12 15:55:48,733 INFO [indicator_service.py:139] [UBER] MACD w data saved: UBER_macd_w_20250712_155548.csv
2025-07-12 15:55:48,740 INFO [indicator_service.py:162] [UBER] Bollinger Bands w data saved: UBER_bollinger_w_20250712_155548.csv
2025-07-12 15:55:48,747 INFO [indicator_service.py:186] [UBER] Ichimoku w data saved: UBER_ichimoku_w_20250712_155548.csv
2025-07-12 15:55:48,752 INFO [indicator_service.py:207] [UBER] RSI w data saved: UBER_rsi_w_20250712_155548.csv
2025-07-12 15:55:48,757 INFO [indicator_service.py:229] [UBER] Stochastic w data saved: UBER_stochastic_w_20250712_155548.csv
2025-07-12 15:55:48,762 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d w data saved: UBER_volume_ratio_5d_w_20250712_155548.csv
2025-07-12 15:55:48,765 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d w data saved: UBER_volume_ratio_20d_w_20250712_155548.csv
2025-07-12 15:55:48,767 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d w data saved: UBER_volume_ratio_40d_w_20250712_155548.csv
2025-07-12 15:55:48,772 INFO [indicator_service.py:116] [UBER] EMA5 m data saved: UBER_ema5_m_20250712_155548.csv
2025-07-12 15:55:48,774 INFO [indicator_service.py:116] [UBER] EMA20 m data saved: UBER_ema20_m_20250712_155548.csv
2025-07-12 15:55:48,776 INFO [indicator_service.py:116] [UBER] EMA40 m data saved: UBER_ema40_m_20250712_155548.csv
2025-07-12 15:55:48,780 INFO [indicator_service.py:139] [UBER] MACD m data saved: UBER_macd_m_20250712_155548.csv
2025-07-12 15:55:48,784 INFO [indicator_service.py:162] [UBER] Bollinger Bands m data saved: UBER_bollinger_m_20250712_155548.csv
2025-07-12 15:55:48,791 INFO [indicator_service.py:186] [UBER] Ichimoku m data saved: UBER_ichimoku_m_20250712_155548.csv
2025-07-12 15:55:48,795 INFO [indicator_service.py:207] [UBER] RSI m data saved: UBER_rsi_m_20250712_155548.csv
2025-07-12 15:55:48,799 INFO [indicator_service.py:229] [UBER] Stochastic m data saved: UBER_stochastic_m_20250712_155548.csv
2025-07-12 15:55:48,804 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d m data saved: UBER_volume_ratio_5d_m_20250712_155548.csv
2025-07-12 15:55:48,806 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d m data saved: UBER_volume_ratio_20d_m_20250712_155548.csv
2025-07-12 15:55:48,809 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d m data saved: UBER_volume_ratio_40d_m_20250712_155548.csv
2025-07-12 15:55:48,809 INFO [indicator_service.py:539] [UBER] All indicators calculated and saved successfully
2025-07-12 15:55:48,810 INFO [chart_service.py:158] [UBER] Indicator calculation and storage completed successfully
2025-07-12 15:55:48,810 INFO [chart_service.py:165] [UBER] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:55:48,812 INFO [analysis_service.py:348] [UBER] Starting AI analysis process...
2025-07-12 15:55:48,812 INFO [analysis_service.py:356] [UBER] Looking for chart files...
2025-07-12 15:55:48,816 INFO [analysis_service.py:413] [UBER] Found Daily chart: UBER_daily_20250712.png
2025-07-12 15:55:48,816 INFO [analysis_service.py:413] [UBER] Found Weekly chart: UBER_weekly_20250712.png
2025-07-12 15:55:48,816 INFO [analysis_service.py:413] [UBER] Found Monthly chart: UBER_monthly_20250712.png
2025-07-12 15:55:48,816 INFO [analysis_service.py:415] [UBER] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:55:48,817 INFO [analysis_service.py:432] [UBER] Chart image transmission disabled - using text-only analysis
2025-07-12 15:55:48,817 INFO [analysis_service.py:439] [UBER] Determining data processing strategy based on market hours...
2025-07-12 15:55:48,817 INFO [analysis_service.py:463] [UBER] US stock - Current EST: 15:55:48, Market hours: True
2025-07-12 15:55:48,817 INFO [analysis_service.py:470] [UBER] Market hours detected - will download fresh data
2025-07-12 15:55:48,817 INFO [analysis_service.py:479] [UBER] Downloading fresh data and calculating new indicators...
2025-07-12 15:55:48,818 INFO [analysis_service.py:155] [UBER] Starting fresh data download and analysis...
2025-07-12 15:55:48,818 INFO [analysis_service.py:163] [UBER] Downloading fresh stock data...
2025-07-12 15:55:48,818 INFO [market_data_service.py:373] [UBER] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:55:48,818 INFO [market_data_service.py:413] [UBER] Trying Yahoo Finance first...
2025-07-12 15:55:48,818 INFO [market_data_service.py:324] [UBER] Downloading chart data (attempt 1/2)...
2025-07-12 15:55:48,819 DEBUG [utils.py:96] Entering history()
2025-07-12 15:55:48,819 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UBER', 1, 0])
2025-07-12 15:55:48,821 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:55:48,822 DEBUG [history.py:165] UBER: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:48,822 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:55:48,822 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:55:48,822 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UBER
2025-07-12 15:55:48,822 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:55:48,822 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:55:48,822 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:55:48,823 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:55:48,890 DEBUG [data.py:179] reusing crumb
2025-07-12 15:55:48,890 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:55:48,890 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:55:48,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:55:48,897 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:42', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:55:48,898 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:48] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:49,062 DEBUG [data.py:367] response code=200
2025-07-12 15:55:49,062 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:55:49,062 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:55:49,067 DEBUG [history.py:281] UBER: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:55:49,069 DEBUG [history.py:318] UBER: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:55:49,073 DEBUG [history.py:388] UBER: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:49,076 DEBUG [history.py:467] UBER: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:55:49,076 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:55:49,077 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:55:49,077 INFO [market_data_service.py:337] [UBER] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:55:49,077 INFO [market_data_service.py:417] [UBER] Yahoo Finance successful
2025-07-12 15:55:49,077 INFO [analysis_service.py:178] [UBER] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:55:49,078 INFO [analysis_service.py:181] [UBER] Calculating and saving new indicators...
2025-07-12 15:55:49,078 INFO [indicator_service.py:483] [UBER] Starting comprehensive indicator calculation and storage...
2025-07-12 15:55:49,090 INFO [indicator_service.py:54] [UBER] Daily OHLCV data saved: UBER_ohlcv_d_20250712_155549.csv
2025-07-12 15:55:49,100 INFO [indicator_service.py:68] [UBER] Weekly OHLCV data saved: UBER_ohlcv_w_20250712_155549.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:49,107 INFO [indicator_service.py:82] [UBER] Monthly OHLCV data saved: UBER_ohlcv_m_20250712_155549.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:55:49,173 INFO [indicator_service.py:116] [UBER] EMA5 d data saved: UBER_ema5_d_20250712_155549.csv
2025-07-12 15:55:49,180 INFO [indicator_service.py:116] [UBER] EMA20 d data saved: UBER_ema20_d_20250712_155549.csv
2025-07-12 15:55:49,185 INFO [indicator_service.py:116] [UBER] EMA40 d data saved: UBER_ema40_d_20250712_155549.csv
2025-07-12 15:55:49,198 INFO [indicator_service.py:139] [UBER] MACD d data saved: UBER_macd_d_20250712_155549.csv
2025-07-12 15:55:49,210 INFO [indicator_service.py:162] [UBER] Bollinger Bands d data saved: UBER_bollinger_d_20250712_155549.csv
2025-07-12 15:55:49,232 INFO [indicator_service.py:186] [UBER] Ichimoku d data saved: UBER_ichimoku_d_20250712_155549.csv
2025-07-12 15:55:49,245 INFO [indicator_service.py:207] [UBER] RSI d data saved: UBER_rsi_d_20250712_155549.csv
2025-07-12 15:55:49,260 INFO [indicator_service.py:229] [UBER] Stochastic d data saved: UBER_stochastic_d_20250712_155549.csv
2025-07-12 15:55:49,270 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d d data saved: UBER_volume_ratio_5d_d_20250712_155549.csv
2025-07-12 15:55:49,279 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d d data saved: UBER_volume_ratio_20d_d_20250712_155549.csv
2025-07-12 15:55:49,285 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d d data saved: UBER_volume_ratio_40d_d_20250712_155549.csv
2025-07-12 15:55:49,291 INFO [indicator_service.py:116] [UBER] EMA5 w data saved: UBER_ema5_w_20250712_155549.csv
2025-07-12 15:55:49,294 INFO [indicator_service.py:116] [UBER] EMA20 w data saved: UBER_ema20_w_20250712_155549.csv
2025-07-12 15:55:49,297 INFO [indicator_service.py:116] [UBER] EMA40 w data saved: UBER_ema40_w_20250712_155549.csv
2025-07-12 15:55:49,302 INFO [indicator_service.py:139] [UBER] MACD w data saved: UBER_macd_w_20250712_155549.csv
2025-07-12 15:55:49,309 INFO [indicator_service.py:162] [UBER] Bollinger Bands w data saved: UBER_bollinger_w_20250712_155549.csv
2025-07-12 15:55:49,316 INFO [indicator_service.py:186] [UBER] Ichimoku w data saved: UBER_ichimoku_w_20250712_155549.csv
2025-07-12 15:55:49,321 INFO [indicator_service.py:207] [UBER] RSI w data saved: UBER_rsi_w_20250712_155549.csv
2025-07-12 15:55:49,326 INFO [indicator_service.py:229] [UBER] Stochastic w data saved: UBER_stochastic_w_20250712_155549.csv
2025-07-12 15:55:49,331 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d w data saved: UBER_volume_ratio_5d_w_20250712_155549.csv
2025-07-12 15:55:49,334 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d w data saved: UBER_volume_ratio_20d_w_20250712_155549.csv
2025-07-12 15:55:49,336 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d w data saved: UBER_volume_ratio_40d_w_20250712_155549.csv
2025-07-12 15:55:49,340 INFO [indicator_service.py:116] [UBER] EMA5 m data saved: UBER_ema5_m_20250712_155549.csv
2025-07-12 15:55:49,342 INFO [indicator_service.py:116] [UBER] EMA20 m data saved: UBER_ema20_m_20250712_155549.csv
2025-07-12 15:55:49,344 INFO [indicator_service.py:116] [UBER] EMA40 m data saved: UBER_ema40_m_20250712_155549.csv
2025-07-12 15:55:49,348 INFO [indicator_service.py:139] [UBER] MACD m data saved: UBER_macd_m_20250712_155549.csv
2025-07-12 15:55:49,352 INFO [indicator_service.py:162] [UBER] Bollinger Bands m data saved: UBER_bollinger_m_20250712_155549.csv
2025-07-12 15:55:49,360 INFO [indicator_service.py:186] [UBER] Ichimoku m data saved: UBER_ichimoku_m_20250712_155549.csv
2025-07-12 15:55:49,365 INFO [indicator_service.py:207] [UBER] RSI m data saved: UBER_rsi_m_20250712_155549.csv
2025-07-12 15:55:49,369 INFO [indicator_service.py:229] [UBER] Stochastic m data saved: UBER_stochastic_m_20250712_155549.csv
2025-07-12 15:55:49,375 INFO [indicator_service.py:267] [UBER] Volume Ratio 5d m data saved: UBER_volume_ratio_5d_m_20250712_155549.csv
2025-07-12 15:55:49,377 INFO [indicator_service.py:267] [UBER] Volume Ratio 20d m data saved: UBER_volume_ratio_20d_m_20250712_155549.csv
2025-07-12 15:55:49,380 INFO [indicator_service.py:267] [UBER] Volume Ratio 40d m data saved: UBER_volume_ratio_40d_m_20250712_155549.csv
2025-07-12 15:55:49,380 INFO [indicator_service.py:539] [UBER] All indicators calculated and saved successfully
2025-07-12 15:55:49,446 INFO [analysis_service.py:209] [UBER] Fresh indicators calculated successfully
2025-07-12 15:55:49,447 INFO [analysis_service.py:210] [UBER] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:55:50,190 INFO [analysis_service.py:790] [UBER] Starting Gemini AI analysis...
2025-07-12 15:55:50,190 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 UBER 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:55:51,897 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:55:51,898 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:45', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:55:51,900 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:51] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:54,896 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:55:54,896 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:48', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:55:54,897 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:54] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:55:57,889 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:55:57,889 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:51', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:55:57,890 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:55:57] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:00,902 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:00,903 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:54', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:00,904 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:00] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:03,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:03,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:10:57', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:03,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:03] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:06,892 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:06,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:00', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:06,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:06] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:09,893 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:09,893 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:03', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:09,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:09] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:12,907 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:12,908 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:06', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:12,908 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:12] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:15,901 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:15,902 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:09', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:15,903 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:15] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:19,862 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:19,863 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:13', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:19,864 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:19] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:22,865 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:22,866 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'progress_percentage': 65.7, 'elapsed_time': '0:11:16', 'estimated_completion': '16:01:20', 'stop_requested': False}
2025-07-12 15:56:22,866 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:22] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:24,436 INFO [analysis_service.py:928] [UBER] Gemini API call completed in 34.25 seconds
2025-07-12 15:56:24,437 INFO [analysis_service.py:931] Gemini raw response text length: 5761
2025-07-12 15:56:24,438 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  UBER 주가는 일봉, 주봉, 월봉 모두에서 강력한 상승 추세를 유지하고 있으며, 특히 최근 일봉상 급등 후 건강한 조정을 보이고 있습니다.
2.  스윙 투자자는 일봉상 5일 또는 20일 EMA와 같은 핵심 지지선으로의 눌림목에서 매수 기회를 탐색하되, MACD 및 볼린저밴드 지표를 통해 상승 모멘텀의 재확인을 기다리는 것이 좋습니다.
3.  매도 타이밍은 단기 과열 시 또는 주요 지지선 이탈 시 고려하며, 손절매 라인을 설정하여 위험을 철저히 관리해야 합니다.

---

**상세 분석**

UBER의 OHLCV 데이터를 기반으로 EMA(지수이동평균), MACD(이동평균수렴확산), 볼린저밴드, 일목균형표를 계산하고 분석하여 스윙 투자 관점에서의 매수 및 매도 타이밍을 제시합니다.

**1. 일봉 분석 (최근 30일)**

*   **가격 움직임 및 추세:** 5월 말 $87선에서 $82선으로 하락 후 6월 중순까지 $82-$87 범위에서 횡보하는 모습을 보였...
2025-07-12 15:56:24,439 INFO [analysis_service.py:792] [UBER] Gemini AI analysis completed. Success: True
2025-07-12 15:56:24,440 INFO [analysis_service.py:797] [UBER] Extracting summary from Gemini analysis...
2025-07-12 15:56:24,441 INFO [analysis_service.py:799] [UBER] Summary extracted successfully
2025-07-12 15:56:24,441 INFO [analysis_service.py:802] [UBER] Getting indicator data for analysis...
2025-07-12 15:56:24,696 INFO [analysis_service.py:806] [UBER] Saving HTML analysis file...
2025-07-12 15:56:24,698 INFO [analysis_service.py:834] [UBER] HTML analysis file saved successfully with app_context
2025-07-12 15:56:24,698 INFO [analysis_service.py:840] [UBER] AI analysis process completed successfully
2025-07-12 15:56:24,730 INFO [batch_analysis_service.py:435] [UBER] New analysis completed successfully
2025-07-12 15:56:24,731 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:56:24,731 INFO [progress_service.py:24] Input params: ticker=DELL, processed=24, total=35, list_name=02 It (3/14)
2025-07-12 15:56:24,731 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'UBER', 'current_list': '02 It (2/14)', 'total_tickers': 35, 'processed_tickers': 23, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 20, 915370), 'stop_requested': False}
2025-07-12 15:56:24,731 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DELL', 'current_list': '02 It (3/14)', 'total_tickers': 35, 'processed_tickers': 24, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 35, 547880), 'stop_requested': False}
2025-07-12 15:56:24,732 INFO [batch_analysis_service.py:378] [DELL] Reusing existing files (within 1 hour)
2025-07-12 15:56:24,733 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:56:24,734 INFO [progress_service.py:24] Input params: ticker=META, processed=25, total=35, list_name=02 It (4/14)
2025-07-12 15:56:24,734 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'DELL', 'current_list': '02 It (3/14)', 'total_tickers': 35, 'processed_tickers': 24, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 1, 35, 547880), 'stop_requested': False}
2025-07-12 15:56:24,734 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'META', 'current_list': '02 It (4/14)', 'total_tickers': 35, 'processed_tickers': 25, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 55, 993641), 'stop_requested': False}
2025-07-12 15:56:24,735 INFO [batch_analysis_service.py:378] [META] Reusing existing files (within 1 hour)
2025-07-12 15:56:24,736 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:56:24,737 INFO [progress_service.py:24] Input params: ticker=QRVO, processed=26, total=35, list_name=02 It (5/14)
2025-07-12 15:56:24,737 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'META', 'current_list': '02 It (4/14)', 'total_tickers': 35, 'processed_tickers': 25, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 55, 993641), 'stop_requested': False}
2025-07-12 15:56:24,737 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'QRVO', 'current_list': '02 It (5/14)', 'total_tickers': 35, 'processed_tickers': 26, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 19, 481717), 'stop_requested': False}
2025-07-12 15:56:24,737 INFO [batch_analysis_service.py:378] [QRVO] Reusing existing files (within 1 hour)
2025-07-12 15:56:24,739 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:56:24,739 INFO [progress_service.py:24] Input params: ticker=SWKS, processed=27, total=35, list_name=02 It (6/14)
2025-07-12 15:56:24,740 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'QRVO', 'current_list': '02 It (5/14)', 'total_tickers': 35, 'processed_tickers': 26, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 19, 481717), 'stop_requested': False}
2025-07-12 15:56:24,740 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:24,741 INFO [chart_service.py:116] [SWKS] Starting chart generation process...
2025-07-12 15:56:24,741 INFO [chart_service.py:123] [SWKS] Downloading data from yfinance...
2025-07-12 15:56:24,742 INFO [market_data_service.py:373] [SWKS] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:56:24,742 INFO [market_data_service.py:413] [SWKS] Trying Yahoo Finance first...
2025-07-12 15:56:24,742 INFO [market_data_service.py:324] [SWKS] Downloading chart data (attempt 1/2)...
2025-07-12 15:56:24,742 DEBUG [utils.py:96] Entering history()
2025-07-12 15:56:24,743 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SWKS', 1, 0])
2025-07-12 15:56:24,744 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:56:24,744 DEBUG [history.py:165] SWKS: Yahoo GET parameters: {'period1': '2020-06-13 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:56:24,744 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:56:24,745 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:56:24,745 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SWKS
2025-07-12 15:56:24,745 DEBUG [data.py:344] params={'period1': 1592020800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:56:24,745 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:56:24,745 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:56:24,746 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:56:24,889 DEBUG [data.py:179] reusing crumb
2025-07-12 15:56:24,889 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:56:24,890 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:56:25,075 DEBUG [data.py:367] response code=200
2025-07-12 15:56:25,076 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:56:25,076 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:56:25,090 DEBUG [history.py:281] SWKS: yfinance received OHLC data: 2020-06-15 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:56:25,093 DEBUG [history.py:318] SWKS: OHLC after cleaning: 2020-06-15 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:56:25,113 DEBUG [history.py:388] SWKS: OHLC after combining events: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:56:25,119 DEBUG [history.py:467] SWKS: yfinance returning OHLC: 2020-06-15 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:56:25,120 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:56:25,120 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:56:25,121 INFO [market_data_service.py:337] [SWKS] Chart data downloaded successfully. Shape: (1275, 8)
2025-07-12 15:56:25,121 INFO [market_data_service.py:417] [SWKS] Yahoo Finance successful
2025-07-12 15:56:25,122 INFO [chart_service.py:125] [SWKS] Data download completed. DataFrame shape: (1275, 8)
2025-07-12 15:56:25,124 INFO [chart_service.py:142] [SWKS] Data preprocessing completed. Final DataFrame shape: (1275, 5)
2025-07-12 15:56:25,194 WARNING [chart_service.py:217] [SWKS] No saved MACD data found for d, calculating directly
2025-07-12 15:56:25,631 WARNING [chart_service.py:217] [SWKS] No saved MACD data found for w, calculating directly
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:56:25,866 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:25,867 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:19', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:25,868 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:25] "GET /get_current_progress HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\chart_service.py:150: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_df = df.resample("M").agg({"Open": "first", "High": "max", "Low": "min", "Close": "last", "Volume": "sum"}).dropna()
2025-07-12 15:56:26,077 WARNING [chart_service.py:217] [SWKS] No saved MACD data found for m, calculating directly
2025-07-12 15:56:26,420 INFO [chart_service.py:154] [SWKS] Starting integrated indicator calculation and storage...
2025-07-12 15:56:26,420 INFO [indicator_service.py:483] [SWKS] Starting comprehensive indicator calculation and storage...
2025-07-12 15:56:26,431 INFO [indicator_service.py:54] [SWKS] Daily OHLCV data saved: SWKS_ohlcv_d_20250712_155626.csv
2025-07-12 15:56:26,440 INFO [indicator_service.py:68] [SWKS] Weekly OHLCV data saved: SWKS_ohlcv_w_20250712_155626.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:56:26,446 INFO [indicator_service.py:82] [SWKS] Monthly OHLCV data saved: SWKS_ohlcv_m_20250712_155626.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:56:26,462 INFO [indicator_service.py:116] [SWKS] EMA5 d data saved: SWKS_ema5_d_20250712_155626.csv
2025-07-12 15:56:26,467 INFO [indicator_service.py:116] [SWKS] EMA20 d data saved: SWKS_ema20_d_20250712_155626.csv
2025-07-12 15:56:26,474 INFO [indicator_service.py:116] [SWKS] EMA40 d data saved: SWKS_ema40_d_20250712_155626.csv
2025-07-12 15:56:26,485 INFO [indicator_service.py:139] [SWKS] MACD d data saved: SWKS_macd_d_20250712_155626.csv
2025-07-12 15:56:26,496 INFO [indicator_service.py:162] [SWKS] Bollinger Bands d data saved: SWKS_bollinger_d_20250712_155626.csv
2025-07-12 15:56:26,510 INFO [indicator_service.py:186] [SWKS] Ichimoku d data saved: SWKS_ichimoku_d_20250712_155626.csv
2025-07-12 15:56:26,518 INFO [indicator_service.py:207] [SWKS] RSI d data saved: SWKS_rsi_d_20250712_155626.csv
2025-07-12 15:56:26,529 INFO [indicator_service.py:229] [SWKS] Stochastic d data saved: SWKS_stochastic_d_20250712_155626.csv
2025-07-12 15:56:26,537 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d d data saved: SWKS_volume_ratio_5d_d_20250712_155626.csv
2025-07-12 15:56:26,543 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d d data saved: SWKS_volume_ratio_20d_d_20250712_155626.csv
2025-07-12 15:56:26,548 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d d data saved: SWKS_volume_ratio_40d_d_20250712_155626.csv
2025-07-12 15:56:26,553 INFO [indicator_service.py:116] [SWKS] EMA5 w data saved: SWKS_ema5_w_20250712_155626.csv
2025-07-12 15:56:26,555 INFO [indicator_service.py:116] [SWKS] EMA20 w data saved: SWKS_ema20_w_20250712_155626.csv
2025-07-12 15:56:26,558 INFO [indicator_service.py:116] [SWKS] EMA40 w data saved: SWKS_ema40_w_20250712_155626.csv
2025-07-12 15:56:26,564 INFO [indicator_service.py:139] [SWKS] MACD w data saved: SWKS_macd_w_20250712_155626.csv
2025-07-12 15:56:26,569 INFO [indicator_service.py:162] [SWKS] Bollinger Bands w data saved: SWKS_bollinger_w_20250712_155626.csv
2025-07-12 15:56:26,580 INFO [indicator_service.py:186] [SWKS] Ichimoku w data saved: SWKS_ichimoku_w_20250712_155626.csv
2025-07-12 15:56:26,584 INFO [indicator_service.py:207] [SWKS] RSI w data saved: SWKS_rsi_w_20250712_155626.csv
2025-07-12 15:56:26,590 INFO [indicator_service.py:229] [SWKS] Stochastic w data saved: SWKS_stochastic_w_20250712_155626.csv
2025-07-12 15:56:26,594 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d w data saved: SWKS_volume_ratio_5d_w_20250712_155626.csv
2025-07-12 15:56:26,597 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d w data saved: SWKS_volume_ratio_20d_w_20250712_155626.csv
2025-07-12 15:56:26,599 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d w data saved: SWKS_volume_ratio_40d_w_20250712_155626.csv
2025-07-12 15:56:26,604 INFO [indicator_service.py:116] [SWKS] EMA5 m data saved: SWKS_ema5_m_20250712_155626.csv
2025-07-12 15:56:26,607 INFO [indicator_service.py:116] [SWKS] EMA20 m data saved: SWKS_ema20_m_20250712_155626.csv
2025-07-12 15:56:26,609 INFO [indicator_service.py:116] [SWKS] EMA40 m data saved: SWKS_ema40_m_20250712_155626.csv
2025-07-12 15:56:26,613 INFO [indicator_service.py:139] [SWKS] MACD m data saved: SWKS_macd_m_20250712_155626.csv
2025-07-12 15:56:26,618 INFO [indicator_service.py:162] [SWKS] Bollinger Bands m data saved: SWKS_bollinger_m_20250712_155626.csv
2025-07-12 15:56:26,626 INFO [indicator_service.py:186] [SWKS] Ichimoku m data saved: SWKS_ichimoku_m_20250712_155626.csv
2025-07-12 15:56:26,631 INFO [indicator_service.py:207] [SWKS] RSI m data saved: SWKS_rsi_m_20250712_155626.csv
2025-07-12 15:56:26,648 INFO [indicator_service.py:229] [SWKS] Stochastic m data saved: SWKS_stochastic_m_20250712_155626.csv
2025-07-12 15:56:26,655 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d m data saved: SWKS_volume_ratio_5d_m_20250712_155626.csv
2025-07-12 15:56:26,657 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d m data saved: SWKS_volume_ratio_20d_m_20250712_155626.csv
2025-07-12 15:56:26,660 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d m data saved: SWKS_volume_ratio_40d_m_20250712_155626.csv
2025-07-12 15:56:26,660 INFO [indicator_service.py:539] [SWKS] All indicators calculated and saved successfully
2025-07-12 15:56:26,660 INFO [chart_service.py:158] [SWKS] Indicator calculation and storage completed successfully
2025-07-12 15:56:26,661 INFO [chart_service.py:165] [SWKS] Chart generation completed successfully. Generated charts: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:56:26,664 INFO [analysis_service.py:348] [SWKS] Starting AI analysis process...
2025-07-12 15:56:26,664 INFO [analysis_service.py:356] [SWKS] Looking for chart files...
2025-07-12 15:56:26,670 INFO [analysis_service.py:413] [SWKS] Found Daily chart: SWKS_daily_20250712.png
2025-07-12 15:56:26,670 INFO [analysis_service.py:413] [SWKS] Found Weekly chart: SWKS_weekly_20250712.png
2025-07-12 15:56:26,670 INFO [analysis_service.py:413] [SWKS] Found Monthly chart: SWKS_monthly_20250712.png
2025-07-12 15:56:26,670 INFO [analysis_service.py:415] [SWKS] Chart files found: Daily=True, Weekly=True, Monthly=True
2025-07-12 15:56:26,671 INFO [analysis_service.py:432] [SWKS] Chart image transmission disabled - using text-only analysis
2025-07-12 15:56:26,671 INFO [analysis_service.py:439] [SWKS] Determining data processing strategy based on market hours...
2025-07-12 15:56:26,671 INFO [analysis_service.py:463] [SWKS] US stock - Current EST: 15:56:26, Market hours: True
2025-07-12 15:56:26,671 INFO [analysis_service.py:470] [SWKS] Market hours detected - will download fresh data
2025-07-12 15:56:26,672 INFO [analysis_service.py:479] [SWKS] Downloading fresh data and calculating new indicators...
2025-07-12 15:56:26,672 INFO [analysis_service.py:155] [SWKS] Starting fresh data download and analysis...
2025-07-12 15:56:26,672 INFO [analysis_service.py:163] [SWKS] Downloading fresh stock data...
2025-07-12 15:56:26,672 INFO [market_data_service.py:373] [SWKS] US stock detected, using Yahoo Finance priority fallback
2025-07-12 15:56:26,672 INFO [market_data_service.py:413] [SWKS] Trying Yahoo Finance first...
2025-07-12 15:56:26,672 INFO [market_data_service.py:324] [SWKS] Downloading chart data (attempt 1/2)...
2025-07-12 15:56:26,672 DEBUG [utils.py:96] Entering history()
2025-07-12 15:56:26,673 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SWKS', 1, 0])
2025-07-12 15:56:26,674 DEBUG [utils.py:96]  Entering history()
2025-07-12 15:56:26,674 DEBUG [history.py:165] SWKS: Yahoo GET parameters: {'period1': '2020-05-14 00:00:00-04:00', 'period2': '2025-07-13 00:00:00-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:56:26,675 DEBUG [utils.py:96]   Entering get()
2025-07-12 15:56:26,675 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 15:56:26,675 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SWKS
2025-07-12 15:56:26,675 DEBUG [data.py:344] params={'period1': 1589428800, 'period2': 1752379200, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 15:56:26,675 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 15:56:26,676 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 15:56:26,676 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 15:56:26,770 DEBUG [data.py:179] reusing crumb
2025-07-12 15:56:26,771 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 15:56:26,771 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 15:56:26,926 DEBUG [data.py:367] response code=200
2025-07-12 15:56:26,926 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 15:56:26,927 DEBUG [utils.py:101]   Exiting get()
2025-07-12 15:56:26,932 DEBUG [history.py:281] SWKS: yfinance received OHLC data: 2020-05-14 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 15:56:26,933 DEBUG [history.py:318] SWKS: OHLC after cleaning: 2020-05-14 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 15:56:26,941 DEBUG [history.py:388] SWKS: OHLC after combining events: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:56:26,943 DEBUG [history.py:467] SWKS: yfinance returning OHLC: 2020-05-14 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 15:56:26,943 DEBUG [utils.py:101]  Exiting history()
2025-07-12 15:56:26,944 DEBUG [utils.py:101] Exiting history()
2025-07-12 15:56:26,944 INFO [market_data_service.py:337] [SWKS] Chart data downloaded successfully. Shape: (1296, 8)
2025-07-12 15:56:26,944 INFO [market_data_service.py:417] [SWKS] Yahoo Finance successful
2025-07-12 15:56:26,945 INFO [analysis_service.py:178] [SWKS] Fresh data downloaded. Shape: (1296, 8)
2025-07-12 15:56:26,945 INFO [analysis_service.py:181] [SWKS] Calculating and saving new indicators...
2025-07-12 15:56:26,945 INFO [indicator_service.py:483] [SWKS] Starting comprehensive indicator calculation and storage...
2025-07-12 15:56:26,955 INFO [indicator_service.py:54] [SWKS] Daily OHLCV data saved: SWKS_ohlcv_d_20250712_155626.csv
2025-07-12 15:56:26,967 INFO [indicator_service.py:68] [SWKS] Weekly OHLCV data saved: SWKS_ohlcv_w_20250712_155626.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:71: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:56:26,976 INFO [indicator_service.py:82] [SWKS] Monthly OHLCV data saved: SWKS_ohlcv_m_20250712_155626.csv
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\services\indicator_service.py:496: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.
  monthly_data = daily_data.resample('M').agg({
2025-07-12 15:56:27,000 INFO [indicator_service.py:116] [SWKS] EMA5 d data saved: SWKS_ema5_d_20250712_155626.csv
2025-07-12 15:56:27,007 INFO [indicator_service.py:116] [SWKS] EMA20 d data saved: SWKS_ema20_d_20250712_155626.csv
2025-07-12 15:56:27,016 INFO [indicator_service.py:116] [SWKS] EMA40 d data saved: SWKS_ema40_d_20250712_155626.csv
2025-07-12 15:56:27,028 INFO [indicator_service.py:139] [SWKS] MACD d data saved: SWKS_macd_d_20250712_155626.csv
2025-07-12 15:56:27,041 INFO [indicator_service.py:162] [SWKS] Bollinger Bands d data saved: SWKS_bollinger_d_20250712_155626.csv
2025-07-12 15:56:27,057 INFO [indicator_service.py:186] [SWKS] Ichimoku d data saved: SWKS_ichimoku_d_20250712_155626.csv
2025-07-12 15:56:27,065 INFO [indicator_service.py:207] [SWKS] RSI d data saved: SWKS_rsi_d_20250712_155626.csv
2025-07-12 15:56:27,074 INFO [indicator_service.py:229] [SWKS] Stochastic d data saved: SWKS_stochastic_d_20250712_155626.csv
2025-07-12 15:56:27,082 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d d data saved: SWKS_volume_ratio_5d_d_20250712_155626.csv
2025-07-12 15:56:27,088 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d d data saved: SWKS_volume_ratio_20d_d_20250712_155626.csv
2025-07-12 15:56:27,093 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d d data saved: SWKS_volume_ratio_40d_d_20250712_155626.csv
2025-07-12 15:56:27,097 INFO [indicator_service.py:116] [SWKS] EMA5 w data saved: SWKS_ema5_w_20250712_155626.csv
2025-07-12 15:56:27,100 INFO [indicator_service.py:116] [SWKS] EMA20 w data saved: SWKS_ema20_w_20250712_155626.csv
2025-07-12 15:56:27,102 INFO [indicator_service.py:116] [SWKS] EMA40 w data saved: SWKS_ema40_w_20250712_155626.csv
2025-07-12 15:56:27,107 INFO [indicator_service.py:139] [SWKS] MACD w data saved: SWKS_macd_w_20250712_155626.csv
2025-07-12 15:56:27,112 INFO [indicator_service.py:162] [SWKS] Bollinger Bands w data saved: SWKS_bollinger_w_20250712_155626.csv
2025-07-12 15:56:27,119 INFO [indicator_service.py:186] [SWKS] Ichimoku w data saved: SWKS_ichimoku_w_20250712_155626.csv
2025-07-12 15:56:27,123 INFO [indicator_service.py:207] [SWKS] RSI w data saved: SWKS_rsi_w_20250712_155626.csv
2025-07-12 15:56:27,127 INFO [indicator_service.py:229] [SWKS] Stochastic w data saved: SWKS_stochastic_w_20250712_155626.csv
2025-07-12 15:56:27,132 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d w data saved: SWKS_volume_ratio_5d_w_20250712_155626.csv
2025-07-12 15:56:27,134 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d w data saved: SWKS_volume_ratio_20d_w_20250712_155626.csv
2025-07-12 15:56:27,136 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d w data saved: SWKS_volume_ratio_40d_w_20250712_155626.csv
2025-07-12 15:56:27,139 INFO [indicator_service.py:116] [SWKS] EMA5 m data saved: SWKS_ema5_m_20250712_155626.csv
2025-07-12 15:56:27,141 INFO [indicator_service.py:116] [SWKS] EMA20 m data saved: SWKS_ema20_m_20250712_155626.csv
2025-07-12 15:56:27,143 INFO [indicator_service.py:116] [SWKS] EMA40 m data saved: SWKS_ema40_m_20250712_155626.csv
2025-07-12 15:56:27,146 INFO [indicator_service.py:139] [SWKS] MACD m data saved: SWKS_macd_m_20250712_155626.csv
2025-07-12 15:56:27,150 INFO [indicator_service.py:162] [SWKS] Bollinger Bands m data saved: SWKS_bollinger_m_20250712_155626.csv
2025-07-12 15:56:27,155 INFO [indicator_service.py:186] [SWKS] Ichimoku m data saved: SWKS_ichimoku_m_20250712_155626.csv
2025-07-12 15:56:27,158 INFO [indicator_service.py:207] [SWKS] RSI m data saved: SWKS_rsi_m_20250712_155626.csv
2025-07-12 15:56:27,162 INFO [indicator_service.py:229] [SWKS] Stochastic m data saved: SWKS_stochastic_m_20250712_155626.csv
2025-07-12 15:56:27,167 INFO [indicator_service.py:267] [SWKS] Volume Ratio 5d m data saved: SWKS_volume_ratio_5d_m_20250712_155626.csv
2025-07-12 15:56:27,170 INFO [indicator_service.py:267] [SWKS] Volume Ratio 20d m data saved: SWKS_volume_ratio_20d_m_20250712_155626.csv
2025-07-12 15:56:27,173 INFO [indicator_service.py:267] [SWKS] Volume Ratio 40d m data saved: SWKS_volume_ratio_40d_m_20250712_155626.csv
2025-07-12 15:56:27,173 INFO [indicator_service.py:539] [SWKS] All indicators calculated and saved successfully
2025-07-12 15:56:27,264 INFO [analysis_service.py:209] [SWKS] Fresh indicators calculated successfully
2025-07-12 15:56:27,264 INFO [analysis_service.py:210] [SWKS] Daily: 45 rows, Weekly: 45 rows, Monthly: 45 rows
2025-07-12 15:56:27,964 INFO [analysis_service.py:790] [SWKS] Starting Gemini AI analysis...
2025-07-12 15:56:27,964 DEBUG [analysis_service.py:922] Gemini API request payload (first part of text): 밑에 제공되는 SWKS 종목의 OHLCV 데이터를 기반으로 EMA, MACD, 볼린저밴드, 일목균형표 등 가용한 기술적 지표들을 계산하여 차트를 분석 후, 스윙 투자자의 매수 및 매도 타이밍에 대한 의견을 개진해라. 이 분석의 핵심내용을 세 문장으로 요약해 제일 첫머리에 **핵심 요약**의 제목아래 번호를 붙여 제시해라.상세분석은 일봉-주봉-월봉의 순으로 ...
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:56:28,860 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:28,860 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:22', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:28,861 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:28] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:31,865 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:31,866 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:25', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:31,867 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:31] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:34,870 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:34,871 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:28', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:34,872 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:34] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:37,861 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:37,862 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:31', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:37,863 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:37] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:40,868 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:40,868 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:34', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:40,869 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:40] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:43,867 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:43,868 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:37', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:43,869 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:43] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:46,873 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:46,874 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:40', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:46,875 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:46] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:49,863 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:49,864 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:43', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:49,865 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:49] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:52,865 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:52,865 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:46', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:52,866 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:52] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:55,873 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:55,873 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:49', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:55,875 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:55] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:56:58,863 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:56:58,863 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:52', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:56:58,864 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:56:58] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:57:01,871 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:57:01,871 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:55', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:57:01,872 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:57:01] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:57:04,863 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:57:04,864 INFO [progress_service.py:181] Progress response: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'progress_percentage': 77.1, 'elapsed_time': '0:11:58', 'estimated_completion': '15:59:45', 'stop_requested': False}
2025-07-12 15:57:04,865 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:57:04] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 15:57:07,257 INFO [analysis_service.py:928] [SWKS] Gemini API call completed in 39.29 seconds
2025-07-12 15:57:07,258 INFO [analysis_service.py:931] Gemini raw response text length: 5177
2025-07-12 15:57:07,259 DEBUG [analysis_service.py:932] Gemini analysis raw response: **핵심 요약**
1.  SWKS는 월봉상 장기 하락 추세 속에서 주봉상 강력한 상승 추세를 형성하며 바닥을 다지는 모습이며, 현재는 일봉상 단기 과열 해소를 위한 조정 구간에 진입했습니다.
2.  스윙 투자자는 현재의 일봉상 단기 조정이 마무리되고 주요 지지선(예: 20일 EMA)에서 지지받는 시점을 매수 타이밍으로 활용하며, 주봉상 상승 추세에 편승해야 합니다.
3.  매수 후에는 단기 고점 돌파 여부와 지표들의 과열 신호를 주시하며 수익을 실현하고, 손절선은 중요 지지선 이탈 시 명확히 설정해야 합니다.

---

**SWKS 기술적 지표 기반 차트 분석 및 스윙 투자 의견**

SWKS(Skyworks Solutions)는 장기간의 하락 추세를 겪었으나, 최근 몇 달간의 강력한 반등으로 인해 중기적인 상승 추세로의 전환을 시도하고 있습니다. 각 시간 프레임별 기술적 지표 분석을 통해 스윙 투자 관점에서의 매수 및 매도 타이밍을 제시합니다. 현재 종가는 2025년 7월 11일 ...
2025-07-12 15:57:07,260 INFO [analysis_service.py:792] [SWKS] Gemini AI analysis completed. Success: True
2025-07-12 15:57:07,261 INFO [analysis_service.py:797] [SWKS] Extracting summary from Gemini analysis...
2025-07-12 15:57:07,262 INFO [analysis_service.py:799] [SWKS] Summary extracted successfully
2025-07-12 15:57:07,262 INFO [analysis_service.py:802] [SWKS] Getting indicator data for analysis...
2025-07-12 15:57:07,503 INFO [analysis_service.py:806] [SWKS] Saving HTML analysis file...
2025-07-12 15:57:07,505 INFO [analysis_service.py:834] [SWKS] HTML analysis file saved successfully with app_context
2025-07-12 15:57:07,505 INFO [analysis_service.py:840] [SWKS] AI analysis process completed successfully
2025-07-12 15:57:07,534 INFO [batch_analysis_service.py:435] [SWKS] New analysis completed successfully
2025-07-12 15:57:07,535 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,535 INFO [progress_service.py:24] Input params: ticker=AVGO, processed=28, total=35, list_name=02 It (7/14)
2025-07-12 15:57:07,535 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'SWKS', 'current_list': '02 It (6/14)', 'total_tickers': 35, 'processed_tickers': 27, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 45, 674646), 'stop_requested': False}
2025-07-12 15:57:07,536 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AVGO', 'current_list': '02 It (7/14)', 'total_tickers': 35, 'processed_tickers': 28, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 7, 773150), 'stop_requested': False}
2025-07-12 15:57:07,536 INFO [batch_analysis_service.py:378] [AVGO] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,538 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,539 INFO [progress_service.py:24] Input params: ticker=QCOM, processed=29, total=35, list_name=02 It (8/14)
2025-07-12 15:57:07,539 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AVGO', 'current_list': '02 It (7/14)', 'total_tickers': 35, 'processed_tickers': 28, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 16, 0, 7, 773150), 'stop_requested': False}
2025-07-12 15:57:07,539 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'QCOM', 'current_list': '02 It (8/14)', 'total_tickers': 35, 'processed_tickers': 29, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 36, 702050), 'stop_requested': False}
2025-07-12 15:57:07,540 INFO [batch_analysis_service.py:378] [QCOM] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,542 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,542 INFO [progress_service.py:24] Input params: ticker=NVDA, processed=30, total=35, list_name=02 It (9/14)
2025-07-12 15:57:07,542 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'QCOM', 'current_list': '02 It (8/14)', 'total_tickers': 35, 'processed_tickers': 29, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 36, 702050), 'stop_requested': False}
2025-07-12 15:57:07,543 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVDA', 'current_list': '02 It (9/14)', 'total_tickers': 35, 'processed_tickers': 30, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 7, 702396), 'stop_requested': False}
2025-07-12 15:57:07,543 INFO [batch_analysis_service.py:378] [NVDA] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,545 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,545 INFO [progress_service.py:24] Input params: ticker=MSFT, processed=31, total=35, list_name=02 It (10/14)
2025-07-12 15:57:07,546 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'NVDA', 'current_list': '02 It (9/14)', 'total_tickers': 35, 'processed_tickers': 30, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 59, 7, 702396), 'stop_requested': False}
2025-07-12 15:57:07,546 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MSFT', 'current_list': '02 It (10/14)', 'total_tickers': 35, 'processed_tickers': 31, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 40, 573215), 'stop_requested': False}
2025-07-12 15:57:07,546 INFO [batch_analysis_service.py:378] [MSFT] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,549 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,550 INFO [progress_service.py:24] Input params: ticker=GOOGL, processed=32, total=35, list_name=02 It (11/14)
2025-07-12 15:57:07,551 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'MSFT', 'current_list': '02 It (10/14)', 'total_tickers': 35, 'processed_tickers': 31, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 40, 573215), 'stop_requested': False}
2025-07-12 15:57:07,551 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'GOOGL', 'current_list': '02 It (11/14)', 'total_tickers': 35, 'processed_tickers': 32, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 15, 141760), 'stop_requested': False}
2025-07-12 15:57:07,551 INFO [batch_analysis_service.py:378] [GOOGL] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,553 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,553 INFO [progress_service.py:24] Input params: ticker=INTC, processed=33, total=35, list_name=02 It (12/14)
2025-07-12 15:57:07,554 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'GOOGL', 'current_list': '02 It (11/14)', 'total_tickers': 35, 'processed_tickers': 32, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 58, 15, 141760), 'stop_requested': False}
2025-07-12 15:57:07,554 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'INTC', 'current_list': '02 It (12/14)', 'total_tickers': 35, 'processed_tickers': 33, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 51, 249353), 'stop_requested': False}
2025-07-12 15:57:07,554 INFO [batch_analysis_service.py:378] [INTC] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,556 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,556 INFO [progress_service.py:24] Input params: ticker=AMD, processed=34, total=35, list_name=02 It (13/14)
2025-07-12 15:57:07,557 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'INTC', 'current_list': '02 It (12/14)', 'total_tickers': 35, 'processed_tickers': 33, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 51, 249353), 'stop_requested': False}
2025-07-12 15:57:07,557 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AMD', 'current_list': '02 It (13/14)', 'total_tickers': 35, 'processed_tickers': 34, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 28, 762324), 'stop_requested': False}
2025-07-12 15:57:07,557 INFO [batch_analysis_service.py:378] [AMD] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,559 INFO [progress_service.py:23] === Progress Update Called ===
2025-07-12 15:57:07,559 INFO [progress_service.py:24] Input params: ticker=AAPL, processed=35, total=35, list_name=02 It (14/14)
2025-07-12 15:57:07,560 INFO [progress_service.py:25] Current progress before update: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AMD', 'current_list': '02 It (13/14)', 'total_tickers': 35, 'processed_tickers': 34, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 28, 762324), 'stop_requested': False}
2025-07-12 15:57:07,560 INFO [progress_service.py:70] Progress updated successfully: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AAPL', 'current_list': '02 It (14/14)', 'total_tickers': 35, 'processed_tickers': 35, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 7, 560239), 'stop_requested': False}
2025-07-12 15:57:07,560 INFO [batch_analysis_service.py:378] [AAPL] Reusing existing files (within 1 hour)
2025-07-12 15:57:07,562 INFO [batch_analysis_service.py:502] Completed processing list '02 It' with 14 tickers
2025-07-12 15:57:07,565 INFO [batch_analysis_service.py:527] Consolidated summary saved to static/multi_summaries\multi_summary_20250712_154506.json with 35 entries
2025-07-12 15:57:07,567 INFO [batch_analysis_service.py:548] Individual list summary saved for '03 Watch' to static/summaries\03 Watch_analysis_results.json with 21 entries
2025-07-12 15:57:07,568 INFO [batch_analysis_service.py:548] Individual list summary saved for '02 It' to static/summaries\02 It_analysis_results.json with 14 entries
2025-07-12 15:57:07,569 INFO [progress_service.py:109] === Batch Progress End ===
2025-07-12 15:57:07,569 INFO [progress_service.py:110] Ending batch progress: {'is_running': True, 'type': 'multi_20250712_154506', 'current_ticker': 'AAPL', 'current_list': '02 It (14/14)', 'total_tickers': 35, 'processed_tickers': 35, 'start_time': datetime.datetime(2025, 7, 12, 15, 45, 6, 587327), 'estimated_completion': datetime.datetime(2025, 7, 12, 15, 57, 7, 560239), 'stop_requested': False}
2025-07-12 15:57:07,569 INFO [progress_service.py:122] Batch progress reset: {'is_running': False, 'type': None, 'current_ticker': None, 'current_list': None, 'total_tickers': 0, 'processed_tickers': 0, 'start_time': None, 'estimated_completion': None, 'stop_requested': False}
2025-07-12 15:57:07,570 INFO [progress_service.py:123] === Batch Progress End Complete ===
2025-07-12 15:57:07,570 INFO [batch_analysis_service.py:578] Multiple lists batch processing finished for 'multi_20250712_154506'
2025-07-12 15:57:07,570 INFO [analysis_routes.py:201] Analysis completed successfully
2025-07-12 15:57:07,571 INFO [analysis_routes.py:211] === Ending generate_multiple_lists_analysis_route ===
2025-07-12 15:57:07,571 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:57:07] "POST /generate_multiple_lists_analysis HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 15:57:07,859 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': False, 'type': None, 'current_ticker': None, 'current_list': None, 'total_tickers': 0, 'processed_tickers': 0, 'start_time': None, 'estimated_completion': None, 'stop_requested': False}
2025-07-12 15:57:07,860 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 15:57:07] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 16:05:13,036 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "POST /select_stock_list HTTP/1.1" 200 -
2025-07-12 16:05:13,290 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /get_tickers HTTP/1.1" 200 -
2025-07-12 16:05:13,351 INFO [admin_routes.py:555] Getting file status for ticker: PEP
2025-07-12 16:05:13,405 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 45, 8, 637995), 'formatted_time': '2025-07-12 15:45', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 45, 44, 16047), 'formatted_time': '2025-07-12 15:45', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,406 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'PEP', 'chart_time': '2025-07-12 15:45', 'analysis_time': '2025-07-12 15:45', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,407 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/PEP HTTP/1.1" 200 -
2025-07-12 16:05:13,618 INFO [admin_routes.py:555] Getting file status for ticker: KO
2025-07-12 16:05:13,623 INFO [admin_routes.py:555] Getting file status for ticker: PM
2025-07-12 16:05:13,626 INFO [admin_routes.py:555] Getting file status for ticker: ABNB
2025-07-12 16:05:13,627 INFO [admin_routes.py:555] Getting file status for ticker: MO
2025-07-12 16:05:13,630 INFO [admin_routes.py:555] Getting file status for ticker: NFLX
2025-07-12 16:05:13,672 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 47, 47, 137642), 'formatted_time': '2025-07-12 15:47', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 48, 21, 578963), 'formatted_time': '2025-07-12 15:48', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,672 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NFLX', 'chart_time': '2025-07-12 15:47', 'analysis_time': '2025-07-12 15:48', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,673 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/NFLX HTTP/1.1" 200 -
2025-07-12 16:05:13,715 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 47, 3, 415505), 'formatted_time': '2025-07-12 15:47', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 47, 45, 302197), 'formatted_time': '2025-07-12 15:47', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,716 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'MO', 'chart_time': '2025-07-12 15:47', 'analysis_time': '2025-07-12 15:47', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,718 INFO [admin_routes.py:555] Getting file status for ticker: TSLA
2025-07-12 16:05:13,720 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/MO HTTP/1.1" 200 -
2025-07-12 16:05:13,720 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 46, 20, 874757), 'formatted_time': '2025-07-12 15:46', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 47, 1, 737907), 'formatted_time': '2025-07-12 15:47', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,721 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 53, 609358), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 29, 29, 604762), 'formatted_time': '2025-07-12 15:29', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,722 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'PM', 'chart_time': '2025-07-12 15:46', 'analysis_time': '2025-07-12 15:47', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,722 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'ABNB', 'chart_time': '2025-07-12 15:28', 'analysis_time': '2025-07-12 15:29', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,723 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/PM HTTP/1.1" 200 -
2025-07-12 16:05:13,724 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 45, 45, 744135), 'formatted_time': '2025-07-12 15:45', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 46, 19, 292115), 'formatted_time': '2025-07-12 15:46', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,724 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/ABNB HTTP/1.1" 200 -
2025-07-12 16:05:13,726 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'KO', 'chart_time': '2025-07-12 15:45', 'analysis_time': '2025-07-12 15:46', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,727 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/KO HTTP/1.1" 200 -
2025-07-12 16:05:13,738 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 48, 23, 117337), 'formatted_time': '2025-07-12 15:48', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 49, 2, 631743), 'formatted_time': '2025-07-12 15:49', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:13,738 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'TSLA', 'chart_time': '2025-07-12 15:48', 'analysis_time': '2025-07-12 15:49', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:13,739 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:13] "GET /admin/api/file-status/TSLA HTTP/1.1" 200 -
2025-07-12 16:05:13,983 INFO [admin_routes.py:555] Getting file status for ticker: JNJ
2025-07-12 16:05:14,031 INFO [admin_routes.py:555] Getting file status for ticker: PFE
2025-07-12 16:05:14,036 INFO [admin_routes.py:555] Getting file status for ticker: NVAX
2025-07-12 16:05:14,036 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 49, 4, 339116), 'formatted_time': '2025-07-12 15:49', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 49, 45, 148466), 'formatted_time': '2025-07-12 15:49', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,038 INFO [admin_routes.py:555] Getting file status for ticker: MRNA
2025-07-12 16:05:14,038 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'JNJ', 'chart_time': '2025-07-12 15:49', 'analysis_time': '2025-07-12 15:49', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,039 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/JNJ HTTP/1.1" 200 -
2025-07-12 16:05:14,045 INFO [admin_routes.py:555] Getting file status for ticker: UAL
2025-07-12 16:05:14,047 INFO [admin_routes.py:555] Getting file status for ticker: LLY
2025-07-12 16:05:14,075 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 50, 22, 393684), 'formatted_time': '2025-07-12 15:50', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 51, 2, 950727), 'formatted_time': '2025-07-12 15:51', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,075 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NVAX', 'chart_time': '2025-07-12 15:50', 'analysis_time': '2025-07-12 15:51', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,076 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/NVAX HTTP/1.1" 200 -
2025-07-12 16:05:14,084 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 49, 47, 264191), 'formatted_time': '2025-07-12 15:49', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 50, 20, 838932), 'formatted_time': '2025-07-12 15:50', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,085 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'PFE', 'chart_time': '2025-07-12 15:49', 'analysis_time': '2025-07-12 15:50', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,085 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/PFE HTTP/1.1" 200 -
2025-07-12 16:05:14,087 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 51, 4, 720499), 'formatted_time': '2025-07-12 15:51', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 51, 44, 738553), 'formatted_time': '2025-07-12 15:51', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,088 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'MRNA', 'chart_time': '2025-07-12 15:51', 'analysis_time': '2025-07-12 15:51', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,088 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/MRNA HTTP/1.1" 200 -
2025-07-12 16:05:14,091 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 51, 46, 486377), 'formatted_time': '2025-07-12 15:51', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 52, 23, 327286), 'formatted_time': '2025-07-12 15:52', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,092 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 5, 395478), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 50, 627814), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,092 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'UAL', 'chart_time': '2025-07-12 15:51', 'analysis_time': '2025-07-12 15:52', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,092 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'LLY', 'chart_time': '2025-07-12 15:26', 'analysis_time': '2025-07-12 15:26', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,093 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/UAL HTTP/1.1" 200 -
2025-07-12 16:05:14,094 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/LLY HTTP/1.1" 200 -
2025-07-12 16:05:14,349 INFO [admin_routes.py:555] Getting file status for ticker: DAL
2025-07-12 16:05:14,364 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 52, 24, 928843), 'formatted_time': '2025-07-12 15:52', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 53, 8, 41004), 'formatted_time': '2025-07-12 15:53', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,365 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'DAL', 'chart_time': '2025-07-12 15:52', 'analysis_time': '2025-07-12 15:53', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,365 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/DAL HTTP/1.1" 200 -
2025-07-12 16:05:14,382 INFO [admin_routes.py:555] Getting file status for ticker: WMT
2025-07-12 16:05:14,391 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 53, 9, 807072), 'formatted_time': '2025-07-12 15:53', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 53, 48, 923375), 'formatted_time': '2025-07-12 15:53', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,391 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'WMT', 'chart_time': '2025-07-12 15:53', 'analysis_time': '2025-07-12 15:53', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,392 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/WMT HTTP/1.1" 200 -
2025-07-12 16:05:14,398 INFO [admin_routes.py:555] Getting file status for ticker: COST
2025-07-12 16:05:14,399 INFO [admin_routes.py:555] Getting file status for ticker: DIS
2025-07-12 16:05:14,410 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 53, 50, 626405), 'formatted_time': '2025-07-12 15:53', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 54, 24, 37797), 'formatted_time': '2025-07-12 15:54', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,411 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'COST', 'chart_time': '2025-07-12 15:53', 'analysis_time': '2025-07-12 15:54', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,412 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/COST HTTP/1.1" 200 -
2025-07-12 16:05:14,413 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 25, 26, 372689), 'formatted_time': '2025-07-12 15:25', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 3, 142078), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,415 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'DIS', 'chart_time': '2025-07-12 15:25', 'analysis_time': '2025-07-12 15:26', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,417 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/DIS HTTP/1.1" 200 -
2025-07-12 16:05:14,421 INFO [admin_routes.py:555] Getting file status for ticker: CROX
2025-07-12 16:05:14,422 INFO [admin_routes.py:555] Getting file status for ticker: SPG
2025-07-12 16:05:14,436 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 9, 656800), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 51, 470268), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,437 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SPG', 'chart_time': '2025-07-12 15:28', 'analysis_time': '2025-07-12 15:28', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,437 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 54, 25, 629514), 'formatted_time': '2025-07-12 15:54', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 10, 602405), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,438 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/SPG HTTP/1.1" 200 -
2025-07-12 16:05:14,438 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'CROX', 'chart_time': '2025-07-12 15:54', 'analysis_time': '2025-07-12 15:55', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,439 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/CROX HTTP/1.1" 200 -
2025-07-12 16:05:14,678 INFO [admin_routes.py:555] Getting file status for ticker: O
2025-07-12 16:05:14,695 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 20, 4, 242712), 'formatted_time': '2025-07-12 15:20', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 20, 45, 774586), 'formatted_time': '2025-07-12 15:20', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,696 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'O', 'chart_time': '2025-07-12 15:20', 'analysis_time': '2025-07-12 15:20', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,696 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/O HTTP/1.1" 200 -
2025-07-12 16:05:14,701 INFO [admin_routes.py:555] Getting file status for ticker: NKE
2025-07-12 16:05:14,709 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 22, 5, 289340), 'formatted_time': '2025-07-12 15:22', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 22, 41, 685814), 'formatted_time': '2025-07-12 15:22', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:14,709 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NKE', 'chart_time': '2025-07-12 15:22', 'analysis_time': '2025-07-12 15:22', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:14,710 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:14] "GET /admin/api/file-status/NKE HTTP/1.1" 200 -
2025-07-12 16:05:18,397 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:18] "POST /select_stock_list HTTP/1.1" 200 -
2025-07-12 16:05:18,653 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:18] "GET /get_tickers HTTP/1.1" 200 -
2025-07-12 16:05:18,714 INFO [admin_routes.py:555] Getting file status for ticker: SPGI
2025-07-12 16:05:18,722 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 12, 347841), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 46, 824184), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:18,722 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SPGI', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:55', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:18,723 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:18] "GET /admin/api/file-status/SPGI HTTP/1.1" 200 -
2025-07-12 16:05:18,987 INFO [admin_routes.py:555] Getting file status for ticker: SWKS
2025-07-12 16:05:18,989 INFO [admin_routes.py:555] Getting file status for ticker: META
2025-07-12 16:05:18,990 INFO [admin_routes.py:555] Getting file status for ticker: UBER
2025-07-12 16:05:18,992 INFO [admin_routes.py:555] Getting file status for ticker: DELL
2025-07-12 16:05:18,993 INFO [admin_routes.py:555] Getting file status for ticker: QRVO
2025-07-12 16:05:19,041 INFO [admin_routes.py:555] Getting file status for ticker: AVGO
2025-07-12 16:05:19,051 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 15, 739130), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 48, 99243), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,051 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'META', 'chart_time': '2025-07-12 15:36', 'analysis_time': '2025-07-12 15:36', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,052 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/META HTTP/1.1" 200 -
2025-07-12 16:05:19,054 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 26, 411895), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 57, 7, 500470), 'formatted_time': '2025-07-12 15:57', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,054 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SWKS', 'chart_time': '2025-07-12 15:56', 'analysis_time': '2025-07-12 15:57', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,055 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/SWKS HTTP/1.1" 200 -
2025-07-12 16:05:19,058 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 19, 190649), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 55, 722902), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,060 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QRVO', 'chart_time': '2025-07-12 15:17', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,061 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/QRVO HTTP/1.1" 200 -
2025-07-12 16:05:19,064 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 29, 31, 700906), 'formatted_time': '2025-07-12 15:29', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 8, 440275), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,064 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'DELL', 'chart_time': '2025-07-12 15:29', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,065 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/DELL HTTP/1.1" 200 -
2025-07-12 16:05:19,065 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 48, 576583), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 24, 691591), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,066 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'UBER', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:56', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,067 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/UBER HTTP/1.1" 200 -
2025-07-12 16:05:19,075 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 23, 25, 122876), 'formatted_time': '2025-07-12 15:23', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 24, 4, 142948), 'formatted_time': '2025-07-12 15:24', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,075 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AVGO', 'chart_time': '2025-07-12 15:23', 'analysis_time': '2025-07-12 15:24', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,076 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/AVGO HTTP/1.1" 200 -
2025-07-12 16:05:19,366 INFO [admin_routes.py:555] Getting file status for ticker: QCOM
2025-07-12 16:05:19,368 INFO [admin_routes.py:555] Getting file status for ticker: NVDA
2025-07-12 16:05:19,382 INFO [admin_routes.py:555] Getting file status for ticker: MSFT
2025-07-12 16:05:19,387 INFO [admin_routes.py:555] Getting file status for ticker: GOOGL
2025-07-12 16:05:19,389 INFO [admin_routes.py:555] Getting file status for ticker: INTC
2025-07-12 16:05:19,392 INFO [admin_routes.py:555] Getting file status for ticker: AMD
2025-07-12 16:05:19,415 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 16, 38, 810411), 'formatted_time': '2025-07-12 15:16', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 17, 354490), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,417 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 18, 45, 400459), 'formatted_time': '2025-07-12 15:18', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 19, 22, 739102), 'formatted_time': '2025-07-12 15:19', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,417 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NVDA', 'chart_time': '2025-07-12 15:16', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,418 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QCOM', 'chart_time': '2025-07-12 15:18', 'analysis_time': '2025-07-12 15:19', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,418 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/NVDA HTTP/1.1" 200 -
2025-07-12 16:05:19,419 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/QCOM HTTP/1.1" 200 -
2025-07-12 16:05:19,437 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 20, 48, 148279), 'formatted_time': '2025-07-12 15:20', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 21, 23, 961137), 'formatted_time': '2025-07-12 15:21', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,437 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'MSFT', 'chart_time': '2025-07-12 15:20', 'analysis_time': '2025-07-12 15:21', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,438 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/MSFT HTTP/1.1" 200 -
2025-07-12 16:05:19,443 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 52, 844746), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 29, 917693), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,444 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'GOOGL', 'chart_time': '2025-07-12 15:26', 'analysis_time': '2025-07-12 15:27', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,445 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 14, 27, 602852), 'formatted_time': '2025-07-12 15:14', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 15, 14, 754442), 'formatted_time': '2025-07-12 15:15', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,445 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/GOOGL HTTP/1.1" 200 -
2025-07-12 16:05:19,446 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 10, 14811), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 49, 658379), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,446 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'INTC', 'chart_time': '2025-07-12 15:14', 'analysis_time': '2025-07-12 15:15', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,447 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AMD', 'chart_time': '2025-07-12 15:30', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,447 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/INTC HTTP/1.1" 200 -
2025-07-12 16:05:19,448 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/AMD HTTP/1.1" 200 -
2025-07-12 16:05:19,731 INFO [admin_routes.py:555] Getting file status for ticker: AAPL
2025-07-12 16:05:19,750 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 33, 15867), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 5, 596388), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:19,751 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AAPL', 'chart_time': '2025-07-12 15:27', 'analysis_time': '2025-07-12 15:28', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:19,752 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:19] "GET /admin/api/file-status/AAPL HTTP/1.1" 200 -
2025-07-12 16:05:22,795 INFO [app.py:185] 메인 페이지 접근
2025-07-12 16:05:22,816 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:22] "GET / HTTP/1.1" 200 -
2025-07-12 16:05:22,879 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': False, 'type': None, 'current_ticker': None, 'current_list': None, 'total_tickers': 0, 'processed_tickers': 0, 'start_time': None, 'estimated_completion': None, 'stop_requested': False}
2025-07-12 16:05:22,880 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:22] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 16:05:23,065 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:23] "GET /get_stock_lists HTTP/1.1" 200 -
2025-07-12 16:05:23,379 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:23] "GET /get_current_stock_list HTTP/1.1" 200 -
2025-07-12 16:05:23,643 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:23] "GET /get_tickers HTTP/1.1" 200 -
2025-07-12 16:05:23,696 INFO [admin_routes.py:555] Getting file status for ticker: SPGI
2025-07-12 16:05:23,704 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 12, 347841), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 46, 824184), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:23,704 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SPGI', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:55', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:23,704 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:23] "GET /admin/api/file-status/SPGI HTTP/1.1" 200 -
2025-07-12 16:05:23,967 INFO [admin_routes.py:555] Getting file status for ticker: QRVO
2025-07-12 16:05:23,967 INFO [admin_routes.py:555] Getting file status for ticker: DELL
2025-07-12 16:05:23,968 INFO [admin_routes.py:555] Getting file status for ticker: UBER
2025-07-12 16:05:23,968 INFO [admin_routes.py:555] Getting file status for ticker: META
2025-07-12 16:05:23,969 INFO [admin_routes.py:555] Getting file status for ticker: SWKS
2025-07-12 16:05:24,002 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 26, 411895), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 57, 7, 500470), 'formatted_time': '2025-07-12 15:57', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,003 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 15, 739130), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 48, 99243), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,003 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SWKS', 'chart_time': '2025-07-12 15:56', 'analysis_time': '2025-07-12 15:57', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,004 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'META', 'chart_time': '2025-07-12 15:36', 'analysis_time': '2025-07-12 15:36', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,004 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/SWKS HTTP/1.1" 200 -
2025-07-12 16:05:24,005 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/META HTTP/1.1" 200 -
2025-07-12 16:05:24,007 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 29, 31, 700906), 'formatted_time': '2025-07-12 15:29', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 8, 440275), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,008 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'DELL', 'chart_time': '2025-07-12 15:29', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,010 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/DELL HTTP/1.1" 200 -
2025-07-12 16:05:24,014 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 48, 576583), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 24, 691591), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,016 INFO [admin_routes.py:555] Getting file status for ticker: AVGO
2025-07-12 16:05:24,016 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'UBER', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:56', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,017 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/UBER HTTP/1.1" 200 -
2025-07-12 16:05:24,018 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 19, 190649), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 55, 722902), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,018 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QRVO', 'chart_time': '2025-07-12 15:17', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,019 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/QRVO HTTP/1.1" 200 -
2025-07-12 16:05:24,029 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 23, 25, 122876), 'formatted_time': '2025-07-12 15:23', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 24, 4, 142948), 'formatted_time': '2025-07-12 15:24', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,030 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AVGO', 'chart_time': '2025-07-12 15:23', 'analysis_time': '2025-07-12 15:24', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,031 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/AVGO HTTP/1.1" 200 -
2025-07-12 16:05:24,343 INFO [admin_routes.py:555] Getting file status for ticker: QCOM
2025-07-12 16:05:24,343 INFO [admin_routes.py:555] Getting file status for ticker: MSFT
2025-07-12 16:05:24,346 INFO [admin_routes.py:555] Getting file status for ticker: NVDA
2025-07-12 16:05:24,348 INFO [admin_routes.py:555] Getting file status for ticker: GOOGL
2025-07-12 16:05:24,349 INFO [admin_routes.py:555] Getting file status for ticker: INTC
2025-07-12 16:05:24,354 INFO [admin_routes.py:555] Getting file status for ticker: AMD
2025-07-12 16:05:24,413 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 18, 45, 400459), 'formatted_time': '2025-07-12 15:18', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 19, 22, 739102), 'formatted_time': '2025-07-12 15:19', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,414 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QCOM', 'chart_time': '2025-07-12 15:18', 'analysis_time': '2025-07-12 15:19', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,415 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/QCOM HTTP/1.1" 200 -
2025-07-12 16:05:24,417 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 14, 27, 602852), 'formatted_time': '2025-07-12 15:14', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 15, 14, 754442), 'formatted_time': '2025-07-12 15:15', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,417 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'INTC', 'chart_time': '2025-07-12 15:14', 'analysis_time': '2025-07-12 15:15', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,419 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/INTC HTTP/1.1" 200 -
2025-07-12 16:05:24,419 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 52, 844746), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 29, 917693), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,420 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 10, 14811), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 49, 658379), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,421 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'GOOGL', 'chart_time': '2025-07-12 15:26', 'analysis_time': '2025-07-12 15:27', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,421 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 20, 48, 148279), 'formatted_time': '2025-07-12 15:20', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 21, 23, 961137), 'formatted_time': '2025-07-12 15:21', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,421 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AMD', 'chart_time': '2025-07-12 15:30', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,422 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/GOOGL HTTP/1.1" 200 -
2025-07-12 16:05:24,423 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'MSFT', 'chart_time': '2025-07-12 15:20', 'analysis_time': '2025-07-12 15:21', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,424 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/AMD HTTP/1.1" 200 -
2025-07-12 16:05:24,425 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/MSFT HTTP/1.1" 200 -
2025-07-12 16:05:24,427 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 16, 38, 810411), 'formatted_time': '2025-07-12 15:16', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 17, 354490), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,428 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NVDA', 'chart_time': '2025-07-12 15:16', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,430 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/NVDA HTTP/1.1" 200 -
2025-07-12 16:05:24,725 INFO [admin_routes.py:555] Getting file status for ticker: AAPL
2025-07-12 16:05:24,742 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 33, 15867), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 5, 596388), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:05:24,743 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AAPL', 'chart_time': '2025-07-12 15:27', 'analysis_time': '2025-07-12 15:28', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:05:24,744 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:24] "GET /admin/api/file-status/AAPL HTTP/1.1" 200 -
2025-07-12 16:05:30,740 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:30] "GET /get_stock_lists HTTP/1.1" 200 -
2025-07-12 16:05:35,657 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:35] "GET /get_stock_lists HTTP/1.1" 200 -
2025-07-12 16:05:39,164 INFO [analysis_routes.py:395] Multiple lists summaries requested for: ['00 Holdings', '01 Etf', '02 It', '03 Watch']
2025-07-12 16:05:39,164 INFO [analysis_routes.py:410] Checking summary file for 00 Holdings: static/summaries\00 Holdings_analysis_results.json
2025-07-12 16:05:39,189 INFO [analysis_routes.py:421] Loaded 24 summaries for 00 Holdings
2025-07-12 16:05:39,191 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:39,192 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['INTC', 1, 0])
2025-07-12 16:05:39,194 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:39,195 DEBUG [history.py:165] INTC: Yahoo GET parameters: {'period1': '2025-07-02 16:05:39-04:00', 'period2': '2025-07-12 16:05:39-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,196 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:39,196 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:39,197 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/INTC
2025-07-12 16:05:39,197 DEBUG [data.py:344] params={'period1': 1751486739, 'period2': 1752350739, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,198 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:39,198 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:39,198 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,310 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:39,311 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,311 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:39,513 DEBUG [data.py:367] response code=200
2025-07-12 16:05:39,514 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:39,514 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:39,518 DEBUG [history.py:281] INTC: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:39,521 DEBUG [history.py:318] INTC: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:39,529 DEBUG [history.py:388] INTC: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,534 DEBUG [history.py:467] INTC: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,535 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:39,535 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:39,537 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:39,537 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['GLD', 1, 0])
2025-07-12 16:05:39,538 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:39,538 DEBUG [history.py:165] GLD: Yahoo GET parameters: {'period1': '2025-07-02 16:05:39-04:00', 'period2': '2025-07-12 16:05:39-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,538 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:39,539 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:39,539 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/GLD
2025-07-12 16:05:39,539 DEBUG [data.py:344] params={'period1': 1751486739, 'period2': 1752350739, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,539 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:39,540 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:39,540 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,564 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:39,565 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,566 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:39,634 DEBUG [data.py:367] response code=200
2025-07-12 16:05:39,634 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:39,635 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:39,637 DEBUG [history.py:281] GLD: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:39,639 DEBUG [history.py:318] GLD: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:39,646 DEBUG [history.py:388] GLD: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,648 DEBUG [history.py:467] GLD: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,649 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:39,649 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:39,649 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:39,650 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TMUS', 1, 0])
2025-07-12 16:05:39,650 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:39,651 DEBUG [history.py:165] TMUS: Yahoo GET parameters: {'period1': '2025-07-02 16:05:39-04:00', 'period2': '2025-07-12 16:05:39-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,651 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:39,651 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:39,652 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TMUS
2025-07-12 16:05:39,652 DEBUG [data.py:344] params={'period1': 1751486739, 'period2': 1752350739, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,652 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:39,652 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:39,653 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,678 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:39,678 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,679 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:39,758 DEBUG [data.py:367] response code=200
2025-07-12 16:05:39,759 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:39,760 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:39,762 DEBUG [history.py:281] TMUS: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:39,764 DEBUG [history.py:318] TMUS: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:39,770 DEBUG [history.py:388] TMUS: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,775 DEBUG [history.py:467] TMUS: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,776 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:39,776 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:39,777 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:39,778 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NVDA', 1, 0])
2025-07-12 16:05:39,779 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:39,780 DEBUG [history.py:165] NVDA: Yahoo GET parameters: {'period1': '2025-07-02 16:05:39-04:00', 'period2': '2025-07-12 16:05:39-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,781 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:39,781 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:39,782 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NVDA
2025-07-12 16:05:39,782 DEBUG [data.py:344] params={'period1': 1751486739, 'period2': 1752350739, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,783 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:39,783 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:39,784 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,822 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:39,822 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,823 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:39,898 DEBUG [data.py:367] response code=200
2025-07-12 16:05:39,899 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:39,899 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:39,902 DEBUG [history.py:281] NVDA: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:39,904 DEBUG [history.py:318] NVDA: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:39,911 DEBUG [history.py:388] NVDA: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,916 DEBUG [history.py:467] NVDA: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:39,916 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:39,917 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:39,918 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:39,919 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['QRVO', 1, 0])
2025-07-12 16:05:39,920 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:39,921 DEBUG [history.py:165] QRVO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:39-04:00', 'period2': '2025-07-12 16:05:39-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,921 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:39,922 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:39,922 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/QRVO
2025-07-12 16:05:39,923 DEBUG [data.py:344] params={'period1': 1751486739, 'period2': 1752350739, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:39,923 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:39,924 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:39,924 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,947 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:39,948 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:39,948 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,012 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,012 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,013 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,014 DEBUG [history.py:281] QRVO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,016 DEBUG [history.py:318] QRVO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,019 DEBUG [history.py:388] QRVO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,021 DEBUG [history.py:467] QRVO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,022 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,022 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,023 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,024 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['ABT', 1, 0])
2025-07-12 16:05:40,024 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,024 DEBUG [history.py:165] ABT: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,025 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,025 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,025 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/ABT
2025-07-12 16:05:40,026 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,026 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,026 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,026 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,054 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,054 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,055 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,183 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,183 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,184 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,186 DEBUG [history.py:281] ABT: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,188 DEBUG [history.py:318] ABT: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,194 DEBUG [history.py:388] ABT: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,199 DEBUG [history.py:467] ABT: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,200 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,200 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,201 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,202 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['QCOM', 1, 0])
2025-07-12 16:05:40,203 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,204 DEBUG [history.py:165] QCOM: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,205 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,205 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,206 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/QCOM
2025-07-12 16:05:40,206 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,207 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,207 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,208 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,235 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,236 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,236 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,373 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,373 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,374 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,376 DEBUG [history.py:281] QCOM: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,378 DEBUG [history.py:318] QCOM: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,385 DEBUG [history.py:388] QCOM: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,389 DEBUG [history.py:467] QCOM: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,390 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,390 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,391 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,392 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VDE', 1, 0])
2025-07-12 16:05:40,393 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,394 DEBUG [history.py:165] VDE: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,395 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,396 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,396 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VDE
2025-07-12 16:05:40,396 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,397 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,397 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,398 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,426 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,427 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,427 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,524 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,525 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,525 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,528 DEBUG [history.py:281] VDE: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,530 DEBUG [history.py:318] VDE: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,536 DEBUG [history.py:388] VDE: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,539 DEBUG [history.py:467] VDE: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,539 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,540 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,540 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,541 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['O', 1, 0])
2025-07-12 16:05:40,541 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,542 DEBUG [history.py:165] O: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,542 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,542 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,543 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/O
2025-07-12 16:05:40,543 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,543 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,543 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,543 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,568 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,569 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,569 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,686 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,687 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,687 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,689 DEBUG [history.py:281] O: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,691 DEBUG [history.py:318] O: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,698 DEBUG [history.py:388] O: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,703 DEBUG [history.py:467] O: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,703 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,704 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,705 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,706 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MSFT', 1, 0])
2025-07-12 16:05:40,707 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,708 DEBUG [history.py:165] MSFT: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,708 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,709 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,709 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MSFT
2025-07-12 16:05:40,710 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,710 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,710 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,711 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,737 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,738 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,738 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,831 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,832 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,833 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,835 DEBUG [history.py:281] MSFT: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,837 DEBUG [history.py:318] MSFT: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,844 DEBUG [history.py:388] MSFT: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,850 DEBUG [history.py:467] MSFT: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,851 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,851 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,853 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,853 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPMO', 1, 0])
2025-07-12 16:05:40,854 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,855 DEBUG [history.py:165] SPMO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,856 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,856 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,857 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPMO
2025-07-12 16:05:40,857 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,858 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,858 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,859 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,885 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:40,885 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:40,886 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:40,964 DEBUG [data.py:367] response code=200
2025-07-12 16:05:40,965 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:40,965 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:40,967 DEBUG [history.py:281] SPMO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:40,969 DEBUG [history.py:318] SPMO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:40,978 DEBUG [history.py:388] SPMO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,987 DEBUG [history.py:467] SPMO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:40,988 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:40,988 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:40,989 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:40,991 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NKE', 1, 0])
2025-07-12 16:05:40,992 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:40,993 DEBUG [history.py:165] NKE: Yahoo GET parameters: {'period1': '2025-07-02 16:05:40-04:00', 'period2': '2025-07-12 16:05:40-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,994 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:40,994 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:40,995 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NKE
2025-07-12 16:05:40,995 DEBUG [data.py:344] params={'period1': 1751486740, 'period2': 1752350740, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:40,995 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:40,995 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:40,995 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,035 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,035 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,036 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,147 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,148 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,148 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,151 DEBUG [history.py:281] NKE: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,153 DEBUG [history.py:318] NKE: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:41,160 DEBUG [history.py:388] NKE: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,165 DEBUG [history.py:467] NKE: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,166 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:41,167 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:41,168 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:41,169 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VOO', 1, 0])
2025-07-12 16:05:41,169 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:41,170 DEBUG [history.py:165] VOO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:41-04:00', 'period2': '2025-07-12 16:05:41-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,171 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:41,171 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:41,172 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VOO
2025-07-12 16:05:41,172 DEBUG [data.py:344] params={'period1': 1751486741, 'period2': 1752350741, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,172 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:41,172 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:41,173 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,197 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,198 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,198 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,283 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,284 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,284 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,287 DEBUG [history.py:281] VOO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,289 DEBUG [history.py:318] VOO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:41,296 DEBUG [history.py:388] VOO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,300 DEBUG [history.py:467] VOO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,301 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:41,301 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:41,302 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:41,302 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AVGO', 1, 0])
2025-07-12 16:05:41,303 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:41,303 DEBUG [history.py:165] AVGO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:41-04:00', 'period2': '2025-07-12 16:05:41-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,304 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:41,304 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:41,304 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AVGO
2025-07-12 16:05:41,304 DEBUG [data.py:344] params={'period1': 1751486741, 'period2': 1752350741, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,305 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:41,305 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:41,305 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,328 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,329 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,330 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,415 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,416 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,416 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,419 DEBUG [history.py:281] AVGO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,421 DEBUG [history.py:318] AVGO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:41,428 DEBUG [history.py:388] AVGO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,433 DEBUG [history.py:467] AVGO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,433 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:41,434 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:41,435 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:41,436 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['GPC', 1, 0])
2025-07-12 16:05:41,436 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:41,437 DEBUG [history.py:165] GPC: Yahoo GET parameters: {'period1': '2025-07-02 16:05:41-04:00', 'period2': '2025-07-12 16:05:41-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,438 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:41,438 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:41,439 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/GPC
2025-07-12 16:05:41,439 DEBUG [data.py:344] params={'period1': 1751486741, 'period2': 1752350741, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,440 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:41,440 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:41,480 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,526 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,526 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,527 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,633 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,634 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,634 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,636 DEBUG [history.py:281] GPC: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,638 DEBUG [history.py:318] GPC: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:41,645 DEBUG [history.py:388] GPC: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,650 DEBUG [history.py:467] GPC: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,650 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:41,651 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:41,652 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:41,653 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['LRCX', 1, 0])
2025-07-12 16:05:41,653 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:41,654 DEBUG [history.py:165] LRCX: Yahoo GET parameters: {'period1': '2025-07-02 16:05:41-04:00', 'period2': '2025-07-12 16:05:41-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,655 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:41,655 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:41,656 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/LRCX
2025-07-12 16:05:41,656 DEBUG [data.py:344] params={'period1': 1751486741, 'period2': 1752350741, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,657 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:41,657 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:41,658 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,684 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,685 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,685 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,771 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,772 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,772 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,775 DEBUG [history.py:281] LRCX: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,777 DEBUG [history.py:318] LRCX: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:41,783 DEBUG [history.py:388] LRCX: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,788 DEBUG [history.py:467] LRCX: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:41,789 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:41,789 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:41,790 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:41,791 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DIS', 1, 0])
2025-07-12 16:05:41,792 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:41,793 DEBUG [history.py:165] DIS: Yahoo GET parameters: {'period1': '2025-07-02 16:05:41-04:00', 'period2': '2025-07-12 16:05:41-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,794 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:41,794 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:41,795 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DIS
2025-07-12 16:05:41,795 DEBUG [data.py:344] params={'period1': 1751486741, 'period2': 1752350741, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:41,796 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:41,796 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:41,797 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,822 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:41,823 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:41,823 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:41,985 DEBUG [data.py:367] response code=200
2025-07-12 16:05:41,986 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:41,986 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:41,989 DEBUG [history.py:281] DIS: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:41,991 DEBUG [history.py:318] DIS: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,000 DEBUG [history.py:388] DIS: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,008 DEBUG [history.py:467] DIS: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,009 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:42,009 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:42,011 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:42,011 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['LLY', 1, 0])
2025-07-12 16:05:42,012 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:42,012 DEBUG [history.py:165] LLY: Yahoo GET parameters: {'period1': '2025-07-02 16:05:42-04:00', 'period2': '2025-07-12 16:05:42-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,013 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:42,013 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:42,013 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/LLY
2025-07-12 16:05:42,013 DEBUG [data.py:344] params={'period1': 1751486742, 'period2': 1752350742, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,014 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:42,014 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:42,014 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,055 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:42,055 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,056 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:42,426 DEBUG [data.py:367] response code=200
2025-07-12 16:05:42,427 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:42,428 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:42,430 DEBUG [history.py:281] LLY: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:42,432 DEBUG [history.py:318] LLY: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,439 DEBUG [history.py:388] LLY: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,444 DEBUG [history.py:467] LLY: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,445 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:42,446 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:42,447 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:42,448 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['GOOGL', 1, 0])
2025-07-12 16:05:42,448 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:42,449 DEBUG [history.py:165] GOOGL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:42-04:00', 'period2': '2025-07-12 16:05:42-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,450 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:42,450 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:42,451 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/GOOGL
2025-07-12 16:05:42,451 DEBUG [data.py:344] params={'period1': 1751486742, 'period2': 1752350742, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,452 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:42,452 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:42,453 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,484 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:42,484 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,485 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:42,553 DEBUG [data.py:367] response code=200
2025-07-12 16:05:42,554 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:42,554 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:42,557 DEBUG [history.py:281] GOOGL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:42,559 DEBUG [history.py:318] GOOGL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,565 DEBUG [history.py:388] GOOGL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,570 DEBUG [history.py:467] GOOGL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,571 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:42,571 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:42,572 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:42,573 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AAPL', 1, 0])
2025-07-12 16:05:42,574 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:42,575 DEBUG [history.py:165] AAPL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:42-04:00', 'period2': '2025-07-12 16:05:42-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,575 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:42,576 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:42,576 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AAPL
2025-07-12 16:05:42,577 DEBUG [data.py:344] params={'period1': 1751486742, 'period2': 1752350742, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,577 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:42,578 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:42,578 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,603 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:42,603 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,604 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:42,714 DEBUG [data.py:367] response code=200
2025-07-12 16:05:42,714 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:42,715 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:42,717 DEBUG [history.py:281] AAPL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:42,719 DEBUG [history.py:318] AAPL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,726 DEBUG [history.py:388] AAPL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,731 DEBUG [history.py:467] AAPL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,731 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:42,732 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:42,733 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:42,734 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPG', 1, 0])
2025-07-12 16:05:42,735 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:42,736 DEBUG [history.py:165] SPG: Yahoo GET parameters: {'period1': '2025-07-02 16:05:42-04:00', 'period2': '2025-07-12 16:05:42-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,736 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:42,737 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:42,737 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPG
2025-07-12 16:05:42,738 DEBUG [data.py:344] params={'period1': 1751486742, 'period2': 1752350742, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,738 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:42,739 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:42,739 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,768 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:42,768 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,769 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:42,869 DEBUG [data.py:367] response code=200
2025-07-12 16:05:42,870 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:42,870 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:42,872 DEBUG [history.py:281] SPG: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:42,875 DEBUG [history.py:318] SPG: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,881 DEBUG [history.py:388] SPG: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,886 DEBUG [history.py:467] SPG: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:42,887 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:42,887 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:42,888 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:42,889 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['ABNB', 1, 0])
2025-07-12 16:05:42,890 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:42,891 DEBUG [history.py:165] ABNB: Yahoo GET parameters: {'period1': '2025-07-02 16:05:42-04:00', 'period2': '2025-07-12 16:05:42-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,892 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:42,892 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:42,893 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/ABNB
2025-07-12 16:05:42,893 DEBUG [data.py:344] params={'period1': 1751486742, 'period2': 1752350742, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:42,894 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:42,894 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:42,895 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,922 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:42,923 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:42,923 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:42,988 DEBUG [data.py:367] response code=200
2025-07-12 16:05:42,989 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:42,989 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:42,992 DEBUG [history.py:281] ABNB: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:42,995 DEBUG [history.py:318] ABNB: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:42,998 DEBUG [history.py:388] ABNB: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,000 DEBUG [history.py:467] ABNB: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,001 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,001 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,002 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,002 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DELL', 1, 0])
2025-07-12 16:05:43,003 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,003 DEBUG [history.py:165] DELL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,004 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,004 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,004 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DELL
2025-07-12 16:05:43,004 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,004 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,005 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,005 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,032 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,033 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,033 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,112 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,113 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,114 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,116 DEBUG [history.py:281] DELL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,118 DEBUG [history.py:318] DELL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,125 DEBUG [history.py:388] DELL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,130 DEBUG [history.py:467] DELL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,131 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,131 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,132 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,133 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AMD', 1, 0])
2025-07-12 16:05:43,134 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,135 DEBUG [history.py:165] AMD: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,136 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,136 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,137 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AMD
2025-07-12 16:05:43,137 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,138 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,138 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,139 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,163 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,164 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,164 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,237 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,238 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,239 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,241 DEBUG [history.py:281] AMD: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,243 DEBUG [history.py:318] AMD: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,250 DEBUG [history.py:388] AMD: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,254 DEBUG [history.py:467] AMD: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,255 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,256 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,257 INFO [analysis_routes.py:410] Checking summary file for 01 Etf: static/summaries\01 Etf_analysis_results.json
2025-07-12 16:05:43,274 INFO [analysis_routes.py:421] Loaded 14 summaries for 01 Etf
2025-07-12 16:05:43,275 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,276 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['^GSPC', 1, 0])
2025-07-12 16:05:43,277 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,278 DEBUG [history.py:165] ^GSPC: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,278 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,279 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,279 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/^GSPC
2025-07-12 16:05:43,280 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,280 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,281 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,281 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,308 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,309 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,310 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,405 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,406 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,406 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,409 DEBUG [history.py:281] ^GSPC: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,411 DEBUG [history.py:318] ^GSPC: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,417 DEBUG [history.py:388] ^GSPC: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,422 DEBUG [history.py:467] ^GSPC: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,423 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,423 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,424 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,425 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VOO', 1, 0])
2025-07-12 16:05:43,426 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,427 DEBUG [history.py:165] VOO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,428 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,428 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,428 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VOO
2025-07-12 16:05:43,429 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,429 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,430 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,430 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,454 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,455 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,455 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,544 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,545 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,546 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,548 DEBUG [history.py:281] VOO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,550 DEBUG [history.py:318] VOO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,559 DEBUG [history.py:388] VOO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,564 DEBUG [history.py:467] VOO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,565 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,565 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,567 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,568 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPMO', 1, 0])
2025-07-12 16:05:43,568 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,569 DEBUG [history.py:165] SPMO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,570 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,570 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,571 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPMO
2025-07-12 16:05:43,571 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,572 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,572 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,573 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,603 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,603 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,604 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,748 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,749 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,749 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,751 DEBUG [history.py:281] SPMO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,753 DEBUG [history.py:318] SPMO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,761 DEBUG [history.py:388] SPMO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,766 DEBUG [history.py:467] SPMO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,766 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,767 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,768 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,769 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MGC', 1, 0])
2025-07-12 16:05:43,770 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,771 DEBUG [history.py:165] MGC: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,771 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,772 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,772 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MGC
2025-07-12 16:05:43,773 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,773 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,773 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,774 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,798 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,799 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,799 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:43,883 DEBUG [data.py:367] response code=200
2025-07-12 16:05:43,883 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:43,884 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:43,886 DEBUG [history.py:281] MGC: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:43,888 DEBUG [history.py:318] MGC: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:43,895 DEBUG [history.py:388] MGC: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,900 DEBUG [history.py:467] MGC: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:43,900 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:43,901 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:43,902 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:43,903 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['GLD', 1, 0])
2025-07-12 16:05:43,904 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:43,905 DEBUG [history.py:165] GLD: Yahoo GET parameters: {'period1': '2025-07-02 16:05:43-04:00', 'period2': '2025-07-12 16:05:43-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,906 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:43,906 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:43,907 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/GLD
2025-07-12 16:05:43,907 DEBUG [data.py:344] params={'period1': 1751486743, 'period2': 1752350743, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:43,908 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:43,908 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:43,908 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,940 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:43,940 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:43,941 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,014 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,014 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,015 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,016 DEBUG [history.py:281] GLD: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,017 DEBUG [history.py:318] GLD: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,023 DEBUG [history.py:388] GLD: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,025 DEBUG [history.py:467] GLD: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,026 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,026 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,026 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,027 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['QQQ', 1, 0])
2025-07-12 16:05:44,027 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,028 DEBUG [history.py:165] QQQ: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,028 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,028 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,028 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/QQQ
2025-07-12 16:05:44,029 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,029 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,029 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,030 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,056 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,056 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,057 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,145 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,146 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,146 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,148 DEBUG [history.py:281] QQQ: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,151 DEBUG [history.py:318] QQQ: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,159 DEBUG [history.py:388] QQQ: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,189 DEBUG [history.py:467] QQQ: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,189 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,190 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,191 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,192 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VUG', 1, 0])
2025-07-12 16:05:44,193 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,194 DEBUG [history.py:165] VUG: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,194 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,194 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,195 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VUG
2025-07-12 16:05:44,195 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,195 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,196 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,196 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,242 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,243 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,244 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,337 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,337 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,338 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,340 DEBUG [history.py:281] VUG: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,342 DEBUG [history.py:318] VUG: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,350 DEBUG [history.py:388] VUG: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,355 DEBUG [history.py:467] VUG: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,356 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,356 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,357 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,358 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['IGV', 1, 0])
2025-07-12 16:05:44,359 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,360 DEBUG [history.py:165] IGV: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,360 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,361 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,361 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/IGV
2025-07-12 16:05:44,362 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,362 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,363 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,363 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,388 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,389 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,389 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,475 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,476 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,476 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,478 DEBUG [history.py:281] IGV: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,481 DEBUG [history.py:318] IGV: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,488 DEBUG [history.py:388] IGV: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,493 DEBUG [history.py:467] IGV: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,493 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,494 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,495 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,496 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VIG', 1, 0])
2025-07-12 16:05:44,497 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,498 DEBUG [history.py:165] VIG: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,498 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,499 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,499 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VIG
2025-07-12 16:05:44,500 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,500 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,501 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,501 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,528 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,528 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,529 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,630 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,631 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,631 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,634 DEBUG [history.py:281] VIG: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,636 DEBUG [history.py:318] VIG: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,644 DEBUG [history.py:388] VIG: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,650 DEBUG [history.py:467] VIG: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,650 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,651 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,652 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,653 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['VDE', 1, 0])
2025-07-12 16:05:44,654 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,655 DEBUG [history.py:165] VDE: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,655 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,656 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,656 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/VDE
2025-07-12 16:05:44,656 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,657 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,657 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,658 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,681 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,681 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,682 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,770 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,770 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,771 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,773 DEBUG [history.py:281] VDE: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,775 DEBUG [history.py:318] VDE: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,780 DEBUG [history.py:388] VDE: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,783 DEBUG [history.py:467] VDE: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,783 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,784 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,785 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,786 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TLT', 1, 0])
2025-07-12 16:05:44,786 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,787 DEBUG [history.py:165] TLT: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,787 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,787 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,787 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TLT
2025-07-12 16:05:44,788 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,788 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,788 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,789 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,817 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,818 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,818 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:44,932 DEBUG [data.py:367] response code=200
2025-07-12 16:05:44,933 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:44,933 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:44,936 DEBUG [history.py:281] TLT: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:44,938 DEBUG [history.py:318] TLT: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:44,943 DEBUG [history.py:388] TLT: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,945 DEBUG [history.py:467] TLT: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:44,946 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:44,946 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:44,947 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:44,947 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TMF', 1, 0])
2025-07-12 16:05:44,948 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:44,948 DEBUG [history.py:165] TMF: Yahoo GET parameters: {'period1': '2025-07-02 16:05:44-04:00', 'period2': '2025-07-12 16:05:44-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,949 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:44,949 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:44,950 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TMF
2025-07-12 16:05:44,950 DEBUG [data.py:344] params={'period1': 1751486744, 'period2': 1752350744, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:44,951 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:44,951 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:44,951 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,979 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:44,979 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:44,979 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,067 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,067 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,068 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,070 DEBUG [history.py:281] TMF: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,072 DEBUG [history.py:318] TMF: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,080 DEBUG [history.py:388] TMF: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,086 DEBUG [history.py:467] TMF: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,086 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,087 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,088 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,089 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TMV', 1, 0])
2025-07-12 16:05:45,090 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,091 DEBUG [history.py:165] TMV: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,091 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,092 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,092 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TMV
2025-07-12 16:05:45,092 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,093 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,093 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,094 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,117 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,117 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,118 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,190 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,190 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,191 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,193 DEBUG [history.py:281] TMV: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,195 DEBUG [history.py:318] TMV: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,205 DEBUG [history.py:388] TMV: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,210 DEBUG [history.py:467] TMV: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,210 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,211 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,212 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,213 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['USMV', 1, 0])
2025-07-12 16:05:45,213 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,214 DEBUG [history.py:165] USMV: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,215 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,215 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,216 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/USMV
2025-07-12 16:05:45,216 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,217 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,217 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,218 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,238 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,238 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,239 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,328 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,328 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,329 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,332 DEBUG [history.py:281] USMV: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,335 DEBUG [history.py:318] USMV: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,344 DEBUG [history.py:388] USMV: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,351 DEBUG [history.py:467] USMV: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,351 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,352 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,353 INFO [analysis_routes.py:410] Checking summary file for 02 It: static/summaries\02 It_analysis_results.json
2025-07-12 16:05:45,390 INFO [analysis_routes.py:421] Loaded 14 summaries for 02 It
2025-07-12 16:05:45,391 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,391 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPGI', 1, 0])
2025-07-12 16:05:45,392 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,393 DEBUG [history.py:165] SPGI: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,394 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,394 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,394 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPGI
2025-07-12 16:05:45,395 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,395 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,396 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,396 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,430 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,431 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,431 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,543 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,543 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,544 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,546 DEBUG [history.py:281] SPGI: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,548 DEBUG [history.py:318] SPGI: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,554 DEBUG [history.py:388] SPGI: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,560 DEBUG [history.py:467] SPGI: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,561 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,561 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,562 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,563 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UBER', 1, 0])
2025-07-12 16:05:45,564 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,565 DEBUG [history.py:165] UBER: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,566 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,566 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,567 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UBER
2025-07-12 16:05:45,567 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,567 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,568 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,568 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,593 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,593 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,594 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,663 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,664 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,664 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,667 DEBUG [history.py:281] UBER: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,669 DEBUG [history.py:318] UBER: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,674 DEBUG [history.py:388] UBER: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,676 DEBUG [history.py:467] UBER: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,676 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,676 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,677 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,677 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DELL', 1, 0])
2025-07-12 16:05:45,678 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,678 DEBUG [history.py:165] DELL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,678 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,679 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,679 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DELL
2025-07-12 16:05:45,679 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,679 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,679 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,680 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,701 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,702 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,702 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,783 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,783 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,784 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,786 DEBUG [history.py:281] DELL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,788 DEBUG [history.py:318] DELL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,795 DEBUG [history.py:388] DELL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,803 DEBUG [history.py:467] DELL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,804 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,805 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,806 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,807 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['META', 1, 0])
2025-07-12 16:05:45,808 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,809 DEBUG [history.py:165] META: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,810 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,810 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,810 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/META
2025-07-12 16:05:45,811 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,811 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,812 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,812 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,840 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,841 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,841 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:45,915 DEBUG [data.py:367] response code=200
2025-07-12 16:05:45,916 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:45,916 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:45,918 DEBUG [history.py:281] META: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:45,921 DEBUG [history.py:318] META: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:45,928 DEBUG [history.py:388] META: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,934 DEBUG [history.py:467] META: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:45,935 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:45,935 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:45,936 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:45,937 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['QRVO', 1, 0])
2025-07-12 16:05:45,938 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:45,939 DEBUG [history.py:165] QRVO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:45-04:00', 'period2': '2025-07-12 16:05:45-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,940 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:45,940 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:45,941 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/QRVO
2025-07-12 16:05:45,941 DEBUG [data.py:344] params={'period1': 1751486745, 'period2': 1752350745, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:45,942 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:45,942 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:45,943 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,970 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:45,971 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:45,971 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,038 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,039 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,039 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,041 DEBUG [history.py:281] QRVO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,043 DEBUG [history.py:318] QRVO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,047 DEBUG [history.py:388] QRVO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,051 DEBUG [history.py:467] QRVO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,052 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,052 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,052 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,053 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SWKS', 1, 0])
2025-07-12 16:05:46,053 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,054 DEBUG [history.py:165] SWKS: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,054 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,054 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,055 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SWKS
2025-07-12 16:05:46,055 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,055 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,055 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,055 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,082 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,082 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,083 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,160 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,161 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,161 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,164 DEBUG [history.py:281] SWKS: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,166 DEBUG [history.py:318] SWKS: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,173 DEBUG [history.py:388] SWKS: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,178 DEBUG [history.py:467] SWKS: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,179 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,179 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,180 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,181 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AVGO', 1, 0])
2025-07-12 16:05:46,182 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,183 DEBUG [history.py:165] AVGO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,184 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,184 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,185 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AVGO
2025-07-12 16:05:46,185 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,186 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,186 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,187 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,214 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,215 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,215 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,295 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,296 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,296 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,298 DEBUG [history.py:281] AVGO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,300 DEBUG [history.py:318] AVGO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,307 DEBUG [history.py:388] AVGO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,313 DEBUG [history.py:467] AVGO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,313 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,314 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,315 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,316 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['QCOM', 1, 0])
2025-07-12 16:05:46,317 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,317 DEBUG [history.py:165] QCOM: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,318 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,319 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,319 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/QCOM
2025-07-12 16:05:46,319 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,320 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,320 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,321 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,348 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,348 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,349 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,458 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,459 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,459 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,462 DEBUG [history.py:281] QCOM: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,464 DEBUG [history.py:318] QCOM: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,471 DEBUG [history.py:388] QCOM: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,475 DEBUG [history.py:467] QCOM: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,475 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,475 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,476 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,476 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NVDA', 1, 0])
2025-07-12 16:05:46,476 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,477 DEBUG [history.py:165] NVDA: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,477 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,477 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,477 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NVDA
2025-07-12 16:05:46,478 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,478 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,478 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,478 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,529 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,530 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,530 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,606 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,607 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,608 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,610 DEBUG [history.py:281] NVDA: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,612 DEBUG [history.py:318] NVDA: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,619 DEBUG [history.py:388] NVDA: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,623 DEBUG [history.py:467] NVDA: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,623 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,624 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,624 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,625 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MSFT', 1, 0])
2025-07-12 16:05:46,625 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,625 DEBUG [history.py:165] MSFT: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,626 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,626 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,626 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MSFT
2025-07-12 16:05:46,626 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,626 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,627 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,627 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,649 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,650 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,650 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,744 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,744 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,745 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,747 DEBUG [history.py:281] MSFT: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,749 DEBUG [history.py:318] MSFT: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,756 DEBUG [history.py:388] MSFT: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,762 DEBUG [history.py:467] MSFT: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,763 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,763 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,765 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,766 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['GOOGL', 1, 0])
2025-07-12 16:05:46,768 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,769 DEBUG [history.py:165] GOOGL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,769 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,770 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,770 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/GOOGL
2025-07-12 16:05:46,771 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,771 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,772 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,772 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,800 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,801 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,801 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:46,883 DEBUG [data.py:367] response code=200
2025-07-12 16:05:46,883 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:46,884 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:46,886 DEBUG [history.py:281] GOOGL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:46,888 DEBUG [history.py:318] GOOGL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:46,896 DEBUG [history.py:388] GOOGL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,917 DEBUG [history.py:467] GOOGL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:46,918 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:46,918 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:46,920 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:46,921 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['INTC', 1, 0])
2025-07-12 16:05:46,922 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:46,923 DEBUG [history.py:165] INTC: Yahoo GET parameters: {'period1': '2025-07-02 16:05:46-04:00', 'period2': '2025-07-12 16:05:46-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,923 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:46,924 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:46,924 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/INTC
2025-07-12 16:05:46,925 DEBUG [data.py:344] params={'period1': 1751486746, 'period2': 1752350746, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:46,925 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:46,926 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:46,926 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,953 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:46,953 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:46,954 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,093 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,094 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,094 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,095 DEBUG [history.py:281] INTC: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,097 DEBUG [history.py:318] INTC: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,101 DEBUG [history.py:388] INTC: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,103 DEBUG [history.py:467] INTC: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,104 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,104 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,104 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,105 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AMD', 1, 0])
2025-07-12 16:05:47,105 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,106 DEBUG [history.py:165] AMD: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,106 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,106 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,106 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AMD
2025-07-12 16:05:47,106 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,106 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,107 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,107 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,130 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,131 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,131 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,199 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,200 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,200 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,202 DEBUG [history.py:281] AMD: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,205 DEBUG [history.py:318] AMD: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,213 DEBUG [history.py:388] AMD: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,219 DEBUG [history.py:467] AMD: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,219 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,220 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,221 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,222 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['AAPL', 1, 0])
2025-07-12 16:05:47,223 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,223 DEBUG [history.py:165] AAPL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,224 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,224 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,225 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/AAPL
2025-07-12 16:05:47,225 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,226 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,226 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,226 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,251 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,251 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,252 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,357 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,358 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,358 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,361 DEBUG [history.py:281] AAPL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,363 DEBUG [history.py:318] AAPL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,366 DEBUG [history.py:388] AAPL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,369 DEBUG [history.py:467] AAPL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,369 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,369 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,370 INFO [analysis_routes.py:410] Checking summary file for 03 Watch: static/summaries\03 Watch_analysis_results.json
2025-07-12 16:05:47,378 INFO [analysis_routes.py:421] Loaded 21 summaries for 03 Watch
2025-07-12 16:05:47,379 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,379 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['PEP', 1, 0])
2025-07-12 16:05:47,379 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,380 DEBUG [history.py:165] PEP: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,380 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,380 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,381 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/PEP
2025-07-12 16:05:47,381 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,381 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,381 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,382 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,407 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,408 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,408 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,560 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,560 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,561 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,563 DEBUG [history.py:281] PEP: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,566 DEBUG [history.py:318] PEP: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,573 DEBUG [history.py:388] PEP: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,578 DEBUG [history.py:467] PEP: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,579 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,579 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,580 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,581 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['KO', 1, 0])
2025-07-12 16:05:47,582 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,583 DEBUG [history.py:165] KO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,584 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,584 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,585 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/KO
2025-07-12 16:05:47,585 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,586 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,586 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,586 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,614 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,615 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,615 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,767 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,767 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,768 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,770 DEBUG [history.py:281] KO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,772 DEBUG [history.py:318] KO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,776 DEBUG [history.py:388] KO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,779 DEBUG [history.py:467] KO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,779 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,780 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,780 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,781 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['ABNB', 1, 0])
2025-07-12 16:05:47,781 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,782 DEBUG [history.py:165] ABNB: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,782 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,782 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,783 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/ABNB
2025-07-12 16:05:47,783 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,783 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,783 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,783 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,824 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,824 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,825 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:47,899 DEBUG [data.py:367] response code=200
2025-07-12 16:05:47,900 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:47,900 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:47,903 DEBUG [history.py:281] ABNB: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:47,905 DEBUG [history.py:318] ABNB: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:47,912 DEBUG [history.py:388] ABNB: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,919 DEBUG [history.py:467] ABNB: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:47,919 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:47,920 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:47,921 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:47,922 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['PM', 1, 0])
2025-07-12 16:05:47,923 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:47,924 DEBUG [history.py:165] PM: Yahoo GET parameters: {'period1': '2025-07-02 16:05:47-04:00', 'period2': '2025-07-12 16:05:47-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,924 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:47,925 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:47,925 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/PM
2025-07-12 16:05:47,926 DEBUG [data.py:344] params={'period1': 1751486747, 'period2': 1752350747, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:47,926 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:47,926 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:47,927 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,963 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:47,963 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:47,964 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,048 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,049 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,049 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,052 DEBUG [history.py:281] PM: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,054 DEBUG [history.py:318] PM: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,059 DEBUG [history.py:388] PM: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,061 DEBUG [history.py:467] PM: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,061 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,062 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,062 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,063 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MO', 1, 0])
2025-07-12 16:05:48,063 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,063 DEBUG [history.py:165] MO: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,064 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,064 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,064 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MO
2025-07-12 16:05:48,065 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,065 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,065 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,066 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,093 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,094 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,094 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,242 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,243 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,275 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,277 DEBUG [history.py:281] MO: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,279 DEBUG [history.py:318] MO: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,286 DEBUG [history.py:388] MO: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,293 DEBUG [history.py:467] MO: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,294 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,294 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,295 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,296 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NFLX', 1, 0])
2025-07-12 16:05:48,297 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,298 DEBUG [history.py:165] NFLX: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,299 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,299 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,299 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NFLX
2025-07-12 16:05:48,300 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,300 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,301 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,301 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,324 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,325 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,325 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,402 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,403 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,403 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,405 DEBUG [history.py:281] NFLX: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,408 DEBUG [history.py:318] NFLX: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,414 DEBUG [history.py:388] NFLX: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,420 DEBUG [history.py:467] NFLX: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,421 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,421 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,422 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,423 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['TSLA', 1, 0])
2025-07-12 16:05:48,424 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,425 DEBUG [history.py:165] TSLA: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,426 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,426 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,426 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/TSLA
2025-07-12 16:05:48,427 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,427 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,428 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,428 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,456 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,456 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,457 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,522 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,522 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,523 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,526 DEBUG [history.py:281] TSLA: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,529 DEBUG [history.py:318] TSLA: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,537 DEBUG [history.py:388] TSLA: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,543 DEBUG [history.py:467] TSLA: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,543 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,544 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,545 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,547 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['LLY', 1, 0])
2025-07-12 16:05:48,548 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,549 DEBUG [history.py:165] LLY: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,549 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,550 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,550 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/LLY
2025-07-12 16:05:48,551 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,551 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,552 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,552 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,578 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,578 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,579 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,725 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,725 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,726 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,728 DEBUG [history.py:281] LLY: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,731 DEBUG [history.py:318] LLY: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,738 DEBUG [history.py:388] LLY: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,744 DEBUG [history.py:467] LLY: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,744 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,745 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,746 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,747 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['JNJ', 1, 0])
2025-07-12 16:05:48,748 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,749 DEBUG [history.py:165] JNJ: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,750 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,750 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,750 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/JNJ
2025-07-12 16:05:48,751 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,751 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,752 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,752 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,777 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,778 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,778 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:48,938 DEBUG [data.py:367] response code=200
2025-07-12 16:05:48,939 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:48,939 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:48,942 DEBUG [history.py:281] JNJ: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:48,944 DEBUG [history.py:318] JNJ: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:48,951 DEBUG [history.py:388] JNJ: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,958 DEBUG [history.py:467] JNJ: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:48,958 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:48,959 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:48,960 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:48,961 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['PFE', 1, 0])
2025-07-12 16:05:48,962 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:48,963 DEBUG [history.py:165] PFE: Yahoo GET parameters: {'period1': '2025-07-02 16:05:48-04:00', 'period2': '2025-07-12 16:05:48-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,963 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:48,964 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:48,964 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/PFE
2025-07-12 16:05:48,964 DEBUG [data.py:344] params={'period1': 1751486748, 'period2': 1752350748, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:48,964 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:48,965 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:48,965 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,987 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:48,988 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:48,988 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,129 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,130 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,130 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,133 DEBUG [history.py:281] PFE: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,135 DEBUG [history.py:318] PFE: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,142 DEBUG [history.py:388] PFE: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,148 DEBUG [history.py:467] PFE: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,148 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,149 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,150 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,151 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NVAX', 1, 0])
2025-07-12 16:05:49,152 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,152 DEBUG [history.py:165] NVAX: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,153 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,153 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,154 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NVAX
2025-07-12 16:05:49,154 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,155 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,155 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,156 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,192 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,192 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,193 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,257 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,258 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,258 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,261 DEBUG [history.py:281] NVAX: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,264 DEBUG [history.py:318] NVAX: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,272 DEBUG [history.py:388] NVAX: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,277 DEBUG [history.py:467] NVAX: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,277 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,278 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,279 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,280 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['MRNA', 1, 0])
2025-07-12 16:05:49,281 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,282 DEBUG [history.py:165] MRNA: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,282 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,283 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,283 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/MRNA
2025-07-12 16:05:49,284 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,284 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,285 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,285 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,316 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,317 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,318 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,388 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,389 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,390 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,392 DEBUG [history.py:281] MRNA: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,394 DEBUG [history.py:318] MRNA: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,402 DEBUG [history.py:388] MRNA: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,407 DEBUG [history.py:467] MRNA: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,408 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,408 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,409 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,410 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['UAL', 1, 0])
2025-07-12 16:05:49,411 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,412 DEBUG [history.py:165] UAL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,412 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,413 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,413 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/UAL
2025-07-12 16:05:49,414 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,414 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,415 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,415 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,448 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,449 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,450 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,520 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,520 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,521 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,524 DEBUG [history.py:281] UAL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,526 DEBUG [history.py:318] UAL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,535 DEBUG [history.py:388] UAL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,540 DEBUG [history.py:467] UAL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,540 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,541 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,542 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,543 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DAL', 1, 0])
2025-07-12 16:05:49,544 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,544 DEBUG [history.py:165] DAL: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,545 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,545 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,546 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DAL
2025-07-12 16:05:49,546 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,547 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,547 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,548 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,574 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,574 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,575 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,676 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,677 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,677 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,680 DEBUG [history.py:281] DAL: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,682 DEBUG [history.py:318] DAL: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,689 DEBUG [history.py:388] DAL: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,694 DEBUG [history.py:467] DAL: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,695 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,695 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,696 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,697 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['WMT', 1, 0])
2025-07-12 16:05:49,698 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,699 DEBUG [history.py:165] WMT: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,699 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,700 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,700 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/WMT
2025-07-12 16:05:49,701 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,701 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,702 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,702 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,725 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,725 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,726 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:49,865 DEBUG [data.py:367] response code=200
2025-07-12 16:05:49,866 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:49,866 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:49,869 DEBUG [history.py:281] WMT: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:49,871 DEBUG [history.py:318] WMT: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:49,878 DEBUG [history.py:388] WMT: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,884 DEBUG [history.py:467] WMT: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:49,885 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:49,885 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:49,886 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:49,887 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['COST', 1, 0])
2025-07-12 16:05:49,888 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:49,889 DEBUG [history.py:165] COST: Yahoo GET parameters: {'period1': '2025-07-02 16:05:49-04:00', 'period2': '2025-07-12 16:05:49-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,889 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:49,890 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:49,890 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/COST
2025-07-12 16:05:49,891 DEBUG [data.py:344] params={'period1': 1751486749, 'period2': 1752350749, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:49,891 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:49,892 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:49,892 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,915 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:49,916 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:49,916 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,013 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,014 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,015 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,017 DEBUG [history.py:281] COST: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,019 DEBUG [history.py:318] COST: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,023 DEBUG [history.py:388] COST: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,025 DEBUG [history.py:467] COST: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,026 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,026 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,026 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:50,027 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['DIS', 1, 0])
2025-07-12 16:05:50,027 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:50,027 DEBUG [history.py:165] DIS: Yahoo GET parameters: {'period1': '2025-07-02 16:05:50-04:00', 'period2': '2025-07-12 16:05:50-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,028 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:50,028 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:50,028 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/DIS
2025-07-12 16:05:50,028 DEBUG [data.py:344] params={'period1': 1751486750, 'period2': 1752350750, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,029 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:50,029 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:50,029 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,053 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:50,054 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,054 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,194 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,194 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,195 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,198 DEBUG [history.py:281] DIS: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,200 DEBUG [history.py:318] DIS: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,209 DEBUG [history.py:388] DIS: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,215 DEBUG [history.py:467] DIS: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,215 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,216 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,217 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:50,218 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['SPG', 1, 0])
2025-07-12 16:05:50,219 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:50,220 DEBUG [history.py:165] SPG: Yahoo GET parameters: {'period1': '2025-07-02 16:05:50-04:00', 'period2': '2025-07-12 16:05:50-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,220 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:50,221 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:50,221 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/SPG
2025-07-12 16:05:50,221 DEBUG [data.py:344] params={'period1': 1751486750, 'period2': 1752350750, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,222 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:50,222 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:50,223 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,250 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:50,250 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,251 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,363 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,364 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,364 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,367 DEBUG [history.py:281] SPG: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,369 DEBUG [history.py:318] SPG: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,376 DEBUG [history.py:388] SPG: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,383 DEBUG [history.py:467] SPG: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,383 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,384 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,385 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:50,386 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['O', 1, 0])
2025-07-12 16:05:50,387 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:50,387 DEBUG [history.py:165] O: Yahoo GET parameters: {'period1': '2025-07-02 16:05:50-04:00', 'period2': '2025-07-12 16:05:50-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,388 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:50,389 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:50,389 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/O
2025-07-12 16:05:50,389 DEBUG [data.py:344] params={'period1': 1751486750, 'period2': 1752350750, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,390 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:50,390 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:50,391 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,411 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:50,411 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,412 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,527 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,528 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,528 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,531 DEBUG [history.py:281] O: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,533 DEBUG [history.py:318] O: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,540 DEBUG [history.py:388] O: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,545 DEBUG [history.py:467] O: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,546 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,546 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,547 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:50,548 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['CROX', 1, 0])
2025-07-12 16:05:50,549 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:50,550 DEBUG [history.py:165] CROX: Yahoo GET parameters: {'period1': '2025-07-02 16:05:50-04:00', 'period2': '2025-07-12 16:05:50-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,550 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:50,551 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:50,551 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/CROX
2025-07-12 16:05:50,552 DEBUG [data.py:344] params={'period1': 1751486750, 'period2': 1752350750, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,552 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:50,553 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:50,553 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,576 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:50,577 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,577 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,648 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,649 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,650 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,652 DEBUG [history.py:281] CROX: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,654 DEBUG [history.py:318] CROX: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,661 DEBUG [history.py:388] CROX: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,667 DEBUG [history.py:467] CROX: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,668 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,668 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,669 DEBUG [utils.py:96] Entering history()
2025-07-12 16:05:50,670 DEBUG [peewee.py:3319] ('SELECT "t1"."key", "t1"."value" FROM "_kv" AS "t1" WHERE ("t1"."key" = ?) LIMIT ? OFFSET ?', ['NKE', 1, 0])
2025-07-12 16:05:50,671 DEBUG [utils.py:96]  Entering history()
2025-07-12 16:05:50,672 DEBUG [history.py:165] NKE: Yahoo GET parameters: {'period1': '2025-07-02 16:05:50-04:00', 'period2': '2025-07-12 16:05:50-04:00', 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,672 DEBUG [utils.py:96]   Entering get()
2025-07-12 16:05:50,673 DEBUG [utils.py:96]    Entering _make_request()
2025-07-12 16:05:50,673 DEBUG [data.py:343] url=https://query2.finance.yahoo.com/v8/finance/chart/NKE
2025-07-12 16:05:50,674 DEBUG [data.py:344] params={'period1': 1751486750, 'period2': 1752350750, 'interval': '1d', 'includePrePost': False, 'events': 'div,splits,capitalGains'}
2025-07-12 16:05:50,674 DEBUG [utils.py:96]     Entering _get_cookie_and_crumb()
2025-07-12 16:05:50,675 DEBUG [data.py:309] cookie_mode = 'basic'
2025-07-12 16:05:50,675 DEBUG [utils.py:96]      Entering _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,711 DEBUG [data.py:179] reusing crumb
2025-07-12 16:05:50,711 DEBUG [utils.py:101]      Exiting _get_cookie_and_crumb_basic()
2025-07-12 16:05:50,712 DEBUG [utils.py:101]     Exiting _get_cookie_and_crumb()
2025-07-12 16:05:50,824 DEBUG [data.py:367] response code=200
2025-07-12 16:05:50,825 DEBUG [utils.py:101]    Exiting _make_request()
2025-07-12 16:05:50,825 DEBUG [utils.py:101]   Exiting get()
2025-07-12 16:05:50,827 DEBUG [history.py:281] NKE: yfinance received OHLC data: 2025-07-02 13:30:00 -> 2025-07-11 13:30:00
2025-07-12 16:05:50,829 DEBUG [history.py:318] NKE: OHLC after cleaning: 2025-07-02 09:30:00-04:00 -> 2025-07-11 09:30:00-04:00
2025-07-12 16:05:50,834 DEBUG [history.py:388] NKE: OHLC after combining events: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,838 DEBUG [history.py:467] NKE: yfinance returning OHLC: 2025-07-02 00:00:00-04:00 -> 2025-07-11 00:00:00-04:00
2025-07-12 16:05:50,838 DEBUG [utils.py:101]  Exiting history()
2025-07-12 16:05:50,839 DEBUG [utils.py:101] Exiting history()
2025-07-12 16:05:50,843 INFO [analysis_routes.py:497] Multi summary data saved to file: static/multi_summaries\multi_summary_20250712_160550_4.json
2025-07-12 16:05:50,844 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:50] "POST /get_multiple_lists_summaries HTTP/1.1" 200 -
C:\_PythonWorkspace\_NewsLetter_WorkingFolder\app.py:66: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
  return User.query.get(int(user_id))
2025-07-12 16:05:50,894 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:50] "GET /multi_summary_page?file_id=multi_summary_20250712_160550_4 HTTP/1.1" 200 -
2025-07-12 16:05:51,202 INFO [analysis_routes.py:560] Multi summary data requested for file: multi_summary_20250712_160550_4
2025-07-12 16:05:51,221 INFO [analysis_routes.py:571] Retrieved data from file multi_summary_20250712_160550_4: 5 items
2025-07-12 16:05:51,224 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:05:51] "GET /get_multi_summary_data/multi_summary_20250712_160550_4 HTTP/1.1" 200 -
2025-07-12 16:06:44,417 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /chart_analysis/03%20Watch/UAL HTTP/1.1" 200 -
2025-07-12 16:06:44,551 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /get_analysis_dates/UAL HTTP/1.1" 200 -
2025-07-12 16:06:44,665 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /get_memo/UAL/20250712 HTTP/1.1" 404 -
2025-07-12 16:06:44,774 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /static/charts/UAL_daily_20250712.png HTTP/1.1" 200 -
2025-07-12 16:06:44,775 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /static/charts/UAL_monthly_20250712.png HTTP/1.1" 200 -
2025-07-12 16:06:44,775 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:06:44] "GET /static/charts/UAL_weekly_20250712.png HTTP/1.1" 200 -
2025-07-12 16:07:17,784 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:17] "GET /check_existing_analysis/SPGI HTTP/1.1" 200 -
2025-07-12 16:07:20,070 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /view_chart/SPGI HTTP/1.1" 200 -
2025-07-12 16:07:20,115 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /static/charts/SPGI_daily_20250712.png HTTP/1.1" 200 -
2025-07-12 16:07:20,323 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /get_analysis_dates/SPGI HTTP/1.1" 200 -
2025-07-12 16:07:20,420 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /get_memo/SPGI/20250712 HTTP/1.1" 404 -
2025-07-12 16:07:20,444 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /static/charts/SPGI_weekly_20250712.png HTTP/1.1" 200 -
2025-07-12 16:07:20,444 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:20] "GET /static/charts/SPGI_monthly_20250712.png HTTP/1.1" 200 -
2025-07-12 16:07:22,383 INFO [app.py:185] 메인 페이지 접근
2025-07-12 16:07:22,385 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:22] "GET / HTTP/1.1" 200 -
2025-07-12 16:07:22,451 INFO [progress_service.py:130] Progress check requested. Current status: {'is_running': False, 'type': None, 'current_ticker': None, 'current_list': None, 'total_tickers': 0, 'processed_tickers': 0, 'start_time': None, 'estimated_completion': None, 'stop_requested': False}
2025-07-12 16:07:22,451 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:22] "GET /get_current_progress HTTP/1.1" 200 -
2025-07-12 16:07:22,652 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:22] "GET /get_stock_lists HTTP/1.1" 200 -
2025-07-12 16:07:22,967 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:22] "GET /get_current_stock_list HTTP/1.1" 200 -
2025-07-12 16:07:23,224 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /get_tickers HTTP/1.1" 200 -
2025-07-12 16:07:23,280 INFO [admin_routes.py:555] Getting file status for ticker: SPGI
2025-07-12 16:07:23,291 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 12, 347841), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 46, 824184), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,291 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SPGI', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:55', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,292 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/SPGI HTTP/1.1" 200 -
2025-07-12 16:07:23,558 INFO [admin_routes.py:555] Getting file status for ticker: DELL
2025-07-12 16:07:23,558 INFO [admin_routes.py:555] Getting file status for ticker: META
2025-07-12 16:07:23,561 INFO [admin_routes.py:555] Getting file status for ticker: QRVO
2025-07-12 16:07:23,563 INFO [admin_routes.py:555] Getting file status for ticker: UBER
2025-07-12 16:07:23,564 INFO [admin_routes.py:555] Getting file status for ticker: SWKS
2025-07-12 16:07:23,601 INFO [admin_routes.py:555] Getting file status for ticker: AVGO
2025-07-12 16:07:23,604 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 26, 411895), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 57, 7, 500470), 'formatted_time': '2025-07-12 15:57', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,604 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'SWKS', 'chart_time': '2025-07-12 15:56', 'analysis_time': '2025-07-12 15:57', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,605 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/SWKS HTTP/1.1" 200 -
2025-07-12 16:07:23,610 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 29, 31, 700906), 'formatted_time': '2025-07-12 15:29', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 8, 440275), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,610 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 19, 190649), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 55, 722902), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,611 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'DELL', 'chart_time': '2025-07-12 15:29', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,611 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 55, 48, 576583), 'formatted_time': '2025-07-12 15:55', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 56, 24, 691591), 'formatted_time': '2025-07-12 15:56', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,611 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QRVO', 'chart_time': '2025-07-12 15:17', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,612 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/DELL HTTP/1.1" 200 -
2025-07-12 16:07:23,613 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 15, 739130), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 36, 48, 99243), 'formatted_time': '2025-07-12 15:36', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,613 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'UBER', 'chart_time': '2025-07-12 15:55', 'analysis_time': '2025-07-12 15:56', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,614 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/QRVO HTTP/1.1" 200 -
2025-07-12 16:07:23,615 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'META', 'chart_time': '2025-07-12 15:36', 'analysis_time': '2025-07-12 15:36', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,616 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/UBER HTTP/1.1" 200 -
2025-07-12 16:07:23,617 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/META HTTP/1.1" 200 -
2025-07-12 16:07:23,630 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 23, 25, 122876), 'formatted_time': '2025-07-12 15:23', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 24, 4, 142948), 'formatted_time': '2025-07-12 15:24', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,630 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AVGO', 'chart_time': '2025-07-12 15:23', 'analysis_time': '2025-07-12 15:24', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,631 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/AVGO HTTP/1.1" 200 -
2025-07-12 16:07:23,913 INFO [admin_routes.py:555] Getting file status for ticker: QCOM
2025-07-12 16:07:23,939 INFO [admin_routes.py:555] Getting file status for ticker: GOOGL
2025-07-12 16:07:23,941 INFO [admin_routes.py:555] Getting file status for ticker: NVDA
2025-07-12 16:07:23,942 INFO [admin_routes.py:555] Getting file status for ticker: MSFT
2025-07-12 16:07:23,944 INFO [admin_routes.py:555] Getting file status for ticker: INTC
2025-07-12 16:07:23,952 INFO [admin_routes.py:555] Getting file status for ticker: AMD
2025-07-12 16:07:23,967 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 18, 45, 400459), 'formatted_time': '2025-07-12 15:18', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 19, 22, 739102), 'formatted_time': '2025-07-12 15:19', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,968 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'QCOM', 'chart_time': '2025-07-12 15:18', 'analysis_time': '2025-07-12 15:19', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,968 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/QCOM HTTP/1.1" 200 -
2025-07-12 16:07:23,995 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 26, 52, 844746), 'formatted_time': '2025-07-12 15:26', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 29, 917693), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,997 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'GOOGL', 'chart_time': '2025-07-12 15:26', 'analysis_time': '2025-07-12 15:27', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,998 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 16, 38, 810411), 'formatted_time': '2025-07-12 15:16', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 17, 17, 354490), 'formatted_time': '2025-07-12 15:17', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:23,998 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:23] "GET /admin/api/file-status/GOOGL HTTP/1.1" 200 -
2025-07-12 16:07:23,998 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'NVDA', 'chart_time': '2025-07-12 15:16', 'analysis_time': '2025-07-12 15:17', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:23,999 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 14, 27, 602852), 'formatted_time': '2025-07-12 15:14', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 15, 14, 754442), 'formatted_time': '2025-07-12 15:15', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:24,000 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:24] "GET /admin/api/file-status/NVDA HTTP/1.1" 200 -
2025-07-12 16:07:24,000 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'INTC', 'chart_time': '2025-07-12 15:14', 'analysis_time': '2025-07-12 15:15', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:24,001 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 20, 48, 148279), 'formatted_time': '2025-07-12 15:20', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 21, 23, 961137), 'formatted_time': '2025-07-12 15:21', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:24,003 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:24] "GET /admin/api/file-status/INTC HTTP/1.1" 200 -
2025-07-12 16:07:24,003 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'MSFT', 'chart_time': '2025-07-12 15:20', 'analysis_time': '2025-07-12 15:21', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:24,004 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 10, 14811), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 30, 49, 658379), 'formatted_time': '2025-07-12 15:30', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:24,005 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:24] "GET /admin/api/file-status/MSFT HTTP/1.1" 200 -
2025-07-12 16:07:24,005 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AMD', 'chart_time': '2025-07-12 15:30', 'analysis_time': '2025-07-12 15:30', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:24,007 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:24] "GET /admin/api/file-status/AMD HTTP/1.1" 200 -
2025-07-12 16:07:24,282 INFO [admin_routes.py:555] Getting file status for ticker: AAPL
2025-07-12 16:07:24,306 INFO [admin_routes.py:558] File status result: {'chart': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 27, 33, 15867), 'formatted_time': '2025-07-12 15:27', 'button_status': 'normal'}, 'analysis': {'exists': True, 'timestamp': datetime.datetime(2025, 7, 12, 15, 28, 5, 596388), 'formatted_time': '2025-07-12 15:28', 'button_status': 'normal'}, 'is_us_stock': True}
2025-07-12 16:07:24,306 INFO [admin_routes.py:570] API response data: {'success': True, 'ticker': 'AAPL', 'chart_time': '2025-07-12 15:27', 'analysis_time': '2025-07-12 15:28', 'chart_button_status': 'normal', 'analysis_button_status': 'normal'}
2025-07-12 16:07:24,308 INFO [_internal.py:97] 127.0.0.1 - - [12/Jul/2025 16:07:24] "GET /admin/api/file-status/AAPL HTTP/1.1" 200 -
PS C:\_PythonWorkspace\_NewsLetter_WorkingFolder>